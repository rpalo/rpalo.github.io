<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>assert_not magic?</title>
    <description>Programming blog by Ryan Palo.  Code is not magic, and anyone can do it.  Python, Ruby, JavaScript, shell scripting, systems, the web, and more!
</description>
    <link>https://assertnotmagic.com</link>
    <atom:link href="https://assertnotmagic.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 14 May 2018 21:43:40 -0700</pubDate>
    <lastBuildDate>Mon, 14 May 2018 21:43:40 -0700</lastBuildDate>
    <generator>Jekyll v3.5.0</generator>
    
      <item>
        <title>Setting Up a CentOS Server</title>
        <description>&lt;p&gt;I’m slowly discovering that I &lt;em&gt;love&lt;/em&gt; systems stuff.  I’ve always used Ubuntu as the flavor of Linux on my servers, but I was curious about the differences between Ubuntu and CentOS, so I looked up a few guides and tutorials and spun up a new &lt;a href=&quot;https://m.do.co/c/2e87eb578ad9&quot;&gt;Digital Ocean droplet&lt;/a&gt; with a fresh install of CentOS.  I wanted to share what I learned, and all of the things to think about when first getting things set up.  I’m also writing this for when future me forgets a step and can’t remember the commands.&lt;/p&gt;

&lt;p&gt;I’m going to assume that you have working knowledge of the command line for now: changing directories, editing files, and setting file permissions.  I’ll try to explain anything more exotic than that.  If you’re not quite there, but you still want to learn, please &lt;a href=&quot;https://assertnotmagic.com/about/&quot;&gt;get in touch&lt;/a&gt;, and I’d be happy to walk you through it (and/or write another post for that).  This is also a guide for CentOS because that’s what I was doing.  For that reason, all of the commands are Centos (and probably RHEL) specific.  The process and theory should be much the same for other flavors of Linux, though.&lt;/p&gt;

&lt;h2 id=&quot;first-contact&quot;&gt;First Contact&lt;/h2&gt;

&lt;p&gt;I’m not sure how other providers do it, but once you create a droplet on Digital Ocean and your new server is all turned on, they send you an email with the &lt;code&gt;root&lt;/code&gt; password.  You’ll be able to &lt;code&gt;ssh&lt;/code&gt; into your server using these credentials.  If you’re on a Mac, you already have &lt;code&gt;ssh&lt;/code&gt; installed and accessible via your terminal app of choice.  If you’re on Windows, you should look into an &lt;code&gt;ssh&lt;/code&gt; client.  I use &lt;a href=&quot;https://www.chiark.greenend.org.uk/~sgtatham/putty/&quot;&gt;PuTTY&lt;/a&gt; when I need to.  Your hosting provider will provide you with an IP address as well.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;ssh root@&amp;lt;your_server_ip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From now on, if you see something in angle brackets like that, just assume that I mean, “Fill in the placeholder in angle brackets with your own preferred value.”  It will ask you for your password.  Paste it in and hit Enter, and you should be ready to rock!&lt;/p&gt;

&lt;h2 id=&quot;check-your-privilege&quot;&gt;Check Your Privilege&lt;/h2&gt;

&lt;p&gt;Right now you’re logged in as &lt;code&gt;root&lt;/code&gt;.  This is great!  It is also bad.  When you are logged in as root, typos and little mistakes can cause big problems.  It’s generally better to sign in and go about your life in a less privileged account, only invoking &lt;code&gt;sudo&lt;/code&gt; to do privilege-y things when you need to.  That way, if you accidently try to delete yourself out of existence, you’ll have to work a little harder before you succeed.  So, we’ll need to create this everyday user.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;adduser &amp;lt;username&amp;gt; &amp;amp;&amp;amp; passwd &amp;lt;username&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will ask you for a new password for your new user.  Make it a good one.&lt;/p&gt;

&lt;p&gt;Next, let’s make sure that your new user can actually &lt;code&gt;sudo&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;usermod -aG wheel &amp;lt;username&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’re adding our new user to the &lt;code&gt;wheel&lt;/code&gt; group, which (as long as you’re on CentOS 7 or better) means that we’ll be able to &lt;code&gt;sudo&lt;/code&gt; without trouble.&lt;/p&gt;

&lt;p&gt;Lastly, sometimes there’s a default user created: &lt;code&gt;centos&lt;/code&gt;.  I don’t think we need this user for anything.  Remove it with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;deluser centos
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;transferring-keys&quot;&gt;Transferring Keys&lt;/h2&gt;

&lt;p&gt;Next, we’re going to strengthen security by setting up private/public key authentication.  A side benefit of this is that you won’t need to remember a password if you don’t want to anymore.  Temporarily switch users so that you’re operating as your new user.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;su &amp;lt;username&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to authenticate with keys, you’ll need a spot to put your public key.  Let’s create the &lt;code&gt;.ssh&lt;/code&gt; directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mkdir ~/.ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also don’t want anyone but us to be able to fiddle around in this directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo chmod 700 ~/.ssh/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great!  Let’s transfer a key.  Exit &lt;code&gt;ssh&lt;/code&gt; or open up a new terminal on your local machine.  If you don’t yet have a private/public key pair, generate one now.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;ssh-keygen

# Generating public/private rsa key pair.
# Enter file in which to save the key (/Users/localuser/.ssh/id_rsa):
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just hit Enter to accept the default file location for your keys.  This will create two files.  &lt;code&gt;id_rsa&lt;/code&gt; is your private key.  This is &lt;em&gt;Very Secret&lt;/em&gt;™.  Never share this with anyone unless you trust them with your life.  Or, at least, your servers.  I’d go so far as to say don’t put this out on a cloud service or flash drive where it might get hacked, stolen, lost, or blown up.  &lt;code&gt;id_rsa.pub&lt;/code&gt; is your public key, and this is the one you can share with people to prove you are who you say you are.  This is the file that we want to share with our new server’s new user.  There are a couple ways to do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Via ssh-copy-id
ssh-copy-id &amp;lt;username&amp;gt;@&amp;lt;server-ip&amp;gt;

# Via scp
scp ~/.ssh/id_rsa.pub &amp;lt;username&amp;gt;@&amp;lt;server-ip&amp;gt;:~/.ssh/authorized_keys

# Manually via good ole' fashioned copy/paste
cat ~/.ssh/id_rsa.pub

# You'll see something like:
# ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAmLmwkzQDjEOW1Rj3TP5NldVDqUODVH9xuYrkeaSkxtdP

# Copy the whole thing.  Then ssh back into your server like normal and create a new file at ~/.ssh/authorized_keys and paste in in.
nano ~/.ssh/authorized_keys

# Or use emacs or vim or whatever editor you like best.  Whatever.  Shut up.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, the next time you log in as your user, it shouldn’t ask you for a password.&lt;/p&gt;

&lt;p&gt;And once again, make sure the permissions are as restrictive as possible for this file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Once again logged into your server
sudo chmod 600 ~/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;but-we-can-go-even-more-secure&quot;&gt;But We Can Go Even More Secure&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;“But wait, shouldn’t we do a public key for our &lt;code&gt;root&lt;/code&gt; user as well, so we don’t have to type that password either?”&lt;/em&gt; you ask.  The answer is no.  Actually, the most secure way is if your &lt;code&gt;root&lt;/code&gt; user can’t even log in from the outside at all!  We’re now going to edit the configuration for our &lt;code&gt;ssh&lt;/code&gt; daemon (or, &lt;code&gt;sshd&lt;/code&gt; for short) that controls how our server accepts &lt;code&gt;ssh&lt;/code&gt; connections.  Most configuration lives in the &lt;code&gt;/etc&lt;/code&gt; directory, and this is no exception.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo nano /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Look for the line that says:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;#PermitRootLogin yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You’ll want to uncomment it and set that to “no.”&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;PermitRootLogin no
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Side note: I always think it’s funny to add an additional line.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;# PermitKennyLogin DANGER ZONE!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;My wife, a teacher and not an avid sshd configurer, disagrees.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As extra steps, also change the following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;PasswordAuthentication no

# If you connect via IPv4:
AddressFamily inet
# If you connect via IPv6:
AddressFamily inet6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first line turns off all password logins.  Without this, your user account is still open to password login, which somebody can do even without your private key.  The other lines shrink the amount of shenanigans you have to deal with by refusing to serve people who aren’t connecting like you.  If you’re not going to ever connect via IPv6, why leave that open for some botnet to sniff around?&lt;/p&gt;

&lt;p&gt;Lastly, once we’ve reconfigured a service, we need to reload it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo systemctl reload sshd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we should be good to go!&lt;/p&gt;

&lt;h2 id=&quot;moving-in-and-settling-down&quot;&gt;Moving In and Settling Down&lt;/h2&gt;

&lt;p&gt;We’re pretty much done with the security stuff.  By now, you should be pretty much secure and feeling safe.  Now we’re going to focus on turning this server into a pleasant place to work.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;yum update &amp;amp;&amp;amp; sudo yum upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Watch as your server brings itself up to current.&lt;/p&gt;

&lt;h3 id=&quot;protip-yum-errors&quot;&gt;ProTip: Yum Errors&lt;/h3&gt;

&lt;p&gt;If you get interrupted or, hypothetically, your dog jumps into your lap while this is happening and just manages to mash the correct keys to abort the upgrade without cleaning up, and you start seeing errors like “yum lock” or “sqlite3 database lock”, don’t panic.&lt;/p&gt;

&lt;p&gt;Check to see if there’s still a &lt;code&gt;yum&lt;/code&gt; process active.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;ps aux | grep yum
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you see one that shouldn’t be active, try to kill it (take note of the process ID (PID) in the second column of the output from the above command).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;kill &amp;lt;pid&amp;gt;
# Or, if you're feeling feisty and it's not working:
kill -9 &amp;lt;pid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Willy is sorry he caused 90 minutes of frantically Googling error messages.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sad-willy.jpg&quot; alt=&quot;Sad Willy&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;back-to-it&quot;&gt;Back To It&lt;/h3&gt;

&lt;p&gt;Now is a good time to install any packages you couldn’t be without: Zsh, oh-my-zsh, Ruby, Vim, and git are the first ones that come to mind.  I’m going to show you just the first one, because there is one hiccup you might encounter.  If you prefer Fish or some other shell, it should most likely be similar.&lt;/p&gt;

&lt;h2 id=&quot;installing-zsh&quot;&gt;Installing Zsh&lt;/h2&gt;

&lt;p&gt;The first part should make sense.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo yum install zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check to see where your executable lives.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;where zsh
# /usr/bin/zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The important thing here is to make sure that this location is in your &lt;code&gt;/etc/shells&lt;/code&gt; file, which is a list of the approved shells.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo nano /etc/shells
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;# List of acceptable shells for chpass(1).
# Ftpd will not allow users to connect who are not using
# one of these shells.

/bin/bash
/bin/csh
/bin/ksh
/bin/sh
/bin/tcsh
/bin/zsh
/usr/local/bin/pwsh
/usr/bin/zsh # &amp;lt;&amp;lt; Here's the one we're adding.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the zsh executable is approved, you can set your own default shell to zsh.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;chsh -s $(where zsh)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;bonus-bringing-in-dot-files&quot;&gt;Bonus: Bringing in Dot Files&lt;/h2&gt;

&lt;p&gt;If you’re like me, you’re probably reasonably proud of your slowly growing collection of “dot files.”  But how do you get them from your computer onto the server, quickly, sanely, and repeatably?  With Git.  I found &lt;a href=&quot;https://developer.atlassian.com/blog/2016/02/best-way-to-store-dotfiles-git-bare-repo/&quot;&gt;this article by Nicola Paolucci&lt;/a&gt; that I think is brilliant.  We’re going to use a modified bare Git repository in our local home directory!&lt;/p&gt;

&lt;h3 id=&quot;setting-up&quot;&gt;Setting Up&lt;/h3&gt;

&lt;p&gt;On your local machine:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git init --bare $HOME/.dotfiles
alias dot='/usr/bin/git --git-dir=$HOME/.dotfiles --work-tree=$HOME'
dot config --local status.showUntrackedFiles no
echo alias dot='/usr/bin/git --git-dir=$HOME/.dotfiles --work-tree=$HOME' &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We create a bare repo in our home directory to track our dot files, we create the &lt;code&gt;dot&lt;/code&gt; command (or whatever you want to call it) which will function just like the &lt;code&gt;git&lt;/code&gt; command, but just for our dotfiles.  We configure it to only show us if our tracked files change, and then we save the &lt;code&gt;dot&lt;/code&gt; command for later.&lt;/p&gt;

&lt;p&gt;Now, all we have to do is start tracking some dot files!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;dot status
dot add .zshrc
dot commit -m &quot;Add zshrc&quot;
dot remote add origin https://github.com/&amp;lt;you&amp;gt;/dotfiles.git
dot push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You get all the benefits of Git!  You can branch, edit, roll back, diff changes, and more.&lt;/p&gt;

&lt;h3 id=&quot;installing-onto-our-server&quot;&gt;Installing Onto Our Server&lt;/h3&gt;

&lt;p&gt;On the server, add your same &lt;code&gt;dot&lt;/code&gt; command to your &lt;code&gt;.zshrc&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;echo alias dot='/usr/bin/git --git-dir=$HOME/.dotfiles --work-tree=$HOME' &amp;gt;&amp;gt; ~/.zshrc
. ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If there are any stock files that might conflict with the dotfiles you’re about to pull in, either delete them or (better), copy them to a backup directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mkdir .dotfile-backup
mv .bashrc .dotfile-backup
mv .zshrc .dotfile-backup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we’re ready:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone --bare &amp;lt;dotfile repo url&amp;gt; $HOME/.dotfiles
echo &quot;.dotfiles/&quot; &amp;gt;&amp;gt; .gitignore
dot checkout
# Just in case:
dot config status.showUntrackedFiles no
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now your server should be on its way to being comfy, cozy, and functional!&lt;/p&gt;

&lt;h2 id=&quot;bonus-bonus-message-of-the-day&quot;&gt;Bonus Bonus: Message of the Day&lt;/h2&gt;

&lt;p&gt;I don’t know about you, but I believe that 98% of the reasons why I learned how to program were to make computers print out funny messages.  To that end, I set up my Message of the Day accordingly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo vim /etc/motd
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;==================================
You are a gentleman and a scholar.
==================================
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you can’t think of any one-liner affirmations to put in your MOTD, check out this &lt;a href=&quot;https://github.com/rpalo/fanbot/blob/master/fanbot/compliments.py&quot;&gt;list of compliments I curated for a twitter bot to pepper my brother with&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, whenever you log in, your server will greet you with an uplifting message!  😁&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap Up&lt;/h2&gt;

&lt;p&gt;I know there’s a lot more for me to learn in the system administration realm.  I’m starting to stock up on books to read and videos to watch.  Did I miss anything important?  Do you have any extra protips?  Any great resources for learning?  Let me know about them!  Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Mon, 14 May 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/05/14/setting-up-centos/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/05/14/setting-up-centos/</guid>
        
        <category>linux</category>
        
        <category>sysadmin</category>
        
        <category>security</category>
        
        
      </item>
    
      <item>
        <title>PowerShell Tutorial (Especially for People Who Hate PowerShell)</title>
        <description>&lt;h2 id=&quot;preface&quot;&gt;Preface&lt;/h2&gt;

&lt;p&gt;This is a long article.  I’m putting a table of contents up here for the impatient, so you can find the specific section you’re looking for.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-started-with-powershell&quot;&gt;Getting Started with PowerShell&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#some-useful-commands-to-get-started&quot;&gt;Some Useful Commands to Get Started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#just-tell-me-how-to-do-the-thing&quot;&gt;Just Tell Me How to Do the Thing!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#learning-to-love-powershell&quot;&gt;Learning to Love PowerShell&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;My relationship with the terminal – especially Windows PowerShell – has been a bit of a roller coaster.&lt;/p&gt;

&lt;p&gt;I first discovered the terminal when I heard about Python and didn’t know anything about anything.  Like the average person who uses computers for games and applications like Excel and PowerPoint, I went to the &lt;a href=&quot;https://www.python.org/&quot;&gt;Python Site&lt;/a&gt;, downloaded the installer, installed it, and clicked the icon.  Imagine my horror when something like this popped up:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/python-repl.png&quot; alt=&quot;The Python REPL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Where are the buttons?  What’s with the old-timey font?  What do I do with my mouse?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After beginning to program more and more and learning about the terminal, I began to love Bash.  Is it archaic?  Yes.  Are the commands nonintuitive and difficult to remember? Heck, yes.  For some reason, this just made me love it more.&lt;/p&gt;

&lt;p&gt;I had to work hard at it, and typing a bunch of what appears to be gobbledygook that had powerful results made me feel like a wizard.  For instance, typing &lt;code&gt;du -sk * | sort -n | tail&lt;/code&gt; (See?  Gobbledygook!) is a really fast way to see the top largest directories in your current directory.&lt;/p&gt;

&lt;p&gt;As I learned more, I was able to customize how it looked and get fonts, colors, and promts that made the terminal that much more inviting.&lt;/p&gt;

&lt;p&gt;So I decided to take my newfound programming powers to work.  Except that I work as a mechanical engineer, and that typically means SolidWorks and Windows.  So I opened up the recommended terminal, PowerShell.  And again, to my horror:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/powershell-1.png&quot; alt=&quot;The PowerShell terminal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;No problem,&lt;/em&gt; I thought.  I’ll just go to the preferences screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/powershell-customize.png&quot; alt=&quot;PowerShell preferences&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Oh, no.  We’re not in Kansas anymore.  Not exactly what I was used to.  So I went into PowerShell and tried to do some simple things.  Some things worked fine!  &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;cd&lt;/code&gt;, and &lt;code&gt;mkdir&lt;/code&gt; all worked like I was used to.  But I couldn’t figure out why setting the &lt;code&gt;$PATH&lt;/code&gt; was so hard.  Adn what was with all of these backslashes?  How come I couldn’t &lt;code&gt;sudo&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;More and more little irritations that kept reminding me I &lt;em&gt;wasn’t using Bash&lt;/em&gt; kept cropping up.  I gave up and installed &lt;a href=&quot;https://www.cygwin.com/&quot;&gt;Cygwin&lt;/a&gt;, which allowed me to have a Bash experience on my Windows 7 computer.  Except not quote.  Everything I tried to do to get Bash on my Windows machine was just … not quite right.&lt;/p&gt;

&lt;p&gt;Finally, I tried another approach and began working on learning PowerShell the right way, from the beginning, as another language.  As I learned, I found myself buying into the whole PowerShell philosophy and noticing things that were a little nicer than when I was using Bash.  Keep in mind, like everything, PowerShell is just another tool in the toolbox, and whether or not it’s the best tool really depends on the situation.&lt;/p&gt;

&lt;p&gt;I’m not going to give you a complete lesson on the basics of the PowerShell language.  I’m also not going to spend a lot of time telling you how to install it.  &lt;a href=&quot;https://github.com/PowerShell/PowerShell/tree/master/docs/learning-powershell&quot;&gt;This set of docs&lt;/a&gt; is fairly comprehensive, and it’s also a good cheat sheet for reference later.&lt;/p&gt;

&lt;p&gt;My goal here is to show you how things translate from other shells and get you started on your own PowerShell journey, so I’ll assume that you have at least a little bit of experience with a shell language like Bash.&lt;/p&gt;

&lt;h2 id=&quot;getting-started-with-powershell&quot;&gt;Getting Started with PowerShell&lt;/h2&gt;

&lt;p&gt;There are mental shifts away from how Bash-like shells do things that you need to make when you’re starting to learn PowerShell.  If you can get past your initial gut reaction of disgust when you see these differences, you might start to see that they actually make you more productive.&lt;/p&gt;

&lt;h3 id=&quot;everything-is-an-object&quot;&gt;Everything is an Object&lt;/h3&gt;

&lt;p&gt;This is probably the biggest difference that you have to get through your head.  In Unix shells, everything is plain text.  This makes things nice because you can expect text input into all your scripts and you know that if you output text, everything will probably be OK.&lt;/p&gt;

&lt;p&gt;However, the downside is that this makes inspecting specific data a nightmare of text parsing, and it makes working with anything other than text (floating point numbers, anyone?) a real pain.&lt;/p&gt;

&lt;p&gt;In PowerShell, which is actually built on top of &lt;a href=&quot;https://en.wikipedia.org/wiki/.NET_Framework&quot;&gt;.NET&lt;/a&gt;, everything is an object.  This will feel very comforting if you’re coming from Python, Ruby, JavaScript, or a similar language background.  Let’s see some examples and get our hands dirty.  Open up your PowerShell interpreter.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Side note: I put a PowerShell prompt (&lt;code&gt;PS&amp;gt;&lt;/code&gt;) in front of each command so you can tell what is output.  Every line that starts with &lt;code&gt;PS&amp;gt;&lt;/code&gt; is something for you to type.  Everything else is output.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-Process
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see a pretty long string of text.  We don’t have to stand for that!  We are terminal folk.  Code flows through our veins!  Try this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-Process | Sort-Object CPU -descending | Select-Object -first 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you should see a shorter list, reverse sorted by CPU time.  If you’re already getting itchy because all of these commands and options are so long, I address that in a couple sections.  Stay with me.&lt;/p&gt;

&lt;p&gt;The important thing to pay attention to here is the headers at the top of each column.  Each row of this table is actually a &lt;code&gt;System.Diagnostics.Process&lt;/code&gt; &lt;em&gt;object&lt;/em&gt;, not just a row of a table.  Don’t believe me?  Just check!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; (Get-Process)[0] | Get-TypeData
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See there?  The &lt;code&gt;Get-Process&lt;/code&gt; command returned a list of &lt;code&gt;Process&lt;/code&gt; objects, and we were able to select the first one through indexing (without splitting the output by \n!) and shuffle that through the &lt;code&gt;Get-TypeData&lt;/code&gt; command.  These items being objects gives us some power.  What if we only wanted their &lt;code&gt;ProcessName&lt;/code&gt;?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-Process | Sort-Object CPU -descending | Select Object ProcessName -first 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See how easy it was to access that?  We didn’t have to cut the fields delimited by tabs or colons and count which field we wanted (1…2…3…4…5!).  We just told it that we wanted the &lt;code&gt;ProcessName&lt;/code&gt; attribute.  No more parsing, splitting, joining, formatting output, etc.&lt;/p&gt;

&lt;h3 id=&quot;objects-have-types&quot;&gt;Objects Have Types&lt;/h3&gt;

&lt;p&gt;Another side effect of being on top of .NET and having everything be an object is that everything must have a type.  This may be confusing coming from a Bash shell that only has strings and strings that might get interpreted as commands.  Here’s what it does for us.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; 2 + 2
4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ah!  Are you amazed?  That would take way more work in Bash!  And don’t even get me started on:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; 4.2 / 3
1.4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PowerShell usually does a pretty good job of trying to figure out the types that you mean so you can feel as dynamic as with other shells and scripting languages and not have to strictly have types on everything.  But, if you really want to enforce a type, you can do so by prepending the object with its type in square brackets.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; &quot;2&quot; + 2
22  # A string
PS&amp;gt; [Int]&quot;2&quot; + 2
4  # An integer.  The conversion only applies to the &quot;2&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;predictable-command-structure&quot;&gt;Predictable Command Structure&lt;/h3&gt;

&lt;p&gt;This was one of the first things I noticed when I started using PowerShell.  I was looking at example commands on StackOverflow and I kept getting mad at how long the PowerShell commands were in comparison to the Bash commands.  For example, to list the contents of your current directory in Bash:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ls -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Powershell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-ChildItem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s so long!  And capital letters?  Come on.  The good news is that you don’t have to type the whole thing out if you don’t want to.  But, before I get to that, let me explain the rationale behind it.&lt;/p&gt;

&lt;h3 id=&quot;why-so-long&quot;&gt;Why So Long?&lt;/h3&gt;

&lt;p&gt;The creators of PowerShell wanted the commands to be extremely intuitive, such that you could almost guess the command that you needed.  This would be basically impossible with Bash.  There’s no way that you could guess that &lt;code&gt;cat&lt;/code&gt; is the common command to read a file to the terminal.  Once you learn it, it makes sense that it’s short for “concatenate,” but it’s not intuitive by itself.&lt;/p&gt;

&lt;p&gt;PowerShell commands were designed after a simple pattern: “Verb-Noun.”  The creators of PowerShell tried to keep the number of verbs to a minimum.  Common ones you’ll see are &lt;code&gt;Get, New, Add, Clear, Export, Remove, Set, Update, and Write&lt;/code&gt;.  The nouns are also usually pretty intuitive: &lt;code&gt;Process, Item, Object, Date, Job, and Command&lt;/code&gt; are a few.&lt;/p&gt;

&lt;p&gt;This consistent pattern allows someone to look at a script that has commands in it that they’ve never used and still have some idea about what the script is doing.&lt;/p&gt;

&lt;p&gt;The other benefit of keeping a consistent pattern is that PowerShell can detect the “verb” and “noun” sections of commands.  For example, do you want to see all of the commands with the verb “New?”&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-Command -verb New
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In fact, if you know what you want to do, but you can’t remember the command for it, Get-Command is one of a few commands that will be your friend.  What if you wanted to see what kinds of things you could do to “Job” objects?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-Command -noun Job
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes, the commands are longer to type than their equivalent, typically terse Bash commands, but with this additional verbosity comes ease of use, less memorizing of commands, and helpful tooling to keep you productive.&lt;/p&gt;

&lt;h4 id=&quot;aliases-make-your-life-easy&quot;&gt;Aliases Make Your Life Easy&lt;/h4&gt;

&lt;p&gt;Even though the commands are long and verbose, PowerShell knows that people using the terminal are lazy (in a good way!), and it doesn’t want to get in your way.  It has a ton of built-in aliases to make your life easier and make you feel more comfortable, and it can actually do some aliasing on the fly.&lt;/p&gt;

&lt;p&gt;Remember that command we ran earlier to see all of the files in our directory?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-ChildItem

# You can also do:
PS&amp;gt; gci
PS&amp;gt; dir

# And just to make you feel a little bit more at home...
PS&amp;gt; ls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Want to see all of the available aliases?  By this point, you shouldn’t be surprised that the command is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-Alias
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using these aliases during shell sessions can keep you productive and save your fingers from wearing out without giving up the functionality and readability of the longer commands they stand for.&lt;/p&gt;

&lt;h4 id=&quot;best-practice-for-scripting&quot;&gt;Best Practice for Scripting&lt;/h4&gt;

&lt;p&gt;Just a word on best practice: when you’re doing command-line work by yourself, feel free to use as many aliases as you want.  Alias it up.  Get your productivity on.&lt;/p&gt;

&lt;p&gt;However, if you’re writing a script or sharing code with someone, it’s probably best to type the whole command and whole flag names out.  Trust me, your future self and coworkers will thank you.&lt;/p&gt;

&lt;h2 id=&quot;some-useful-commands-to-get-started&quot;&gt;Some Useful Commands to Get Started&lt;/h2&gt;

&lt;p&gt;While the best way to learn PowerShell is to dive in and practice, I’m going to share some commands with you here that are really helpful when you’re a little stuck.&lt;/p&gt;

&lt;h3 id=&quot;when-youre-not-sure-which-command-to-use&quot;&gt;When You’re Not Sure Which Command to Use&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-Command
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will provide you with more information about available commands.  You can zero in on what you want by specifying -verb or -noun parameters.  In order to get more information about one or two particular commands, pipe the output into &lt;code&gt;Format-List&lt;/code&gt;.  This will give you the options, location, and some other useful features.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-Command Get-Alias | Format-List
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;when-youre-not-sure-what-a-command-does&quot;&gt;When You’re Not Sure What a Command Does&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-Help command

# You can also get help by adding the ? parameter
PS&amp;gt; command -?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Get-Help&lt;/code&gt; is roughly the &lt;code&gt;man&lt;/code&gt; of the PowerShell world.  Are you starting to see the benefits of intuitive commands yet?  Actually, &lt;code&gt;Get-Help&lt;/code&gt; has quite a few useful flags as well.  It’s probably a good idea to take a look at them using the method we discussed above:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-Command Get-Help | Format-List

# Or, if you're feeling cheeky:

PS&amp;gt; Get-Help Get-Help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My favorite is that you can ask it specifically for example usage only.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-Help Get-Alias -examples
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;when-youre-not-sure-what-properties-your-object-has&quot;&gt;When You’re Not Sure What Properties Your Object Has&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-Process | Get-Member

# Another similar command:

PS&amp;gt; (Get-Process)[0] | Format-List
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you know what data you want, but you just don’t know what it’s called, &lt;em&gt;or&lt;/em&gt; if you aren’t even sure what data is available to you, these commands will help you “see” your objects a little better.&lt;/p&gt;

&lt;h3 id=&quot;when-you-want-to-get-a-portion-of-the-data&quot;&gt;When You Want to Get a Portion of the Data&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-Process | Select-Object Id, ProcessName -last 20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Select-Object&lt;/code&gt; is your general purpose stuff-whittler.  You can specify particular attributes you want and how many you want.&lt;/p&gt;

&lt;h3 id=&quot;when-you-want-to-filter-your-data&quot;&gt;When You Want to Filter Your Data&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-Process | Where-Object WS -gt 150MB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a few ways to use the &lt;code&gt;Where-Object&lt;/code&gt; command, but this is the simplest one.  In the example above, I selected only the processes whose working set (memory usage) was greater than 150MB.  (Also, can we gush a little about how PowerShell can do KB/MB/GB math?)&lt;/p&gt;

&lt;h2 id=&quot;just-tell-me-how-to-do-the-thing&quot;&gt;Just Tell Me How to Do the Thing!&lt;/h2&gt;

&lt;p&gt;This last section will be just a few snippets for the impatient among you.  If you’re just trying to get one darn thing done in PowerShell and you can’t make it work, these tips should hopefully help.&lt;/p&gt;

&lt;h3 id=&quot;basic-unix-commands-translated&quot;&gt;Basic Unix Commands Translated&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;# pwd
PS&amp;gt; Get-Location  # or gl or pwd

# ls
PS&amp;gt; Get-ChildItem  # or gci or dir or ls

# cd
PS&amp;gt; Set-Location  # or sl or chdir or cd

# cp
PS&amp;gt; Copy-Item  # or copy or cpi or cp

# mv
PS&amp;gt; Move-Item  # or move or mi or mv

# cat
PS&amp;gt; Get-Content  # or gc or type

# mkdir
PS&amp;gt; New-Item -ItemType Directory  # or ni -ItemType Directory or mkdir

# touch
PS&amp;gt; New-Item -ItemType File  # or ni

# rm
PS&amp;gt; Remove-Item  # or del or erase or ri or rm

# rm -rf
PS&amp;gt; Remove-Item -Recurse -Force  # or rm -recurse -force

# head or tail
PS&amp;gt; Select-Object -first # or -last
# usage: Get-Process | Select-Object -first 10

# find
PS&amp;gt; Get-ChildItem -filter *.rb -recurse .
# but, for a slightly easier to read version:
PS&amp;gt; Get-ChildItem -filter *.rb -recurse . | Select-Object FullName
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;access-the-path-and-other-environment-variables&quot;&gt;Access the Path (and Other Environment Variables)&lt;/h3&gt;

&lt;p&gt;In PowerShell, a lot of things get treated like file locations – and environment variables are no exception.  These special groups of file-like variables are called PSDrives.  In the same way you can ask the C: drive what file is at “\Users\ryan\desktop” with a &lt;code&gt;Get-ChildItem C:\Users\ryan\Desktop&lt;/code&gt;, you can do the same thing with &lt;code&gt;env:&lt;/code&gt;, the environment PSDrive.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-ChildItem env:

# and to get a specific one
PS&amp;gt; Get-Content env:PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One super neat thing about these PSDrives is that you can actually read a file location like it’s a variable.  So you can also get to an environment variable this way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; $env:PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This second way is probably the most popular way to get the PATH variable.&lt;/p&gt;

&lt;h3 id=&quot;customize-your-profile&quot;&gt;Customize Your Profile&lt;/h3&gt;

&lt;p&gt;If you’re into command lines and you’re anything like me, you’re probably wondering how to customize them.  The answer lies in &lt;code&gt;$profile&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;finding-the-profile&quot;&gt;Finding the Profile&lt;/h4&gt;

&lt;p&gt;There are actually several profiles, depending on which “Host” you’re using to interface with PowerShell.  For instance, if you’re just using the regular PowerShell command line, the name of your profile will be Microsoft.PowerShell_profile.ps1.  However, if you are working in the PowerShell Integrated Scripting Environment (ISE), your profile will be Microsoft.PowerShellISE_profile.ps1.  You can mostly ignore this, because if you ever want to know, just ask:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; $profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, there are additional options.  If you want to create a profile that will work for the ISE or the regular command line, you’ll want &lt;code&gt;$profile.CurrentUserAllHosts&lt;/code&gt;.  Or, if you want to configure a profile for all users on your computer, you’ll want &lt;code&gt;$profile.AllUsersCurrentHost&lt;/code&gt;.  There are a few options, and you can see them all with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; $profile | Get-Member -type NoteProperty
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;creating-customizations&quot;&gt;Creating Customizations&lt;/h4&gt;

&lt;p&gt;Your profile works just like &lt;code&gt;.bash_profile&lt;/code&gt; does in Bash.  It’s just a script that gets run before you start working in PowerShell.  You can add aliases (although see the note below), functions, variables, and set custom settings.  The simplest way to check if you already have a profile is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Test-Path $profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And to start creating your profile:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;# Use whichever editor you love best
PS&amp;gt; code $profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are a couple of useful settings you might like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;# Microsoft.PowerShell_profile.ps1

# You can customize the window itself by accessing $Host.UI.RawUI
$window = $Host.UI.RawUI
$window.WindowTitle = &quot;Pa-pa-pa-pa-pa-pa-POWERSHELL&quot;
$window.BackgroundColor = &quot;Black&quot;
$window.ForegroundColor = &quot;Gray&quot;

# You can define functions (remember to follow the Verb-Noun convention!)
function Count-History {
  (Get-History | Measure-Object).count
}

function beep {
  echo `a
}

function Edit-Profile {
  [CmdletBinding()]
  [Alias(&quot;ep&quot;)]
  PARAM()

  vim $profile
}

# You can set aliases.
# NOTE: In PowerShell, you can only alias simple commands.
# Unlike Bash, you can't alias commands with arguments flags.
# If you want to do that, you should define a function instead.
Set-Alias touch New-Item  # old habits die hard, amirite?

# You can customize your prompt!
function prompt {
  # ... see the next section for details
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;customize-your-prompt&quot;&gt;Customize Your Prompt&lt;/h3&gt;

&lt;p&gt;There are two ways to do this: the simple way and the complicated way.&lt;/p&gt;

&lt;h4 id=&quot;the-simple-prompt&quot;&gt;The Simple Prompt&lt;/h4&gt;

&lt;p&gt;The simplest way to customize your prompt is by defining the &lt;code&gt;prompt&lt;/code&gt; function, either manually or in your profile.  For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;function prompt {
  $histCount = (Get-History | Measure-Object).count
  return &quot;POWERSHELL LEVEL OVER $histCount THOUSAND! &amp;gt;&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is an amusing way to print the number of inputs that you’ve already typed inside your prompt.  Whatever string you return is what gets set as the prompt.&lt;/p&gt;

&lt;h4 id=&quot;the-complicated-prompt&quot;&gt;The Complicated Prompt&lt;/h4&gt;

&lt;p&gt;Basically, you can do whatever you want in your prompt function, as long as it returns a string at the end.  For example, here’s a more complicated prompt.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;function prompt {
  $loc = (Get-Location).Path.Replace(&quot;$HOME&quot;, &quot;~&quot;)
  $gitBranch = git branch | Select-String &quot;\*&quot;
  if (!$gitBranch) {
    $gitBranch = &quot;&quot;
  } else {
    $gitBranch = $gitBranch.ToString().Replace(&quot;`* &quot;, &quot;&quot;)
  }
  $hisCount = (Get-History | Measure-Object).count
  WriteHost -ForegroundColor yellow &quot;`n $loc&quot;
  WriteHost -NoNewLine &quot;PS [$histCount] $gitBranch -&amp;gt;&quot;
  return &quot; &quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see that I achieve a multi-line prompt by using &lt;code&gt;Write-Host&lt;/code&gt; a number of times.  Lastly, I simply return a space.  My prompt ends up coming out like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;~/Documents/blog
PS [102] master -&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;get-it-to-not-look-ugly&quot;&gt;Get It to Not Look Ugly&lt;/h3&gt;

&lt;p&gt;This is a tough one.  Like I mentioned above, on Windows, PowerShell runs in a window with not very many customization options.  Especially for someone who is used to being able to tweedle every knob of their text editor to their liking, it’s almost painful.  There are two pretty good alternatives, though.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://cmder.net/&quot;&gt;Cmder&lt;/a&gt;: This one is built on top of ConEmu, which is a pretty popular terminal emulator for Windows.  If you like Notepad++, I think you’ll really like this, because it feels similar.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://hyper.is/&quot;&gt;Hyper&lt;/a&gt;: This one is nice for those of you that don’t have a vendetta against Electron applications and are more front-end-edly minded.  The customization and settings are all done in JavaScript and CSS, which makes searching for help really nice.  As might be expected from the JavaScript crowd, there are about a gazillion plugins, some of which are stable and quite good.  There’s a lot of work being done on Hyper right now, so you may have some stability issues, but over the last few months, it’s really gotten quite a bit faster and hiccup-less.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;find-more-resources&quot;&gt;Find More Resources&lt;/h3&gt;

&lt;p&gt;The best place to go is definitely the &lt;a href=&quot;https://docs.microsoft.com/en-us/powershell/&quot;&gt;official docs&lt;/a&gt;.  There’s so much content there that they should have the answers you need.  Since PowerShell is now open-source, you can also check out their &lt;a href=&quot;https://github.com/PowerShell&quot;&gt;GitHub repositories&lt;/a&gt;.  There are some great docs and getting started guides there as well.&lt;/p&gt;

&lt;p&gt;For those who like to learn from books, I would recommend the &lt;a href=&quot;https://amzn.to/2r72pxp&quot;&gt;Windows PowerShell Cookbook&lt;/a&gt; by Lee Holmes, as well as &lt;a href=&quot;https://amzn.to/2r5V7Jm&quot;&gt;Windows PowerShell in Action&lt;/a&gt; by Bruce Payette and Richard Siddaway.  There is a &lt;em&gt;lot&lt;/em&gt; of knowledge in those two books.&lt;/p&gt;

&lt;h2 id=&quot;learning-to-love-powershell&quot;&gt;Learning to Love PowerShell&lt;/h2&gt;

&lt;p&gt;The goal of this article is to show that just because PowerShell is different from what you are used to, it’s not necessarily bad.&lt;/p&gt;

&lt;p&gt;If you take the time to really dig into the differences and learn the reasoning and design decisions behind them, you’ll start to see their strengths and value.  You might actually miss dealing with typed objects in your command line when you go back to other shells.&lt;/p&gt;

&lt;p&gt;Having to parse text streams might start to feel archaic.  You might find yourself using longer, more consistent function names everywhere as you realize how nice it is to be able to read and understand your scripts six months after you write them.&lt;/p&gt;

&lt;p&gt;Or, you might simply stop telling people how much you hate PowerShell whenever they mention it.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Originally posted on &lt;a href=&quot;https://simpleprogrammer.com/powershell-tutorial/&quot;&gt;Simple Programmer&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 28 Apr 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/04/28/powershell-tutorial/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/04/28/powershell-tutorial/</guid>
        
        <category>powershell</category>
        
        <category>tutorial</category>
        
        <category>bash</category>
        
        <category>terminal</category>
        
        
      </item>
    
      <item>
        <title>Keep VS Code from Becoming an IDE</title>
        <description>&lt;p&gt;Some people like a big, heavy, comfy IDE.  Some people like a light, zippy, relatively simple text editor and a terminal window.  And some people like Emacs.  We don’t talk about them.  (I’m joking, I’m sorry, I couldn’t resist.)  I’m part of the zippy editor/terminal group.  This is a tip to help keep the VS Code editor lightweight, like you’ve come to know and love.&lt;/p&gt;

&lt;p&gt;I was using &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VS Code&lt;/a&gt; last week, and it was starting to feel really sluggish.  It seemed like it was eating a lot of memory up (relatively) and I wasn’t sure what was happening.&lt;/p&gt;

&lt;p&gt;And then it hit me:&lt;/p&gt;

&lt;h2 id=&quot;i-had-too-many-extensions-running&quot;&gt;I Had Too Many Extensions Running&lt;/h2&gt;

&lt;p&gt;I love tools.  Especially new shiny ones.  I don’t think I’m alone on this.  Because of this, I frequently install new extensions just to try them out and kick the tires a little bit.  I then promptly forget about them, and leave them not only installed but also activated.&lt;/p&gt;

&lt;p&gt;Each one of these extensions takes up memory, and uses battery, and slows you down.  They can add time to startup speed, too.  Keep in mind, my laptop isn’t all that burly, and a new computer or more memory isn’t in the cards for a little while, so every little bit of memory I can conserve is worth it.&lt;/p&gt;

&lt;h2 id=&quot;heres-the-fix&quot;&gt;Here’s the Fix&lt;/h2&gt;

&lt;p&gt;Turn them all off.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You heard me.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ok, maybe not all of them.  But you don’t need the entire Go-lang support system when you’re working on a Ruby project do you?  You probably don’t need all the Python support either.  Or the C# snippets.&lt;/p&gt;

&lt;p&gt;Go through each of your extensions in the extensions bar and disable them.  You don’t have to reload until you’ve done them all.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/extensions-disable.gif&quot; alt=&quot;Disabling an extension&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you are fast.  You are sleek.  &lt;em&gt;You.  Are.  Speed.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/extensions-installed.gif&quot; alt=&quot;Look at all those disabled extensions&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ok-ok-not-all-of-them&quot;&gt;OK, OK, Not All of Them&lt;/h2&gt;

&lt;p&gt;In my opinion, there are two kinds of extensions.  The first are language support extensions.  As I pick up a new language, I discover there’s an extension that makes writing it better.  Python, Go, Ruby, language-specific linting, prettifying, snippets, and intellisense.&lt;/p&gt;

&lt;p&gt;Apparently, a good portion of these are set to only activate when you’re working on a file with that particular language.  (Thanks! &lt;a href=&quot;https://dev.to/sirwindfield&quot;&gt;@SirWindfield&lt;/a&gt;!)  However, some less well behaved ones aren’t set up this way.  You can check when an extension is set to activate by looking in your extensions directory.  On my system, it’s at &lt;code&gt;~/.vscode/extensions/&lt;/code&gt;.  You’ll see a directory for each extension.  If you look into an extension’s &lt;code&gt;package.json&lt;/code&gt;, you’ll likely see a key for &lt;code&gt;activationEvents&lt;/code&gt;.  Well-behaved extensions will only activate on certain filetypes, commands, and terminal activities.  Troublemakers will simply have an innocuous little “*”.  These are the ones you want to disable.&lt;/p&gt;

&lt;p&gt;If this seems like too much work, just do what I do and disable all of these language-specific ones.&lt;/p&gt;

&lt;p&gt;The other kind of extensions are the general developer happiness extensions.  Things like &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=pajoma.vscode-journal&quot;&gt;journaling support&lt;/a&gt;, &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=2gua.rainbow-brackets&quot;&gt;colored bracket matchers&lt;/a&gt;, &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=dustinsanders.an-old-hope-theme-vscode&quot;&gt;Star Wars-based themes&lt;/a&gt;, and, of course, &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Perkovec.emoji&quot;&gt;emoji support&lt;/a&gt;.  Feel free to leave these enabled all the time.  You deserve to be happy.&lt;/p&gt;

&lt;h2 id=&quot;but-what-if-i-want-my-extensions&quot;&gt;But What if I Want My Extensions?&lt;/h2&gt;

&lt;p&gt;Don’t panic.  If you go to work on a project that needs those language-specific ones, you can enable them &lt;em&gt;just in your workspace&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/extensions-enable-workspace.gif&quot; alt=&quot;Enabling within a workspace&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you get the full power of your development environment, and your computer loves you.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Do you have some favorite extensions?  Any that are a little obscure or don’t get a lot of love?  Let me know about them.  I’m always looking for another extension to add to my list.  I might even leave it enabled.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Edit 4/28/18: Updated some info on when extensions activate themselves, thanks to &lt;a href=&quot;https://dev.to/sirwindfield&quot;&gt;@SirWindfield&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Apr 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/04/26/keep-vs-code-light/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/04/26/keep-vs-code-light/</guid>
        
        <category>editors</category>
        
        <category>vscode</category>
        
        
      </item>
    
      <item>
        <title>Ruby Concepts - Singleton Classes</title>
        <description>&lt;p&gt;&lt;em&gt;Cover Image credit: &lt;a href=&quot;https://www.sitepoint.com/author/ssaeed/&quot;&gt;Samier Saeed&lt;/a&gt; and &lt;a href=&quot;https://www.sitepoint.com/javascript-design-patterns-singleton/&quot;&gt;SitePoint&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Have you ever wondered what a “singleton class” is?  Have you ever been talking to someone or reading a blog post and “singleton class” or “singleton method” got used, and you just smile and nod, making a mental note to look it up later?  Now is your time.  Now is your moment.  I’m hoping to explain this concept in more intuitive language and show you how handy it can be.&lt;/p&gt;

&lt;p&gt;Side note: a lot of this information came from reading &lt;a href=&quot;https://amzn.to/2K7hneD&quot;&gt;The Well-Grounded Rubyist&lt;/a&gt; by &lt;a href=&quot;http://www.davidablack.net/&quot;&gt;David A. Black&lt;/a&gt;.  This book has a ton of great information and is currently one of my favorite books on Ruby.&lt;/p&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;/h2&gt;

&lt;p&gt;If you’ve written much Ruby, you’ve used these “singleton classes” already without knowing it!  First, I’ll show you the code that you’ve probably already written, so you have some context.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class Config
  def self.from_file(filename)
    Config.new(YAML.load_file(filename))
  end
end

dev_config = Config.from_file(&quot;config.dev.yaml&quot;)
# =&amp;gt; Config object with dev settings
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may have also seen it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;module Geometry
  class &amp;lt;&amp;lt; self
    def rect_area(length, width)
      length * width
    end
  end
end

Geometry.rect_area(4, 5)
# =&amp;gt; 20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Up until now, you’ve probably referred to these as “class methods.”  You are mostly right.  But why do they work?  What’s happening here?&lt;/p&gt;

&lt;h2 id=&quot;individualization&quot;&gt;Individualization&lt;/h2&gt;

&lt;p&gt;This is a concept that is central to what makes Ruby so awesome.  Individual objects, even of the same class, are different from each other, and they can have different methods defined on them.  I’m going to shamelessly use our pets to aid in this example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class Pet
  def smolder
    &quot;Generic cute pet smolder&quot;
  end
end

succulent = Pet.new
momo = Pet.new
willy = Pet.new

def momo.smolder
  &quot;sassy cat smolder&quot;
end

def willy.smolder
  &quot;well-meaning dingus smolder&quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, when we call &lt;code&gt;smolder&lt;/code&gt; on &lt;code&gt;succulent&lt;/code&gt;, which we haven’t changed, things go as planned.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;succulent.smolder
# =&amp;gt; Generic cute pet smolder&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/singleton-succulent.jpg&quot; alt=&quot;Our succulent&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But when we call &lt;code&gt;smolder&lt;/code&gt; on &lt;code&gt;willy&lt;/code&gt; or &lt;code&gt;momo&lt;/code&gt;, something different happens!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;momo.smolder
# =&amp;gt; &quot;sassy cat smolder&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/singleton-momo.jpg&quot; alt=&quot;Momo is our cat&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;willy.smolder
# =&amp;gt; &quot;well-meaning dingus smolder&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/singleton-willy.jpg&quot; alt=&quot;Willy is our dog&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, how does this work?  Did we re-define &lt;code&gt;smolder&lt;/code&gt; for each pet?  Do me a favor and check out the output of the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;succulent.singleton_methods
# =&amp;gt; []
momo.singleton_methods
# =&amp;gt; [:smolder]
willy.singleton_methods
# =&amp;gt; [:smolder]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s right!  You’re using a &lt;strong&gt;singleton method&lt;/strong&gt;!  Now, I think, we’re ready to talk about what a &lt;strong&gt;singleton class&lt;/strong&gt; is.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-singleton-class&quot;&gt;What is a Singleton Class?&lt;/h2&gt;

&lt;p&gt;First, a more general programming, less Ruby-specific question: what is a singleton?  While there are various definitions that might be more specific for different cases, at its core, a &lt;strong&gt;singleton&lt;/strong&gt; is just something that there is only one of.  It is the only one of its kind.&lt;/p&gt;

&lt;p&gt;What does that mean in the context of Ruby?  Here it is: when you instantiate an object from a class in Ruby, it knows about the methods that its class gives it.  It also knows how to look up all of the ancestors to its class.  That’s why inheritance works.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Oh, my class doesn’t have that method?  Let’s check its parent class.  And that class’s parent class.  Etc.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the cool things about Ruby is that the ancestry chain is very unambiguous by design.  There is a specific set of rules by which objects search their ancestors, such that there is never any doubt which method gets called.&lt;/p&gt;

&lt;p&gt;In addition to knowing about its class, each object is created with a &lt;strong&gt;singleton class&lt;/strong&gt; that it knows about.  All the singleton class is is a kind of “ghost class” or, more simply, a bag to hold any methods that are defined &lt;em&gt;only for this particular object&lt;/em&gt;.  Try this out:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;momo.singleton_class
# =&amp;gt; #&amp;lt;Class:#&amp;lt;Pet:0x00007fea40060220&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the inheritance hierarchy, it sits invisibly, just before the objects actual class.  However, you can’t see it by looking at the object’s ancestors.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;momo.class.ancestors
# =&amp;gt; [Pet, Object, Kernel, BasicObject]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But if we look at the ancestry tree for the &lt;em&gt;singleton class itself&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;momo.singleton_class.ancestors
# =&amp;gt; [#&amp;lt;Class:#&amp;lt;Pet:0x00007fea40060220&amp;gt;&amp;gt;, Pet, Object, Kernel, BasicObject]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see that it comes in right at the beginning.  Thus, when &lt;code&gt;momo&lt;/code&gt; goes to look for the &lt;code&gt;smolder&lt;/code&gt; method, it looks &lt;em&gt;first&lt;/em&gt; in its singleton class.  Since there is a &lt;code&gt;smolder&lt;/code&gt; method there, it calls that one, instead of looking further up the tree to the one defined in the &lt;code&gt;Pet&lt;/code&gt; class.&lt;/p&gt;

&lt;h2 id=&quot;what-does-this-have-to-do-with-class-methods&quot;&gt;What Does This Have to Do with Class Methods?&lt;/h2&gt;

&lt;p&gt;Now is when we start to see the power of the singleton class.  Don’t forget that every class is just an object of the class &lt;code&gt;Class&lt;/code&gt;.  If that sentence made you start to hyperventilate, don’t worry.  I’ll explain.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;Pet.class
# =&amp;gt; Class
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And &lt;code&gt;Class&lt;/code&gt; is just a class that provides some methods to every instance of it (classes) you create, just like any other class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;Class.instance_methods(false)
# =&amp;gt; [:new, :allocate, :superclass]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, really, when you’re defining “class methods” that you plan to call directly on the class, what you’re actually doing is defining methods on that particular Class object — in its singleton class!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class Pet
  def self.random
    %w{cat dog bird fish banana}.sample
  end
end

Pet.singleton_methods
# =&amp;gt; [:random]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;And…&lt;/em&gt; if the singleton class exists, it becomes the parent class to singleton_classes of classes that inherit from the main class.  An example should help.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class Pet
  def self.random
    %w{cat dog bird fish banana}.sample
  end
end

class Reptile &amp;lt; Pet
  def self.types
    %w{lizard snake other}
  end
end

Reptile.singleton_methods
# =&amp;gt; [:types, :random]
Reptile.singleton_class.ancestors
# =&amp;gt; [#&amp;lt;Class:Reptile&amp;gt;, #&amp;lt;Class:Pet&amp;gt;, #&amp;lt;Class:Object&amp;gt;, #&amp;lt;Class:BasicObject&amp;gt;, Class, Module, Object, Kernel, BasicObject]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See how &lt;code&gt;Reptile&lt;/code&gt;’s singleton class inherits from &lt;code&gt;Pet&lt;/code&gt;’s singleton class, and thus the “class methods” available to &lt;code&gt;Pet&lt;/code&gt; are also available to &lt;code&gt;Reptile&lt;/code&gt;?&lt;/p&gt;

&lt;h2 id=&quot;other-tidbits&quot;&gt;Other Tidbits&lt;/h2&gt;

&lt;p&gt;I think so far, we’ve pretty much covered all of the important bits.  There are, however, a couple more interesting details that I thought were cool that are sort of tangentially related: the somewhat hard to decipher &lt;code&gt;class &amp;lt;&amp;lt; self&lt;/code&gt; syntax, the different ways of creating class methods, and the use of &lt;code&gt;extend&lt;/code&gt;.  Feel free to read on if you’re interested.&lt;/p&gt;

&lt;h3 id=&quot;class--self&quot;&gt;&lt;code&gt;Class &amp;lt;&amp;lt; self&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;There are actually two ways to use the &lt;code&gt;class&lt;/code&gt; keyword: directly followed by a constant (a la &lt;code&gt;class Gelato&lt;/code&gt;), or followed by the “shovel operator” and an object (a la &lt;code&gt;class &amp;lt;&amp;lt; momo&lt;/code&gt;).  You already know about the first one — it’s the way you usually declare a class!  Let’s focus on the second one, which is the syntax to directly open up an object’s singleton class.  You can think about it as essentially the same as defining methods like we were doing above.&lt;/p&gt;

&lt;p&gt;What I mean is this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# This:
def momo.snug
  &quot;*snug*&quot;
end

# is the same (pretty much) as this:
class &amp;lt;&amp;lt; momo
  def snug
    &quot;*snug*&quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You do this all the time when you re-open regular classes to add more functionality.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class Gelato
  attr_reader :solidity

  def initialize
    @solidity = 100
  end

  def melt
    @solidity -= 10
  end
end

# And re-open it to add one more method

class Gelato
  def refreeze
    @solidity = 100
  end
end

dessert = Gelato.new
5.times { dessert.melt }
dessert.solidity
# =&amp;gt; 50
dessert.refreeze
# =&amp;gt; 100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The syntax &lt;code&gt;class &amp;lt;&amp;lt; object; end&lt;/code&gt; is just another way of re-opening the object’s singleton class.  The benefit here is that you can define constants and multiple methods all at once instead of one at a time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# Instead of:
def momo.pounce
  &quot;pounce!&quot;
end

def momo.hiss
  &quot;HISS&quot;
end

def momo.lives
  9
end

# We can do
class &amp;lt;&amp;lt; momo
  def pounce
    &quot;pounce!&quot;
  end

  def hiss
    &quot;HISS&quot;
  end

  def lives
    9
  end
end

momo.singleton_methods
# =&amp;gt; [:pounce, :hiss, :lives, :smolder]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s a common pattern when adding multiple class methods to a class to see the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class Pet
  class &amp;lt;&amp;lt; self
    def random
      %w{cat dog bird fish banana}.sample
    end
  end
end

# Which, since &quot;self&quot; is inside of the class
# declaration, means that 'self == Pet', so you could
# also do this:

class Pet
  class &amp;lt;&amp;lt; Pet
    def random
      # ...
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Maybe you’ve seen this pattern and not known what it is, or maybe you knew it adds class methods but didn’t know what why.  Now you know!  It’s all thanks to the singleton class!&lt;/p&gt;

&lt;h2 id=&quot;class--self-vs-def-selfmethod-vs-def-petmethod&quot;&gt;&lt;code&gt;class &amp;lt;&amp;lt; self&lt;/code&gt; vs &lt;code&gt;def self.method&lt;/code&gt; vs &lt;code&gt;def Pet.method&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;There are a few different ways to declare class methods.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# 1. In global scope
def Pet.random
  %w{cat dog bird fish banana}.sample
end

# 2. Inside the class definition, using 'self'
class Pet
  def self.random
    %w{cat dog bird fish banana}.sample
  end
end

# 3. Inside the class definition, using the shovel
class Pet
  class &amp;lt;&amp;lt; self
    def random
      %w{cat dog bird fish banana}.sample
    end
  end
end

# 4. Outside the class definition, using the shovel
class &amp;lt;&amp;lt; Pet
  def random
    %w{cat dog bird fish banana}.sample
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So what’s the difference??  When do you use one or the other?&lt;/p&gt;

&lt;p&gt;The good news is that they’re all basically the same.  You can use whichever one makes you the happiest and matches the style of your codebase.  The only difference is with #3, and how it deals with constants and scope.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;MAX_PETS = 3

def Pet.outer_max_pets
  MAX_PETS
end

class Pet
  MAX_PETS = 1000

  class &amp;lt;&amp;lt; self
    def inner_max_pets
      MAX_PETS
    end
  end
end

Pet.outer_max_pets
# =&amp;gt; 3
Pet.inner_max_pets
# =&amp;gt; 1000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See that the &lt;code&gt;inner_max_pets&lt;/code&gt; function has access to the scope inside the &lt;code&gt;Pet&lt;/code&gt; class and the constants there?  That’s really the only difference.  Feel free to carry on using your favorite syntax with confidence.&lt;/p&gt;

&lt;h2 id=&quot;using-extend-to-safely-modify-built-in-classes&quot;&gt;Using Extend to Safely Modify Built-In Classes&lt;/h2&gt;

&lt;p&gt;Hopefully, at some point, you’ve read a blog post or had someone warn you about the dangers of re-opening built-in Ruby classes.  Doing something like the following should be done veeeery carefully.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class String
  def verbify
    self + &quot;ify&quot;
  end
end

&quot;banana&quot;.verbify
# =&amp;gt; &quot;bananaify&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The dangers include accidentally overwriting built-in methods, having methods clash with other libraries in the same project, and generally making things not behave as expected.  The &lt;code&gt;extend&lt;/code&gt; keyword can help with all of that!&lt;/p&gt;

&lt;h3 id=&quot;what-is-extend&quot;&gt;What is Extend?&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;extend&lt;/code&gt; keyword is a lot like &lt;code&gt;include&lt;/code&gt; in that it allows you to load functionality into your class/module from other classes/modules.  The difference, however, is that &lt;code&gt;extend&lt;/code&gt; puts these methods onto the target object’s singleton class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;module Wigglable
  def wiggle
    &quot;*shimmy*&quot;
  end
end

willy.extend(Wiggleable)
willy.singleton_methods
# =&amp;gt; [:wiggle, :smolder]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thus, if you use &lt;code&gt;extend&lt;/code&gt; inside a class definition instead of &lt;code&gt;include&lt;/code&gt;, the methods will get added to the class’s singleton class as class methods instead of being added to the class itself as instance methods.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;module Hissy
  def hiss
    &quot;HISS&quot;
  end
end

class Reptile
  extend Hissy
end

snek = Reptile.new
snek.hiss
# =&amp;gt; Error!  Undefined method hiss for 'snek'
Reptile.hiss
# =&amp;gt; &quot;HISS&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;how-does-that-help-us&quot;&gt;How Does That Help Us?&lt;/h3&gt;

&lt;p&gt;So, let’s say that we really needed to have that &lt;code&gt;verbify&lt;/code&gt; method on the strings we were using.  While you could create and use a subclass of &lt;code&gt;String&lt;/code&gt;, another option would be to extend individual strings!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;module Verby
  def verbify
    self + &quot;ify&quot;
  end
end

noun = &quot;pup&quot;
noun.extend(Verby)
noun.verbify
# =&amp;gt; &quot;pupify&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;cheesy-wrap-up&quot;&gt;Cheesy Wrap Up&lt;/h2&gt;

&lt;p&gt;So remember, singletons aren’t just an intimidating-sounding but not-super-complicated Ruby topic.  &lt;em&gt;You&lt;/em&gt; are the &lt;em&gt;real&lt;/em&gt; &lt;strong&gt;singleton&lt;/strong&gt; — yes, you’re a human, but there’s nobody else quite like you.  You’ve got &lt;strong&gt;class&lt;/strong&gt; and your own &lt;strong&gt;methods&lt;/strong&gt; of doing things, and that’s valuable.  And now we’ve just added a little more functionality to you.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class &amp;lt;&amp;lt; you
  def use_singletons_for_fun_and_profit
    # ...
  end
end
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Sun, 22 Apr 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/04/22/ruby-singleton-classes/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/04/22/ruby-singleton-classes/</guid>
        
        <category>ruby</category>
        
        <category>singleton</category>
        
        <category>basics</category>
        
        
      </item>
    
      <item>
        <title>Dict Moves in Python</title>
        <description>&lt;p&gt;Quick tip time!&lt;/p&gt;

&lt;p&gt;Today, I started the #100DaysOfCode challenge again (for the millionth time).  I’m determined to actually succeed at this challenge, and I refuse to give up.  This time, I’m using the &lt;a href=&quot;https://codechalleng.es/&quot;&gt;Python Bytes Code Challenges website&lt;/a&gt; and their 100 days project suggestions.  During today’s challenge, I learned a neat little trick for working with dictionaries that I wanted to share.&lt;/p&gt;

&lt;h2 id=&quot;the-challenge&quot;&gt;The Challenge&lt;/h2&gt;

&lt;p&gt;The challenge is this: go through a &lt;a href=&quot;https://raw.githubusercontent.com/rpalo/100DaysOfCode/master/001/dictionary.txt&quot;&gt;dictionary of words&lt;/a&gt;, which is really just a copy of &lt;code&gt;/usr/share/dict/words&lt;/code&gt;.  Find the word that scores the highest in Scrabble, using these letter scores:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;SCRABBLE_SCORES = [
  (1, &quot;E A O I N R T L S U&quot;),
  (2, &quot;D G&quot;),
  (3, &quot;B C M P&quot;),
  (4, &quot;F H V W Y&quot;), 
  (5, &quot;K&quot;), 
  (8, &quot;J X&quot;), 
  (10, &quot;Q Z&quot;),
]
LETTER_SCORES = {
    letter: score for score, letters in scrabble_scores
    for letter in letters.split()
}
# {&quot;A&quot;: 1, &quot;B&quot;: 3, &quot;C&quot;: 3, &quot;D&quot;: 2, ...}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;the-issue&quot;&gt;The Issue&lt;/h2&gt;

&lt;p&gt;The issue is that I don’t want to worry about whether or not there are any invalid characters in the input (for now at least).  So if I look up the word “snoot!43@@@ “, right now, I’d prefer to see the score for SNOOT and then 0 points for the rest of the characters.  I know there are a bunch of ways to do this, but the first way that popped into my head was to use a &lt;em&gt;default&lt;/em&gt; of 0 (i.e. if you try to look up a character that’s not in &lt;code&gt;LETTER_SCORES&lt;/code&gt;, it returns zero instead of raising a &lt;code&gt;KeyError&lt;/code&gt;.)&lt;/p&gt;

&lt;h2 id=&quot;enter-defaultdict&quot;&gt;Enter DefaultDict&lt;/h2&gt;

&lt;p&gt;Luckily for us, Python comes with exactly the thing we need: a &lt;code&gt;defaultdict&lt;/code&gt;, courtesy of the standard library’s &lt;code&gt;collections&lt;/code&gt; module.  Its usage is reasonably straightforward: you supply the &lt;code&gt;defaultdict&lt;/code&gt; with a class or function that constructs the default if the input isn’t found.  Let me show you.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from collections import defaultdict

zeros = defaultdict(int)
zeros[&quot;a&quot;] = 1
zeros[&quot;b&quot;] = zeros[&quot;definitely not in there&quot;] + 4
print(zeros)
# =&amp;gt; defaultdict(&amp;lt;int&amp;gt;, {&quot;a&quot;: 1, &quot;b&quot;: 4, &quot;definitely not in there&quot;: 0})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since the &lt;code&gt;zeros&lt;/code&gt; dict can’t find the &lt;code&gt;&quot;definitely not in there&quot;&lt;/code&gt; key, it calls its default-maker function, &lt;code&gt;int&lt;/code&gt;.  Go ahead and open up your Python REPL and try just calling the &lt;code&gt;int&lt;/code&gt; function with no arguments.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; int()
0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;int&lt;/code&gt; function, called with no arguments, returns 0 every time.&lt;/p&gt;

&lt;p&gt;You can even create your own default-maker functions (and classes will work too)!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from random import choice

def confusing_default():
    possibles = [&quot;1&quot;, 1, True, &quot;banana&quot;]
    return choice(possibles)

tricky_dict = defaultdict(confusing_default)
tricky_dict[&quot;Ryan&quot;]
# =&amp;gt; &quot;banana&quot;
tricky_dict[&quot;Python&quot;]
# =&amp;gt; True
tricky_dict[&quot;Why would you do this?&quot;]
# =&amp;gt; 1
tricky_dict
# =&amp;gt; defaultdict(&amp;lt;confusing_default&amp;gt;, {&quot;Ryan&quot;: &quot;banana&quot;, &quot;Python&quot;: True, &quot;Why would you do this?&quot;: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Often times, you can do things a little quicker with &lt;code&gt;lambdas&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from random import randint

SCREAMING = defaultdict(lambda: &quot;A&quot;)
for i in range(20):
    key = randint(0, 3)
    SCREAMING[key] += &quot;A&quot;
SCREAMING
# =&amp;gt; defaultdict(&amp;lt;function &amp;lt;lambda&amp;gt; at 0x108707f28&amp;gt;, {0: 'AAAAAAAA', 1: 'AAAAAAA', 3: 'AAAAA', 2: 'AAAA'})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In fact, I actually think that using &lt;code&gt;defaultdict(lambda: 0)&lt;/code&gt; is more explicit and less confusing than using &lt;code&gt;defaultdict(int)&lt;/code&gt;, as long as you’re not creating huge numbers of these &lt;code&gt;defaultdicts&lt;/code&gt; this way.&lt;/p&gt;

&lt;h2 id=&quot;upgrading-to-a-defaultdict&quot;&gt;Upgrading to a DefaultDict&lt;/h2&gt;

&lt;p&gt;Now, finally, we’re ready for the quick tip.  Up above, I defined &lt;code&gt;LETTER_SCORES&lt;/code&gt; as a plain, old Python &lt;code&gt;dict&lt;/code&gt;.  How do I get the default behaviors I want, quickly?  One way is using the built-in &lt;code&gt;dict.update()&lt;/code&gt; function, which merges two dictionaries.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;FORGIVING_SCORES = defaultdict(lambda: 0)
FORGIVING_SCORES.update(LETTER_SCORES)

FORGIVING_SCORES[&quot;Q&quot;]
# =&amp;gt; 10

FORGIVING_SCORES[&quot;@&quot;]
# =&amp;gt; 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hooray!&lt;/p&gt;

&lt;p&gt;Granted, this isn’t a perfect solution, because the &lt;code&gt;FORGIVING_SCORES&lt;/code&gt; defaultdict stores each of the invalid asks.  It’s probably OK if you’re not expecting a huge number of invalid look-ups.  If you &lt;em&gt;are&lt;/em&gt; worried about staying space-efficient, though, it’s probably better to do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;score = LETTER_SCORES.get(&quot;@&quot;) or 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;get&lt;/code&gt; function returns &lt;code&gt;None&lt;/code&gt; if a &lt;code&gt;KeyError&lt;/code&gt; occurs, and the &lt;code&gt;or&lt;/code&gt; allows us to provide a sane default if the lookup goes bad.  And everybody’s happy!&lt;/p&gt;

</description>
        <pubDate>Sun, 08 Apr 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/04/08/convert-to-default-dict/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/04/08/convert-to-default-dict/</guid>
        
        <category>python</category>
        
        <category>tricks</category>
        
        
      </item>
    
      <item>
        <title>Data Science Cardio 1 - Weather</title>
        <description>&lt;p&gt;I’m going to shamelessly borrow the idea of programming cardio from &lt;a href=&quot;https://javascript30.com/&quot;&gt;Wes Bos’s JavaScript30 course&lt;/a&gt;.  I thought you folks might like it if I present a short data science example problem and then work through it with you.  I’ve got a student learning Python that I’m tutoring right now (my first one!  Yay!), and this was one of her problems.  It seemed like an example that covered a lot of bases.  This example will be in Python (3).  I’ll try to link to the appropriate libraries and docs when they come up so you can explore further instead of taking my word for things.&lt;/p&gt;

&lt;p&gt;So, without further ado, let’s.  Get.  PUMPED!&lt;/p&gt;

&lt;h2 id=&quot;0-the-problem&quot;&gt;0. The Problem&lt;/h2&gt;

&lt;p&gt;We have been asked to investigate how various weather phenomena vary based on latitude.  Specifically, we need to collect at least 500 samples of weather data, randomly distributed across the globe.  Once we have this data, we should create plots and comment on any patterns we see in Temperature, Humidity, Cloudiness, and Wind Speed.  I’m going to convert to the US customary system of units.  You do whatever makes you happy.&lt;/p&gt;

&lt;p&gt;A note: there are a bunch of different ways you could go about solving this problem.  I’m going to show you one way.  Feel free to explore your own solution method and see if the results turn out similar.&lt;/p&gt;

&lt;p&gt;A second note: I use a few libraries that aren’t a part of the standard library, but are available in the Python Package Index (PyPI).  If you come up against a &lt;code&gt;No module named 'whatever'&lt;/code&gt; error, you’ll need to open up a terminal window and type &lt;code&gt;pip install &amp;lt;packagename&amp;gt;&lt;/code&gt;, where &lt;code&gt;&amp;lt;packagename&amp;gt;&lt;/code&gt; is the name of the package you’re missing, and hit Enter.  Optionally, if you’re using Jupyter Notebooks, you can also type &lt;code&gt;! pip install &amp;lt;packagename&amp;gt;&lt;/code&gt; in a cell and run it.  The bang (&lt;code&gt;!&lt;/code&gt;) lets the notebook run a one-line system call.&lt;/p&gt;

&lt;p&gt;I initially completed this analysis using a &lt;a href=&quot;http://jupyter.org/install&quot;&gt;Jupyter Notebook&lt;/a&gt;.  I highly recommend that.  You can find the &lt;a href=&quot;https://github.com/rpalo/tutoring-weather-example&quot;&gt;source code repo here&lt;/a&gt; if you get antsy and want to peek ahead.&lt;/p&gt;

&lt;h2 id=&quot;1-500-random-coordinates&quot;&gt;1. 500 Random Coordinates&lt;/h2&gt;

&lt;p&gt;The first thing we need is 500 random coordinates.  We’ll need these numbers to span across the whole &lt;a href=&quot;https://en.wikipedia.org/wiki/Latitude#The_graticule_on_the_sphere&quot;&gt;range of possible latitudes&lt;/a&gt; (-90 degrees to 90 degrees), as well as the whole &lt;a href=&quot;https://en.wikipedia.org/wiki/Longitude&quot;&gt;range of possible longitudes&lt;/a&gt; (-180 degrees to 180 degrees).  Note that negative latitude indicates South, and negative longitude indicates West.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import numpy as np
import pandas as pd

np.random.seed(125)  # So that other scientists can duplicate our work!
lats = np.random.randint(-90, 90, size=500)
longs = np.random.randint(-180, 180, size=500)
coords = pd.DataFrame({
    &quot;latitude&quot;: lats,
    &quot;longitude&quot;: longs
})

# Let's take a look at how our coordinates look
coords.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;latitude&lt;/th&gt;
      &lt;th&gt;longitude&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;67&lt;/td&gt;
      &lt;td&gt;-117&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;-3&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;-23&lt;/td&gt;
      &lt;td&gt;-146&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;-19&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;-47&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For sanity’s sake, let’s ensure our coordinates are reasonably random.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from matplotlib import pyplot as plt
# And, we're going to give our plots a bit of pizazz.
# Feel free to skip these two lines
import seaborn

seaborn.set()

plt.hist(coords['latitude'])
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/lat-hist.png&quot; alt=&quot;Latitude histogram&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;plt.hist(coords['longitude'])
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/long-hist.png&quot; alt=&quot;Longitude histogram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are some spikes, but overall, it seems reasonable for what we’re doing.  If you’re unhappy with the random-osity of your data, go ahead and change the random seed and re-run the cells above.&lt;/p&gt;

&lt;h2 id=&quot;2-setting-up-the-weather-api&quot;&gt;2. Setting Up the Weather API&lt;/h2&gt;

&lt;p&gt;This part is going to be more administrative and less fun programming.  But that’s OK!  In order to get this weather data, we’ll need to hit a web API and ask it for the data.  Specifically, we’re going to be using the &lt;a href=&quot;https://openweathermap.org/&quot;&gt;OpenWeatherData API&lt;/a&gt;.  You’ll need to create an account (it’s free!) and you’ll be provided with an API key, which you can find on the “API Keys” tab of your account page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/api-page.png&quot; alt=&quot;The API tab on the account page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Keep this key a secret (I’ll give you some pointers on how to do this well).  You wouldn’t want some nefarious person hammering the weather API and everybody thinking it was you.  Think about your reputation as a good weather API citizen!  Think of the children!&lt;/p&gt;

&lt;p&gt;As the page says, it may take a little while before your key is working.  Luckily, we’ve got some setup to do before we’re ready to make use of it.  For now, let’s take a look at the endpoint we’ll be using.  Check out &lt;a href=&quot;https://openweathermap.org/current#geo&quot;&gt;the coordinate weather endpoint docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We could ask for the data we need in a few different ways, but since we’ve already created a bunch of beautiful (latitude, longitude) pairs, I think that’s probably the easiest way to go.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;http://api.openweathermap.org/data/2.5/weather?lat={lat}&amp;amp;lon={lon}&amp;amp;APPID={api_key}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You’ll notice that, even though the online documentation doesn’t discuss it right there, we’ll need to add the &lt;code&gt;APPID&lt;/code&gt; parameter with our API key.  If you’re feeling really cool, you can also add &lt;code&gt;units=imperial&lt;/code&gt; to get Fahrenheit temperature and Miles/Hour wind speed.  You can also stick to the defaults and convert later.  I’ll show you that process as well.  Now, enough administrative stuff!  Let’s get back to the code!&lt;/p&gt;

&lt;h2 id=&quot;3-setting-up-to-get-the-data&quot;&gt;3. Setting Up to Get the Data&lt;/h2&gt;

&lt;p&gt;Before we open up our analysis code, I recommend you open a new file in the same directory called &lt;code&gt;secrets.py&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# secrets.py
API_KEY = &quot;copy your api key here&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you’re keeping track of this project with a git repository, add this file to your &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;__pycache__/
.ipynb_checkpoints
secrets.py
haters
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we’re ready to dive back into the notebook.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from secrets import API_KEY
import requests
import time

def get_weather_data(coords, time_between=1):
    &quot;&quot;&quot;Queries the OpenWeatherAPI for data.
    
    Args:
    	coords: A Pandas DataFrame with rows containing 'latitude'
    		and 'longitude' columns.
    	time_between: An integer specifying the sleep time in seconds
    		between each API ping.  Defaults to the OpenWeatherAPI's
    		recommended limit of 1 request per second.
    
    Returns:
    	A list of nested dicts (loaded JSON results).
    &quot;&quot;&quot;
    results = []
    for ind, row in coords.iterrows():
        lat, lon = row['latitude'], row['longitude']
        query = f&quot;http://api.openweathermap.org/data/2.5/weather?lat={lat}&amp;amp;lon={lon}&amp;amp;APPID={API_KEY}&quot;
        response = requests.get(query)
        results.append(response.json())
        time.sleep(time_between)
    return results
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two key features to this code.  The first is the “f-string”, which is Python 3’s shwoopy syntax for string interpolation.  The nice thing is that these “f-strings” are &lt;a href=&quot;https://cito.github.io/blog/f-strings/#performance-considerations&quot;&gt;super fast!&lt;/a&gt;  Relatively speaking, at least.  But we are able to insert our latitude and longitude values directly from the DataFrame row, as well as our API key.&lt;/p&gt;

&lt;p&gt;The other key feature is that we’re using &lt;a href=&quot;http://docs.python-requests.org/en/master/&quot;&gt;&lt;code&gt;requests&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;http://docs.python-requests.org/en/master/user/quickstart/#make-a-request&quot;&gt;make a &lt;code&gt;get&lt;/code&gt; request&lt;/a&gt;, and then &lt;a href=&quot;http://docs.python-requests.org/en/master/user/quickstart/#json-response-content&quot;&gt;using the &lt;code&gt;json&lt;/code&gt; function&lt;/a&gt; to immediately process the response into a Python dict we can work with.  If you weren’t sure how we were going to get the data from the API, you might actually be disappointed that it’s not more complicated than this.  As long as you know the right URL, &lt;code&gt;requests&lt;/code&gt; makes our job pretty darn pleasant.&lt;/p&gt;

&lt;h2 id=&quot;3a-logging-our-requests&quot;&gt;3a. Logging our Requests&lt;/h2&gt;

&lt;p&gt;I’m going to go on two quick asides for some extra practice.  If you want to skip right to step four, don’t worry.  You won’t hurt my feelings.&lt;/p&gt;

&lt;p&gt;The first aside I’m going to go on is to set up some logging to a file.  Up towards the top of your notebook, add the following code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import logging

logger = logging.getLogger('weather')
logger.setLevel(logging.INFO)
fh = logging.FileHandler('api_calls.log')
formatter = logging.Formatter('%(asctime)s - %(message)')
fh.setFormatter(formatter)
logger.addHandler(fh)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then inside your &lt;code&gt;get_weather_data&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def get_weather_data(coords, time_between=1):
    # ...
    results = []
    for ind, row in coords.iterrows():
        lat, long = row['latitude'], row['longitude']
        query = f&quot;http://api.openweathermap.org/data/2.5/weather?lat={lat}&amp;amp;lon={lon}&amp;amp;APPID={API_KEY}&quot;

        # Here's the new stuff
        clean_url = query.rpartition(&quot;&amp;amp;&quot;)[0]  # Don't log your api key!
        logger.info(f&quot;Call {ind}: ({lat}, {lon}) - {clean_url}&quot;)

        response = requests.get(query)
        results.append(response.json())
        time.sleep(time_between)
    return results
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we get to save a log of all the URL’s we hit!&lt;/p&gt;

&lt;h2 id=&quot;3b-getting-the-closest-city-name&quot;&gt;3b. Getting the Closest City Name&lt;/h2&gt;

&lt;p&gt;You know what would be nice?  Logging out the name of the closest city with our logs.  There’s a neat little library called &lt;a href=&quot;https://github.com/wingchen/citipy&quot;&gt;&lt;code&gt;citipy&lt;/code&gt;&lt;/a&gt; that does just that!  Let’s update our &lt;code&gt;get_weather_data&lt;/code&gt; function one more time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from secrets import API_KEY
from citipy import citipy  # Make sure to import it once you've installed it

def get_weather_data(coords, time_between=1):
    # ...
    results = []
    for ind, row in coords.iterrows():
        lat, lon = row['latitude'], row['longitude']
        query = f&quot;http://api.openweathermap.org/data/2.5/weather?lat={lat}&amp;amp;lon={lon}&amp;amp;APPID={API_KEY}&quot;
        clean_url = query.rpartition(&quot;&amp;amp;&quot;)[0]
        
        # Here's the new stuff
        city = citipy.nearest_city(lat, lon)
        logger.info(f&quot;Call {ind}: {city.city_name} {clean_url})&quot;)
        
        result = requests.get(query)
        results.append(result.json())
        time.sleep(time_between)
    return results
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will be great!  Back to the problem at hand.&lt;/p&gt;

&lt;h2 id=&quot;4-actually-getting-our-data&quot;&gt;4. Actually Getting Our Data&lt;/h2&gt;

&lt;p&gt;Let’s test our function with a test call, first.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;test_coords = pd.DataFrame({&quot;latitude&quot;: [37], &quot;longitude&quot;: [-122]})
test_results = get_weather_data(test_coords)
test_results
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;[{'base': 'stations',
  'clouds': {'all': 1},
  'cod': 200,
  'coord': {'lat': 37, 'lon': -122},
  'dt': 1522341300,
  'id': 5381421,
  'main': {'humidity': 76,
   'pressure': 1021,
   'temp': 287.78,
   'temp_max': 289.15,
   'temp_min': 286.15},
  'name': 'Pasatiempo',
  'sys': {'country': 'US',
   'id': 399,
   'message': 0.004,
   'sunrise': 1522331815,
   'sunset': 1522376913,
   'type': 1},
  'visibility': 16093,
  'weather': [{'description': 'clear sky',
    'icon': '01d',
    'id': 800,
    'main': 'Clear'}],
  'wind': {'deg': 331.003, 'speed': 1.32}}]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If yours comes out just like mine, then it looks like we’re good to run the full data collection.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;full_results = get_weather_data(coords)
full_results[:3]  # Let's peek at the first 3 datapoints
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will run for about 8 and a half minutes (the cost of being a good citizen).  Go get a coffee or a snack to reward yourself for all your hard work.&lt;/p&gt;

&lt;h2 id=&quot;5-saving-the-data&quot;&gt;5. Saving the Data&lt;/h2&gt;

&lt;p&gt;First thing’s first.  Let’s save our data out so we’ll have it just in case something gets exploded.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import json

with open(&quot;weather.json&quot;, &quot;w&quot;) as outfile:
    json.dump(full_results, outfile)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create a new file &lt;code&gt;weather.json&lt;/code&gt; in your project directory.  Time for another optional side-step: unit conversion.&lt;/p&gt;

&lt;h2 id=&quot;5a-unit-conversion&quot;&gt;5a. Unit Conversion&lt;/h2&gt;

&lt;p&gt;If you didn’t use the &lt;code&gt;units=imperial&lt;/code&gt; parameter in your API call and you want US customary units, you’ll need some helper functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def k_to_f(temp):
    &quot;&quot;&quot;Converts a Kelvin temperature to Fahrenheit&quot;&quot;&quot;
    return temp * 9/5 - 459.67

def mps_to_mph(speed):
    &quot;&quot;&quot;Converts a meters/s speed to miles/hour&quot;&quot;&quot;
    return speed * 2.23694
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;6-munging-the-data&quot;&gt;6. Munging the Data&lt;/h2&gt;

&lt;p&gt;Yes, it’s a word.  &lt;a href=&quot;https://en.wikipedia.org/wiki/Mung_(computer_term)&quot;&gt;Look it up.&lt;/a&gt;  Whatever.  We’re going to need to build a data structure that we can turn into a DataFrame, and we want to narrow things down to just the data we care about.  Take another look at your example output above and dig into the JSON data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;important_json_data = []
for point in full_results:
    lat = point['coord']['lat']
    lon = point['coord']['lon']
    temp = k_to_f(point['main']['temp'])
    humidity = point['main']['humidity']
    cloudiness = point['clouds']['all']
    wind = mps_to_mph(point['wind']['speed'])

    row = [lat, lon, temp, humidity, cloudiness, wind]
    important_json_data.append(row)

weather_df = pd.DataFrame(important_json_data)
weather_df.columns = [
    &quot;latitude&quot;,
    &quot;longitude&quot;,
    &quot;temperature&quot;,
    &quot;humidity&quot;,
    &quot;clouds&quot;,
    &quot;wind&quot;,
]
weather_df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;latitude&lt;/th&gt;
      &lt;th&gt;longitude&lt;/th&gt;
      &lt;th&gt;temperature&lt;/th&gt;
      &lt;th&gt;humidity&lt;/th&gt;
      &lt;th&gt;clouds&lt;/th&gt;
      &lt;th&gt;wind&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;67&lt;/td&gt;
      &lt;td&gt;-117&lt;/td&gt;
      &lt;td&gt;-16.15&lt;/td&gt;
      &lt;td&gt;69&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;4.29&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;-3&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;74.93&lt;/td&gt;
      &lt;td&gt;96&lt;/td&gt;
      &lt;td&gt;68&lt;/td&gt;
      &lt;td&gt;2.17&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;-23&lt;/td&gt;
      &lt;td&gt;-146&lt;/td&gt;
      &lt;td&gt;80.96&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;88&lt;/td&gt;
      &lt;td&gt;12.91&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;-19&lt;/td&gt;
      &lt;td&gt;67.37&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;9.78&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;-47&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;44.78&lt;/td&gt;
      &lt;td&gt;97&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;13.35&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Again, let’s save our data out just in case.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;weather_df.to_csv(&quot;weather.csv&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Congratulations!  The heavy lifting is done.  Let’s take a look at our data and see what conclusions we can draw.&lt;/p&gt;

&lt;h2 id=&quot;7-plotting-the-data&quot;&gt;7. Plotting the Data&lt;/h2&gt;

&lt;p&gt;Remember our goals?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Compare temperature and latitude.&lt;/li&gt;
  &lt;li&gt;Compare humidity and latitude.&lt;/li&gt;
  &lt;li&gt;Compare cloudiness and latitude.&lt;/li&gt;
  &lt;li&gt;Compare wind speed and latitude.&lt;/li&gt;
  &lt;li&gt;Draw some conclusions.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’m going to put the latitude on the Y-axis, because I feel like the plots will feel more intuitive.  We generally think about latitudes going North to South and thus top to bottom.  If you want to insist on plotting the independent variable (latitude) on the X-axis and the dependent variable (temperature) on the Y-axis, then do whatever makes you happy.&lt;/p&gt;

&lt;h3 id=&quot;temperature&quot;&gt;Temperature&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;plt.scatter(weather_df.temperature, weather_df.latitude)
plt.xlabel(&quot;Temperature (F)&quot;)
plt.ylabel(&quot;Latitude (degrees)&quot;)
plt.title(&quot;Temperature vs. Latitude&quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/temp-lat-plot.png&quot; alt=&quot;Temperature Latitude plot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Woohoo!  That’s some strong trending right there!  As you might have expected, the temperature climbs as you approach the equator and drops off as you near the poles.  Go science!&lt;/p&gt;

&lt;h3 id=&quot;humidity&quot;&gt;Humidity&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;plt.scatter(weather_df.humidity, weather_df.latitude)
plt.xlabel(&quot;Humidity (%)&quot;)
plt.ylabel(&quot;Latitude (degrees)&quot;)
plt.title(&quot;Humidity vs. Latitude&quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/humidity-lat-plot.png&quot; alt=&quot;Humidity vs. Latitude plot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These are some strange results.  It looks like, except for a few drop offs, an abundance of the data points had 100% humidity.  I find this hard to believe.  I found a few Google results that make me wonder if there’s not something weird with the way that they’re measuring humidity.  If anybody has any other thoughts, I’d be interested to hear them.  Let me know what you think.&lt;/p&gt;

&lt;h3 id=&quot;cloudiness&quot;&gt;Cloudiness&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;plt.scatter(weather_df.clouds, weather_df.lat)
plt.xlabel(&quot;Cloudiness (%)&quot;)
plt.ylabel(&quot;Latitude (degrees)&quot;)
plt.title(&quot;Cloudiness vs. Latitude&quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/clouds-lat-plot.png&quot; alt=&quot;Cloudiness vs. Latitude plot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I can’t really see much of a trend here, either.  The striation of the data (neat rows) makes me feel like there’s some kind of a pattern, though.  Let’s see if maybe there’s a longitude relationship.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;plt.scatter(weather_df.long, weather_df.clouds)
plt.xlabel(&quot;Longitude (degrees)&quot;)
plt.ylabel(&quot;Cloudiness (%)&quot;)
plt.title(&quot;Longitude vs. Cloudiness&quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/clouds-long-plot.png&quot; alt=&quot;Longitude Cloudiness plot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hmm… I’m still not seeing much of a relationship.  Once again, if anybody has any thoughts, let me know!&lt;/p&gt;

&lt;h3 id=&quot;wind-speed&quot;&gt;Wind Speed&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;plt.scatter(weather_df.wind, weather_df.lat)
plt.xlabel(&quot;Wind Speed (mph (abs))&quot;)
plt.ylabel(&quot;Latitude (degrees)&quot;)
plt.title(&quot;Wind Speed vs. Latitude&quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/wind-lat-plot.png&quot; alt=&quot;Wind Latitude plot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is an interesting plot.  We see kind of a mish-mash, but with some clear spikes at about -50 degrees and 50 degrees.  It seems to drop off toward zero around the poles and the equator.  At first, I was confused, but then I remembered my 8th grade science class.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/global-wind-currents.png&quot; alt=&quot;Global wind current patterns&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are a group of winds called the “&lt;a href=&quot;https://en.wikipedia.org/wiki/Prevailing_winds#Westerlies_and_their_impact&quot;&gt;Westerlies&lt;/a&gt;” that blow between 40 and 50 degrees North and South latitude.  These are sometimes called the “&lt;a href=&quot;https://en.wikipedia.org/wiki/Roaring_Forties&quot;&gt;Roaring Forties&lt;/a&gt;” and, due to the expanses of open ocean in the southern hemisphere especially (no land or trees to impede the winds), they are used to speed up sailing times.  They tend to shift towards the equator in that hemisphere’s summer and towards the pole in the winter.&lt;/p&gt;

&lt;p&gt;Conversely, the area around the equator is known as the “&lt;a href=&quot;https://en.wikipedia.org/wiki/Intertropical_Convergence_Zone&quot;&gt;Intertropical Convergence Zone,&lt;/a&gt;” also called the “&lt;a href=&quot;https://en.wikipedia.org/wiki/Doldrums&quot;&gt;doldrums.&lt;/a&gt;”  This area is a combination of dead wind and thunderstorms, depending on season.&lt;/p&gt;

&lt;p&gt;I feel reasonably comfortable saying our data seems to support this trend.  And so, once again, hooray for science!&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap Up&lt;/h2&gt;

&lt;p&gt;That’s it!  Hopefully you enjoyed the practice.  If you come up with any other neat findings from our data, be sure to share them with me.&lt;/p&gt;

&lt;p&gt;Happy munging!&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Mar 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/03/28/data-science-cardio-weather/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/03/28/data-science-cardio-weather/</guid>
        
        <category>python</category>
        
        <category>data-science</category>
        
        <category>scientific</category>
        
        <category>tutorial</category>
        
        
      </item>
    
      <item>
        <title>Get on the Bullet Journaling Train</title>
        <description>&lt;p&gt;In early February, I learned about &lt;a href=&quot;http://bulletjournal.com/get-started/&quot;&gt;bullet journaling&lt;/a&gt;.  After trying it for a couple of months and loving it, I wanted to share an introduction and my own personal modifications and tips.&lt;/p&gt;

&lt;h2 id=&quot;bullet-journaling-what-is-it&quot;&gt;Bullet Journaling: What is It?&lt;/h2&gt;

&lt;p&gt;Fundamentally, Bullet Journaling is just a structured way to keep track of your thoughts efficiently, without putting an extra unnecessary load on your life to do it.  The bullet journal understands that you are busy, and you don’t always have time to sit down and pour out your deepest thoughts and feelings.  “Dear diary…”  Instead, you condense your thoughts down into small, bite-sized chunks and phrases, the most fundamental of which is the “bullet.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-dot.jpg&quot; width=&quot;100&quot; height=&quot;100&quot; alt=&quot;A dot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This humble dot signifies a task or something with an action item.  We’ll discuss more about the specifics in a minute.  I want to finish up my high-level overview first.&lt;/p&gt;

&lt;p&gt;There are a few main strategies that we’ll cover.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;What You Need&lt;/li&gt;
  &lt;li&gt;The Index&lt;/li&gt;
  &lt;li&gt;The Long View&lt;/li&gt;
  &lt;li&gt;The Month View&lt;/li&gt;
  &lt;li&gt;The Daily Log&lt;/li&gt;
  &lt;li&gt;The List/Notes Page&lt;/li&gt;
  &lt;li&gt;Threading&lt;/li&gt;
  &lt;li&gt;Different Types of Bullets&lt;/li&gt;
  &lt;li&gt;Migrating and Scheduling&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Following these topics, I’ll finish up with some mindset tips and things I’ve learned.&lt;/p&gt;

&lt;h2 id=&quot;bullet-journaling-how-to-do-it&quot;&gt;Bullet Journaling: How to Do It&lt;/h2&gt;

&lt;h3 id=&quot;1-what-you-need&quot;&gt;1. What You Need&lt;/h3&gt;

&lt;p&gt;You can really use any medium that you can record information on, paper or digital.  However, I prefer using a nice, hard-bound notebook with at least one attached bookmark.  I also like to use pretty thick paper with graph lines or a dot matrix on it.  If it has a slightly yellow tint, even better.  I bought &lt;a target=&quot;_blank&quot; href=&quot;https://www.amazon.com/gp/product/1441323716/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1441323716&amp;amp;linkCode=as2&amp;amp;tag=ryanpalo-20&amp;amp;linkId=2afec5d8eff5ce5ca3b20158fead9db4&quot;&gt;this one&lt;/a&gt;&lt;img src=&quot;//ir-na.amazon-adsystem.com/e/ir?t=ryanpalo-20&amp;amp;l=am2&amp;amp;o=1&amp;amp;a=1441323716&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;and I love it.  I also highly recommend you get a really nice pen.  Like, at least a five dollar pen.  I find that it adds to the meditative effect of bullet journaling if my tools make me feel like a &lt;em&gt;scholar&lt;/em&gt;.  😀 Since my notebook has a little pocket flap in the back, I like to keep a small ruler in there in case I want to make any &lt;em&gt;really&lt;/em&gt; straight lines.&lt;/p&gt;

&lt;p&gt;Now that you have your tools, let’s get started.&lt;/p&gt;

&lt;h3 id=&quot;2-the-index&quot;&gt;2. The Index&lt;/h3&gt;

&lt;p&gt;The Index is what keeps your whole journal tied together and allows you to take notes whenever you need without stressing out about how many pages to give yourself.  Open up your notebook to the first full blank spread.  Label these two pages and the next two with the word “Index.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-index-blank.jpg&quot; alt=&quot;The blank Index section&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also, in the bottom outside corner of each of these four pages, number the pages (1, 2, 3, and 4).  This index will tell you where in your journal different sections start and end.  Since there is nothing in our journal yet, our index is blank.  We’ll fill it in some as we add some of the next sections.  The main thing is to know that as we add sections, they’ll end up looking like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-index-item.jpg&quot; alt=&quot;An index item&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since our journal is flexible, it lets us interrupt sections with other sections.  We keep track of these jumps with comma-separated page regions.&lt;/p&gt;

&lt;h3 id=&quot;3-the-long-view&quot;&gt;3. The Long View&lt;/h3&gt;

&lt;p&gt;The long view is a two-page glance at the next six months.  Open up your notebook to the first blank spread after your Index pages.  If you have a ruler, now’s the time to use it.  Draw two horizontal lines on each page, separating these two pages into six equal regions.  Label each of these sections in the upper left with the next six months.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-long-blank.jpg&quot; alt=&quot;The blank Long View section&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This section is for keeping tasks and information that is either a long-term goal or not immediately actionable.  If someone invited you to a wedding in three months, this would be the perfect section for it.  Add some goals to this section using a bullet point.  When you complete these tasks, you can put a little X over the bullet point.  We’ll talk more about different bullet styles for different items later.&lt;/p&gt;

&lt;p&gt;You’ll use this section. to remind you of things when you fill in the more short-term sections in the next few months.  And, since we’ve added a new section to our journal, don’t forget to add page numbers to the bottom of each page and add this section to your Index.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-index-long-view.jpg&quot; alt=&quot;Adding the Long View to the Index&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bullet Journaling is a constant process of keeping track of the immediate and short-term stuff while frequently zooming out to take in the big picture as well.  You’ll see that as we continue the next few sections, gradually zooming in on your life.&lt;/p&gt;

&lt;h3 id=&quot;4-the-month-view&quot;&gt;4. The Month View&lt;/h3&gt;

&lt;p&gt;Great!  Now that we’re in command of our six-month goals, the next main page type is the month overview page.  Open your journal to the next blank spread after the Long View.  Title both pages with the name of the current month (which should be the first month on your Long View).  The left page will be your calendar page.  Fill in a vertical column with every number day in the month.  For March, that would be 1 to 31, each on its own row.  Just beside these numbers, put a letter or two to signify which day of the week this date will be.  I also like to put a horizontal line between each week to help me visually see where I’m at more easily.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-month-calendar.jpg&quot; alt=&quot;Calendar month view&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The right page of this spread will be the bullet page.  Put down any to-do’s, tasks, goals, or notes that you can think of that will come up this month.  I like to write any important dates/holidays/birthdays on the left side next to the numbers and letters.  Be sure to turn back to your Long View to see if there’s anything there that you can import into your first month section.  This will be an often-used technique.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-month-task.jpg&quot; alt=&quot;Task Month View&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you’re done, don’t forget to add some page numbers and add this section to your Index.&lt;/p&gt;

&lt;h3 id=&quot;5-the-daily-log&quot;&gt;5. The Daily Log&lt;/h3&gt;

&lt;p&gt;This entry type will be the majority of what you do in the bullet journal.  Once again, open up your journal to the first available blank spread after your first Month View and label it with “(Name of Month) Daily Log”.  Then, place a section header on the page with today’s date.  Put any tasks or to-do items that you want to get done today.  Just like before, don’t forget to flip back to the Month View and even the Long View to see if there are any items that need to be imported into today’s tasks.&lt;/p&gt;

&lt;p&gt;Try to be realistic, but don’t be afraid to put some stretch goals down as well.  If you don’t get something done today that you planned on, don’t stress out.  Just work on one day at a time.  At the end of the day, I like to put some notes about other things I did that day or what else happened.  I find that, over time, this helps me actually remember the days and weeks that pass better, helping me treat each day as more special.  I tend to get to the end of the week and can remember the things I accomplished, keeping things from getting monotonous.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-daily-log.jpg&quot; alt=&quot;Filled-in Daily Log&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Add some page numbers and add your Daily Log section to your index.  Since you’re not sure how many pages this will take up, just put a starting page number and a dash.  If something else comes up and interrupts your Daily Log, you can put the ending page number and a comma, and put the next section of the Daily Log into the index when you start it back up again.  We’ll talk more about this in the Threading section.&lt;/p&gt;

&lt;h3 id=&quot;6-the-listnotes-page&quot;&gt;6. The List/Notes Page&lt;/h3&gt;

&lt;p&gt;It might happen that you’re going through your daily logs and you decide to watch a how-to video or take on online course — something where you want to take notes.  I do this a lot while reading programming books and tutorials, and I’ve found it really helps me remember things a lot better, and gives me a little better information source than having to constantly Google the same things.  Simply put a header at the top of the page, give yourself a few blank pages to take notes in, and start jotting down your notes.  Add page numbers as you get to each page, and add this section to your Index so you can find it again later.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-list-page.jpg&quot; alt=&quot;List Page&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;7-threading&quot;&gt;7. Threading&lt;/h3&gt;

&lt;p&gt;This is one of the key techiques of bullet journaling and the thing that makes it so flexible.  It’s how you can safely interrupt your daily logs with a grocery list or page of notes without worrying about leaving a bunch of blank pages in between.  Your notes sections can interrupt each other and stop and start as many times as you like.  It just makes your Index look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-index-item.jpg&quot; alt=&quot;A skipping Index entry&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve also found it useful to put a little note to myself about where the next section starts or ends above the page number in the section itself, so I don’t have to turn back to the Index all the time if I don’t need to.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-threading-note.jpg&quot; alt=&quot;Threading note above a page number&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;8-different-types-of-bullets&quot;&gt;8. Different Types of Bullets&lt;/h3&gt;

&lt;p&gt;As we’ve discussed, the basic task unit of bullet journaling is a dot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-dot.jpg&quot; width=&quot;100&quot; height=&quot;100&quot; alt=&quot;A dot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When you complete this task, you should put a little X over it, like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-types.jpg&quot; alt=&quot;Different bullet types&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the main goals of bullet journaling is helping you weed out the things that aren’t worth your time.  If you decide a task just isn’t going to get completed or you don’t want to do it, just put a single line through it.&lt;/p&gt;

&lt;p&gt;If you have something that you want to note down, but it isn’t really a task to complete, use a dash.&lt;/p&gt;

&lt;p&gt;If you’ve got a task that is important or that you want to draw extra attention to, put a little asterisk next to it.&lt;/p&gt;

&lt;p&gt;If you’ve got something exciting or neat (usually paired with an information/note dash), put a little exclamation mark next to it.&lt;/p&gt;

&lt;p&gt;If something needs a little more looking into, put a little eye next to it (or something that vaguely resembles an eye).&lt;/p&gt;

&lt;h3 id=&quot;9-migrating-and-scheduling&quot;&gt;9. Migrating and Scheduling&lt;/h3&gt;

&lt;p&gt;At the end of each month, you should go through the previous Month Log and the previous month’s Daily Logs.  Find all of the tasks that weren’t completed.  Now is a good time to put a line through anything that ended up not mattering or not getting done.  If there’s something that still ought to get done, you have a couple of options.  You can put a forward-facing arrow and push in into your next month’s Month Log or a Collection/List page that you’ve created.  This is called “Migrating” a task.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-migration.jpg&quot; alt=&quot;A migrated task&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Or, you can send it back to the Long View to get completed sometime in the future.  Do this by putting a backwards-facing arrow in front of it.  Then be sure to write it in the Long View in the appropriate place.  This is called “Scheduling” a task.  (I like to call it creating a problem for Future-Me).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-scheduling.jpg&quot; alt=&quot;A scheduled task&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;locked-and-loaded&quot;&gt;Locked and Loaded&lt;/h2&gt;

&lt;p&gt;If you’ve made it this far, you’re well on your way to being a bullet journaling master.  Here are the main things to take away.  Bullets should be fast, so they’re not a burden on your schedule, but they don’t have to be.  If you’ve got some extra time to sit down and take more detailed notes, good on you.&lt;/p&gt;

&lt;p&gt;This method is designed to be low-stress.  Don’t freak out if you forget to do a daily log.  Just catch up the next day and do some info dashes to remind you of what you did that day.  If you make it a stressful thing, then when you miss a day, you’ll feel bad that you have to do two days worth of stressful things and you’ll want to skip it that much more.  The best way to stay consistent is to make your bullet journal a happy place and not beat yourself up about doing it wrong.  Cut yourself some slack.&lt;/p&gt;

&lt;p&gt;Final Pro-Tip: Make sure to put your name and contact info at the very front of your bullet journal.  You wouldn’t want to lose it with no chance of anyone contacting you when they find it, would you?&lt;/p&gt;

&lt;p&gt;For more information, go to the official &lt;a href=&quot;http://bulletjournal.com/&quot;&gt;Bullet Journal website&lt;/a&gt;.  They’ve got a lot of great resources, and you can even buy actual “Bullet Journals” from them.&lt;/p&gt;

&lt;p&gt;Everybody does their journals a little differently.  My mom likes to get really artsy and color in her Monthly Logs.  I rarely draw in my journal.  I like bullets and straight lines and consistent formatting (hence my journal’s built-in ruler pouch).  It soothes me.  I want to hear from you.  If you’ve got another type of page that you like to include in your journal that I didn’t mention, show me in the comments or &lt;a href=&quot;https://twitter.com/paytastic&quot;&gt;tweet me a picture&lt;/a&gt; and I’ll share it with my army of followers (double-digits, baby, awww yeah!).&lt;/p&gt;

&lt;p&gt;Thanks again for reading!&lt;/p&gt;

</description>
        <pubDate>Sun, 25 Mar 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/03/25/bullet-journal/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/03/25/bullet-journal/</guid>
        
        <category>productivity</category>
        
        <category>bullet-journal</category>
        
        
      </item>
    
      <item>
        <title>Vim Filters</title>
        <description>&lt;p&gt;Quick tip time!  Let’s talk about Vim filters.  This is a way to execute any external command and pipe the results into your current buffer.  This is a great way to get the power of your shell into vim without having to learn much VimScript.  Here are the basics:&lt;/p&gt;

&lt;h2 id=&quot;reading-command-input-into-the-current-buffer&quot;&gt;Reading command input into the current buffer&lt;/h2&gt;

&lt;p&gt;This is the simplest method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:r !ls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will read the results of &lt;code&gt;ls&lt;/code&gt; into your buffer at your cursor location.  You can also specify the specific line to insert after.  The next command will read the results of the &lt;code&gt;ls&lt;/code&gt; command into your current buffer after line 4.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:4r !ls
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;sending-buffer-contents-as-input-to-an-external-command&quot;&gt;Sending buffer contents as input to an external command&lt;/h2&gt;

&lt;p&gt;You can also send lines of your buffer out to be replaced with the results of the command.  A common thing to do is to operate on the whole buffer you’re working on.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:%!sort
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;%&lt;/code&gt; selects the whole buffer, and then the &lt;code&gt;!&lt;/code&gt; sends the selected lines out to the external &lt;code&gt;sort&lt;/code&gt; command.  The whole buffer contents will be replaced with the results of the command.&lt;/p&gt;

&lt;p&gt;For example.  Let’s say you’re working on a text file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;# Attention, Everyone!

This markdown file contains some **pretty interesting** stuff.

I __mean__ it.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But something’s just not quite there.  It needs some more zoom – some more whammy!  Try combining it with a &lt;a href=&quot;https://assertnotmagic.com/2017/10/05/smooth-one-liners/&quot;&gt;slick Ruby one liner!&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:%!ruby -ne 'puts $_.upcase'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And suddenly, the contents of your buffer is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;# ATTENTION, EVERYONE

THIS MARKDOWN FILE CONTAINS SOME **PRETTY INTERESTING** STUFF.

I __MEAN__ IT.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will work with any command.  You can use shell commands, or you can run it through a Python or Node script.  It gives you the power to select the best (or your favorite) tool for the job, instead of locking you into Vim’s capabilities alone.  And you can use other motions if you just want to replace a portion of your buffer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:!!ruby -ne 'puts $_.upcase'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Two exclamation points will operate on the current line.&lt;/p&gt;

&lt;p&gt;It also works on visually selected lines.  Select a couple lines in visual mode:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;v         &quot; Visual mode activated
jj        &quot; Select next two lines
:!sort    &quot; Sorts the lines that were selected.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Protip: If you accidentally run a command and blow away your file somehow, don’t panic.  Simply press &lt;code&gt;u&lt;/code&gt; in Normal mode to undo the operation.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hope this comes in handy!&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Mar 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/03/18/vim-filters/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/03/18/vim-filters/</guid>
        
        <category>vim</category>
        
        <category>tricks</category>
        
        
      </item>
    
      <item>
        <title>Publish Single Directories to Another Branch</title>
        <description>&lt;p&gt;Quick Tip!&lt;/p&gt;

&lt;p&gt;Let’s say that you’re just like me.  You’ve been working on a web project: HTML, CSS, and maybe some JavaScript.  You’re done and you’re ready to show the world your project, so you want to get it built, compiled, minified, and put it somewhere.  But how?  &lt;code&gt;git subtree&lt;/code&gt;.  I’ll show you.  One command.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Also, did you see the cover image?  Subtree?  HA!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s assume you’ve got a project laid out like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;my-dope-project
|- README.md
|- src
|   |- index.html
|   |- css
|       |- styles.sass
|   |- js
|       |- main.js
|       |- helper.js
|- dist
|- webpack.config.js
|- package.json
|- .gitignore
|- node_modules
    |- OMG so much stuff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or something.  I don’t know your life.  So you build your site with a &lt;code&gt;npm run build&lt;/code&gt;.  Now your &lt;code&gt;dist&lt;/code&gt; directory is full of your beautiful bundled new site.  So how do you put it up somewhere?&lt;/p&gt;

&lt;h2 id=&quot;1-make-sure-the-dist-folder-is-actually-checked-into-your-repo&quot;&gt;1. Make sure the dist folder is actually checked into your repo.&lt;/h2&gt;

&lt;p&gt;Get it out of your &lt;code&gt;.gitignore&lt;/code&gt; and &lt;code&gt;add/commit/push&lt;/code&gt; it.&lt;/p&gt;

&lt;h2 id=&quot;2-use-the-subtree-luke-andor-leia&quot;&gt;2. Use the Subtree, Luke (and/or Leia).&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git subtree push --prefix dist origin gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, &lt;code&gt;dist&lt;/code&gt; is the directory subtree you want to publish.  &lt;code&gt;origin&lt;/code&gt; is the remote repo you’re pushing to.  &lt;code&gt;gh-pages&lt;/code&gt; is the name of the remote branch you want to push to.&lt;/p&gt;

&lt;p&gt;Then go to your GitHub and into your repo settings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/gh-pages-settings.png&quot; alt=&quot;GitHub Pages Settings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Set the branch that you created to be the public branch.  And that’s it!  Head to &lt;code&gt;&amp;lt;your-username&amp;gt;.github.io/&amp;lt;repo-name&amp;gt;&lt;/code&gt; and do your happy dance!&lt;/p&gt;

&lt;p&gt;I know that there’s about a thousand ways you could skin this particular cat and they all have their pro’s and con’s.  I just really wanted to share this particular approach because I thought it was neat.  Happy coding!&lt;/p&gt;
</description>
        <pubDate>Thu, 08 Mar 2018 00:00:00 -0800</pubDate>
        <link>https://assertnotmagic.com/2018/03/08/publish-directories-to-github-pages/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/03/08/publish-directories-to-github-pages/</guid>
        
        <category>git</category>
        
        <category>tricks</category>
        
        
      </item>
    
      <item>
        <title>Closures and Callbacks</title>
        <description>&lt;p&gt;Earlier this week, I got an email telling me that the Odin Project had just upgraded their &lt;a href=&quot;https://www.theodinproject.com/courses/javascript&quot;&gt;JavaScript course&lt;/a&gt;.  I checked it out.  If you’re like me and have been putting off learning more about JavaScript because of all of the build tooling, this course is definitely for you.  I learned the basics of webpack (and even submitted a &lt;a href=&quot;https://github.com/webpack/webpack.js.org/pull/1855&quot;&gt;pull request&lt;/a&gt; to make a correction on the webpack tutorial!), and it was all at a super gentle and beginner-friendly pace.  As I was going through this course, during one of the assignments, I came across a pattern that I thought was neat.  Especially after my &lt;a href=&quot;https://assertnotmagic.com/2018/02/10/closure-i-hardly-know-her/&quot;&gt;post a couple of weeks ago about closures&lt;/a&gt;, I knew I had to share it.  If at any point you’re reading through my code examples and you get furious at my code, please skip ahead to the &lt;a href=&quot;#delirium-disclaimer&quot;&gt;Delirium Disclaimer&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-project&quot;&gt;The Project&lt;/h2&gt;

&lt;p&gt;The goal was to use as many different modules as possible in order to test out the bundling power of webpack.  I was supposed to &lt;a href=&quot;https://www.theodinproject.com/courses/javascript/lessons/restaurant-page&quot;&gt;create a generic landing page for a restaurant&lt;/a&gt;, and it had to have a tab-based navigation system.  &lt;a href=&quot;https://assertnotmagic.com/odin-restaurant/&quot;&gt;Here’s the site I came up with.&lt;/a&gt;  (and the related &lt;a href=&quot;https://github.com/rpalo/odin-restaurant&quot;&gt;GitHub repo&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/odin-restaurant.png&quot; alt=&quot;My Odin Project Restaurant&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I didn’t do anything to make it look pretty on mobile, so if you’re reading on mobile, forgive me.&lt;/p&gt;

&lt;h2 id=&quot;the-technique&quot;&gt;The Technique&lt;/h2&gt;

&lt;p&gt;The technique I want to share is the one I used for the nav button click callback: I created a closure!  Let me back up.  I’ve got three buttons.  The HTML ends up looking something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&quot;tabs&quot;&amp;gt;
  &amp;lt;button class=&quot;tabs__link active&quot; data-target=&quot;About&quot;&amp;gt;About&amp;lt;/button&amp;gt;
  &amp;lt;button class=&quot;tabs__link&quot; data-target=&quot;Menu&quot;&amp;gt;Menu&amp;lt;/button&amp;gt;
  &amp;lt;button class=&quot;tabs__link&quot; data-target=&quot;Contact&quot;&amp;gt;Contact&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I then have a bunch of &lt;code&gt;&amp;lt;div class=&quot;tabcontent&quot;&amp;gt;&lt;/code&gt;’s that contain the content of the tabs.  Every one but the active one has &lt;code&gt;display: hidden&lt;/code&gt;, so only the active one will show up.&lt;/p&gt;

&lt;p&gt;Of course, the assignment specifically asked me to generate these buttons in JavaScript, so it ends up looking more like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Don't worry about openTab now.
// We'll talk about it in a minute.
import openTab from './openTab';

const loadNav = () =&amp;gt; {
  const tabHolder = document.querySelector('.tabs');
  const tabs = ['About', 'Menu', 'Contact'];
  tabs.forEach(tabName =&amp;gt; {
    const button = document.createElement('button');
    button.classList.add('tabs__link');
    button.dataset.target = tabName;
    button.addEventListener('click', openTab(tabName));
    button.innerHTML = tabName;
    tabHolder.appendChild(button);
  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But here’s where the magic happens.  I’ll show you the code for &lt;code&gt;openTab&lt;/code&gt;, and then I’ll talk about what’s so special about it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const openTab = tabName =&amp;gt; {
  return (e) =&amp;gt; {
    const tabContent = document.querySelectorAll('.tabcontent');
    tabContent.forEach(tab =&amp;gt; {
      tab.style.display = &quot;none&quot;;
    });
    
    const tabLinks = document.querySelectorAll('.tabs__link');
    tabLinks.forEach(link =&amp;gt; {
      link.classList.remove('active');
    });
    
    const activeTab = document.querySelector(`[data-page=&quot;${tabName}&quot;]`);
    activeTab.style.display = &quot;block&quot;;
    e.currentTarget.classList.add('active');
  };
};

export default openTab;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;so-whats-going-on-here&quot;&gt;So What’s Going On Here?&lt;/h3&gt;

&lt;p&gt;Usually, when you pass a callback function to an event listener, you do it without parenthesis, like this: &lt;code&gt;button.addEventListener('click', doTheThing)&lt;/code&gt;.  This is because you’re not calling the function as you’re creating the event listener, you’re passing the function object to be called later.  However, have you ever wanted to pass additional information to a callback?  Usually when you have a callback function for event listeners, they only take the event as an argument:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const doTheThing = e =&amp;gt; {
  // stuff
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, what if you want it to have additional information?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const doTheThing = (e, myColor) =&amp;gt; {
  console.log(myColor);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my case, I wanted to write one callback function that would work for all three nav buttons, even though their functionality would each be a little different, based on which tab they were trying to act on.  So I needed something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const openTab = (e, tabName) =&amp;gt; {
  // The stuff
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BUT, if you try this, JavaScript gets grumpy.  So what can we do?  One solution is to create a closure at the time that you add the event listener.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const openTab = tabName =&amp;gt; {
  return e =&amp;gt; {
    // Things in here have access to tabName *and* e
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you use it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;button.addEventListener('click', openTab(tabName));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the &lt;code&gt;openTab&lt;/code&gt; function gets &lt;em&gt;immediately&lt;/em&gt; evaluated, and the new, anonymous function is given as the callback.  It’s the same as writing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;button.addEventListener('click', e =&amp;gt; {
  console.log(tabName + &quot;Haha!&quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to our friend the closure, the anonymous function placed after the event listener retains access to the &lt;code&gt;tabName&lt;/code&gt; variable, even though the function was called long before the event ever fires.  If you’re not exactly sure what a closure is, definitely take a look at &lt;a href=&quot;https://assertnotmagic.com/2018/02/10/closure-i-hardly-know-her/&quot;&gt;my post on closures&lt;/a&gt;.  The benefit is that you can pull the &lt;code&gt;openTab&lt;/code&gt; logic out into its own function and your &lt;code&gt;addEventListener&lt;/code&gt; call ends up looking a lot cleaner.&lt;/p&gt;

&lt;p&gt;So, the next time you want your callback functions to have more information than just the event passed in, consider using a closure to DRY things up.&lt;/p&gt;

&lt;h2 id=&quot;delirium-disclaimer&quot;&gt;Delirium Disclaimer&lt;/h2&gt;

&lt;p&gt;As I was writing this post, I noticed a lot of things I should change and fix in my original code (variable name consistencies, CSS class name consistencies, etc.).  I also noticed that I probably could have left out the &lt;code&gt;tabName&lt;/code&gt; variable completely and gotten away with getting everything that I needed from the &lt;code&gt;event&lt;/code&gt; that got passed into the function.  The whole closure thing may have been unnecessary.&lt;/p&gt;

&lt;p&gt;I’m going to go ahead and blame this on the fact that by the time I got to this part of the code, I was delirious from all of the things I was doing and new things I was learning.  Now that I’ve had some sleep, past-me’s code is making me cringe a little bit.  Sorry!&lt;/p&gt;

&lt;p&gt;That being said, this is one of my first real stabs at modern JavaScript.  So if you see ways that I could improve my code or do something more idiomatically, I’d love to get your feedback.  Definitely share your wisdom!&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Mar 2018 00:00:00 -0800</pubDate>
        <link>https://assertnotmagic.com/2018/03/01/closures-and-callbacks/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/03/01/closures-and-callbacks/</guid>
        
        <category>javascript</category>
        
        <category>functional</category>
        
        <category>front-end</category>
        
        
      </item>
    
  </channel>
</rss>
