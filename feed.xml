<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>assert_not magic?</title>
    <description>Programming blog by Ryan Palo.  Code is not magic, and anyone can do it.  Python, Ruby, JavaScript, shell scripting, systems, the web, and more!
</description>
    <link>https://assertnotmagic.com</link>
    <atom:link href="https://assertnotmagic.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 06 Sep 2018 23:01:11 -0700</pubDate>
    <lastBuildDate>Thu, 06 Sep 2018 23:01:11 -0700</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>Personal Update: Back At It</title>
        <description>&lt;p&gt;&lt;em&gt;Cover image by Feliphe Schiarolli on Unsplash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hi!  I haven’t written a blog post in a while.  In fact, I’m way behind my pace for the last two months.  I wanted to bang at least 200 words out to keep my writing muscle in shape and get things going again.  I’ve got a couple of posts planned, but I’m sure more inspiration will come.&lt;/p&gt;

&lt;h2 id=&quot;back-to-school&quot;&gt;Back to School!&lt;/h2&gt;

&lt;p&gt;On a personal note, part of why I’ve been busy &lt;em&gt;not&lt;/em&gt; writing blog posts is because last week I had my first lecture of my Master’s in Computer Science (focus on Intelligent Systems, Robotics, Systems Administration, and a bit of Security/Forensics)!  I’m super excited, because, honestly, I really like school.  I’m going to take a bunch of classes over the next two years, learn a lot, get a whole bunch of fodder for more blog posts, graduate (God willing!), and once I get my Master’s, hopefully somebody somewhere will let me teach classes on something.  That’s about as far as I got on the plan.  Anyways, wish me luck, and enjoy the deluge of CS-powered blog posts that are coming your way.&lt;/p&gt;

&lt;h2 id=&quot;punch-cards&quot;&gt;Punch Cards&lt;/h2&gt;

&lt;p&gt;Last week, I didn’t have much time to write a post because I was writing a research paper on the early punch cards used to program computers.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It was pretty punchy, but it had a few holes in it. HA!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As it turns out, the reason why you probably limit your code lines to 80 characters wide is because of how long U.S. money was in the 1880’s.  A guy named &lt;a href=&quot;https://en.wikipedia.org/wiki/Herman_Hollerith&quot;&gt;Herman Hollerith&lt;/a&gt; created punch cards for the U.S. Census Bureau to help speed up processing the census data, and he had a bunch of U.S. Treasury money boxes laying around, so he cut his punch cards to fit in those boxes.  With the spacing of the holes on the card, it left him with 80 columns.  Today, 80 columns is the preferred max line length of the Linux kernel.  Python says try to keep most lines under 72 (to have a nice margin), but definitely limit to 79 columns.  Does every team work like this?  No.  But it’s neat that we work on a standard that programmers have been adhering to one way or another since 1880.  Feels pretty cool, right?&lt;/p&gt;

&lt;p&gt;This week we learned about Binary and Hexadecimal.  I knew about it already thanks to &lt;a href=&quot;https://dev.to/vaidehijoshi/hexes-and-other-magical-numbers&quot;&gt;Vaidehi Joshi’s awesome series&lt;/a&gt;.  I get the feeling I’ll be referring to that series more and more as I go through more classes.  But, expect a post from me on Binary, Hex, and Decimal numbers in the next little while.&lt;/p&gt;

&lt;p&gt;More posts soon!&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Sep 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/09/06/back-at-it/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/09/06/back-at-it/</guid>
        
        <category>update</category>
        
        
      </item>
    
      <item>
        <title>3 Common Mistakes that Python Newbies Make</title>
        <description>&lt;p&gt;Last weekend, I stared mentoring people on &lt;a href=&quot;https://exercism.io&quot;&gt;exercism.io&lt;/a&gt; on the Python track.  I wasn’t sure what to expect, but over the last week I have mentored about 50 people, helping them get their solutions from “tests passing” to “tests passing, readable, &lt;em&gt;and&lt;/em&gt; Pythonic.”  I’m hooked.  It’s a total blast.  I’m going to write a post specifically on that experience.  That’s not this post.  This post is to talk about the three most common mistakes I saw over the last week and some possible alternatives that might be better!  So let’s start the countdown!&lt;/p&gt;

&lt;h2 id=&quot;1-deep-nesting-of-if-statements-or-loops&quot;&gt;1. Deep Nesting of If Statements or Loops&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Calculating whether or not 'year' is a leap year

if year % 4 == 0:
    if year % 100 == 0:
        if year % 400 == 0:
            return True
        else:
            return False
    else:
        return True
else:
    return False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A lot of times, I’ll pull a line from the &lt;a href=&quot;https://www.python.org/dev/peps/pep-0020/#id3&quot;&gt;Zen of Python&lt;/a&gt; to lead off my feedback to a “mentee” (not to be confused with a manitee).  When I see this issue, I always lead with&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Flat is better than nested.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you look at your code with your eyes unfocused, looking at the shapes and not reading the words, and you see a bunch of arrows going out and back in again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\
 \
  \
   \
    \
    /
   /
  /
  \
   \
    \
     \
     /
    /
   /
  /
 /
/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s not &lt;em&gt;definitely&lt;/em&gt; a bad thing, but it is a “code smell,” or a Spidey Sense that something could possibly be refactored.&lt;/p&gt;

&lt;p&gt;So, what can you do instead of nest?  There are a couple things to try.  The first is inverting your logic and using “early returns” to peel off small pieces of the solution space one at a time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if year % 400 == 0:
    return True
if year % 100 == 0:
    return False
if year % 4 == 0:
    return True
return False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the number is divisible by 400, then we immediately return true.  Otherwise, for the rest of our code, we can know that year is &lt;em&gt;definitely not&lt;/em&gt; divisible by 400.  So, at that point, any other year that’s divisible by 100 is not a leap year.  So we peel off that layer of the onion by returning False.&lt;/p&gt;

&lt;p&gt;After that, we can know that &lt;code&gt;year&lt;/code&gt; is definitely not a multiple of 400 &lt;em&gt;or&lt;/em&gt; 100, and the remainder of the code follows the same pattern.&lt;/p&gt;

&lt;p&gt;The other way to avoid nesting is by using “boolean operators:” &lt;code&gt;and, or, and not&lt;/code&gt;.  We can combine &lt;code&gt;if&lt;/code&gt; statements and thus, save ourselves a layer of nesting!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
    return True
else:
    return False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, that leads us to our second item…&lt;/p&gt;

&lt;h2 id=&quot;2-returning-booleans-from-if-statements&quot;&gt;2. Returning Booleans from If Statements&lt;/h2&gt;

&lt;p&gt;We’ll start with our last example from above:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
    return True
else:
    return False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Anytime you find yourself writing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if something:
    return True
else:
    return False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should remember that the clause of an &lt;code&gt;if&lt;/code&gt; statement is itself a boolean!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; year = 2000
&amp;gt;&amp;gt;&amp;gt; year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)
True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, why not type a little less and return the result of the boolean operation directly?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;return (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Granted, at this point, the line may be getting a little long, but the code is a little less redundant now!&lt;/p&gt;

&lt;h2 id=&quot;3-lists-are-like-hammers--not-everything-is-a-nail&quot;&gt;3. Lists are Like Hammers – Not Everything is a Nail&lt;/h2&gt;

&lt;p&gt;Here are two possible ways that this could show up:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;some_numbers = [1, 2, 5, 7, 8, ...]
other_numbers = [1, 3, 6, 7, 9, ...]
# Let's try to combine these two without duplicates
for number in other_numbers:
    if number not in some_numbers:
        some_numbers.append(number)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;data = [[&quot;apple&quot;, 4], [&quot;banana&quot;, 2], [&quot;grape&quot;, 14]]
# What fruits do we have?
for item in data:
    print(item[0])
# =&amp;gt; &quot;apple&quot; &quot;banana&quot; &quot;grape&quot;
# How many grapes do we have?
for item in data:
    if item[0] == &quot;grape&quot;:
        print(item[1])
# =&amp;gt; 14
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the first case, you’re trying to keep track of some groups of items and you want to combine them without duplicates.  This is an &lt;em&gt;ideal&lt;/em&gt; candidate for a &lt;a href=&quot;https://www.geeksforgeeks.org/sets-in-python/&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt;.  Sets inherently keep track of their items (although not the order, so don’t use a set if the order is important).  You can declare them with the built-in &lt;code&gt;set()&lt;/code&gt; function or with squiggle braces (&lt;code&gt;{}&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;some_numbers = {1, 2, 5, 7, 8}
other_numbers = {1, 3, 6, 7, 9}
# Sets use the 'binary or' operator to do &quot;unions&quot;
# which is where they take all of the unique elements
some_numbers | other_numbers
# =&amp;gt; {1, 2, 3, 5, 6, 7, 8, 9}

# You can even add single items in!
some_numbers.add(10)
# =&amp;gt; {1, 2, 5, 7, 8, 10}

# But adding a duplicate doesn't change anything
some_numbers.add(1)
# =&amp;gt; {1, 2, 5, 7, 8, 10}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the second case, again, order probably isn’t critical.  You want to keep track of some data by a “label” or something, but be able to keep them all together and list them out as necessary.  This time, you’re probably looking for a &lt;code&gt;dict&lt;/code&gt;.  You can create those with either the &lt;code&gt;dict()&lt;/code&gt; built-in function or, again, squiggle braces (&lt;code&gt;{}&lt;/code&gt;).  This time, however, you separate the labels (keys) and the values with a colon.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;fruits = {
    &quot;apples&quot;: 4,
    &quot;bananas&quot;: 2,
    &quot;grapes&quot;: 14,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can list out all of the keys (or values!).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;list(fruits.keys())
# =&amp;gt; [&quot;apples&quot;, &quot;bananas&quot;, &quot;grapes&quot;]
list(fruits.values())
# =&amp;gt; [4, 2, 14]

# Or both!
list(fruits.items())
# =&amp;gt; [(&quot;apples&quot;, 4), (&quot;bananas&quot;, 2), (&quot;grapes&quot;, 14)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you can ask it about (or give it a new value for) specific keys.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# How many grapes are there?
fruits[&quot;grapes&quot;]
# =&amp;gt; 14

# Not anymore.  I ate some.
fruits[&quot;grapes&quot;] = 0

fruits[&quot;grapes&quot;]
# =&amp;gt; 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using a list, the your algorithm loops through every item to find the right one.  &lt;code&gt;dict&lt;/code&gt;’s are built to have very fast lookups, so, even if your &lt;code&gt;dict&lt;/code&gt; is a bazillion fruits long, finding the &lt;code&gt;grapes&lt;/code&gt; is still super fast – and easy to type!  No loops!&lt;/p&gt;

&lt;h2 id=&quot;call-to-action&quot;&gt;Call to Action&lt;/h2&gt;

&lt;p&gt;Exercism needs mentors!  If you think you’d be a good mentor (or even a decent mentor, just on the easy exercises), sign up at &lt;a href=&quot;http://mentoring.exercism.io/&quot;&gt;their Mentor Signup page&lt;/a&gt;.  Right now, Rust, Golang, and Elixir are especially swamped and need &lt;em&gt;your&lt;/em&gt; help!&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Aug 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/08/04/3-python-newbie-mistakes/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/08/04/3-python-newbie-mistakes/</guid>
        
        <category>python</category>
        
        <category>beginner</category>
        
        
      </item>
    
      <item>
        <title>Python Shebangs on Windows</title>
        <description>&lt;p&gt;&lt;em&gt;Cover image By Sven [Public domain], from Wikimedia Commons&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;shebang-lines-in-the-wild&quot;&gt;Shebang Lines in the Wild&lt;/h2&gt;

&lt;p&gt;In Unix-like systems, if you want a file to be executable, you can add a line to the top called a &lt;strong&gt;“shebang”&lt;/strong&gt;.  They look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;#!/usr/bin/env bash

echo &quot;Hello, world!&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;“Shebang” is short for “hash bang,” which is slang for the pound/hash/octothorpe symbol (&lt;code&gt;#&lt;/code&gt;), followed by the exclamation point/bang (&lt;code&gt;!&lt;/code&gt;).  This line is responsible for telling the computer where the program or command that will be used to run this file lives.&lt;/p&gt;

&lt;p&gt;Once your file has a shebang, you can make the file executable by adding “execute permissions,” accomplished by running the following command in your Bash shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ chmod u+x hello.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can then run the program by executing it directly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./hello.sh
Hello, world!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;how-it-works-on-windows&quot;&gt;How it Works on Windows&lt;/h2&gt;

&lt;p&gt;If you’re not using Windows Subsystem Linux or some other form of porting Bash to Windows, you’re probably using PowerShell as your shell of choice.  And, I’ve never had very good luck with shebangs working on Windows.  I think it is because of the way Windows handles which programs deal with which file suffixes.  However, starting with Python 3.3, Python for Windows has shipped with a &lt;strong&gt;“Python for Windows Launcher”&lt;/strong&gt;, called from the command line as simply &lt;code&gt;py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can launch your latest version of Python by running it with no arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;$ py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can select which version you’d like by specifying a version flag.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;$ py -2.7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you can’t find it or the command isn’t working, the launcher lives by default in &lt;code&gt;C:\WINDOWS\py.exe&lt;/code&gt;.  Make sure &lt;code&gt;C:\WINDOWS&lt;/code&gt; is on your path and Python files use this executable as their default program.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is &lt;em&gt;really&lt;/em&gt; important.  If your default program for running Python files is set to a specific Python executable instead, you’ll end up with some weird and hard-to-diagnose issues.  So, to ensure that you’re set up right, run the “Default Programs” application and make sure Python files are associated with the &lt;code&gt;C:\WINDOWS\py.exe&lt;/code&gt; executable and not something else.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The nice thing about this launcher is that, if it is the default program to run your Python files, it can process several common forms of shebangs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;#!/usr/bin/env python
#!/usr/bin/python
#!/usr/local/bin/python
#!python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you’re hoping to make your scripts portable, use one of the ones beginning with &lt;code&gt;/usr&lt;/code&gt;.  If &lt;code&gt;py&lt;/code&gt; encounters any of these, it will use your default Python.  If you specify a version (either major or major.minor), it will use that version instead:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;#!/usr/bin/env python3
#!/usr/bin/env python2.7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition, if you use this &lt;code&gt;/usr/bin/env python&lt;/code&gt; version (as opposed to the &lt;code&gt;/usr/bin/python&lt;/code&gt; or &lt;code&gt;/usr/local/bin/python&lt;/code&gt;), &lt;code&gt;py&lt;/code&gt; will do the additional, expected search down your &lt;code&gt;PATH&lt;/code&gt; for a python command, the same way it would on a Unix-like system.&lt;/p&gt;

&lt;p&gt;There aren’t really “execute permissions” on Windows (correct me if I’m wrong), but once you have one of these lines at the top of your script, you can run it just like an executable in your shell.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python3
# Inside hello.py

print(&quot;Hi buddy!&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;$ ./hello.py
Hi buddy!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just one more thing to make you a little less homesick for your Bash shell when you’re on Windows.&lt;/p&gt;

&lt;p&gt;There is a lot more information about working with Python on Windows in &lt;a href=&quot;https://docs.python.org/3/using/windows.html&quot;&gt;the Python docs&lt;/a&gt;.  I recommend you take a look if you’re on windows and you like to find ways to make your life easier.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
        <pubDate>Sun, 01 Jul 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/07/01/windows-python-shebangs/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/07/01/windows-python-shebangs/</guid>
        
        <category>python</category>
        
        
      </item>
    
      <item>
        <title>Python Has a Startup File!</title>
        <description>&lt;p&gt;&lt;em&gt;Cover Photo by Uriel Soberanes on Unsplash&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, I want to be clear.  &lt;em&gt;I&lt;/em&gt; knew that Python has a startup customization file this whole time I’ve been using Python.  &lt;em&gt;I&lt;/em&gt; didn’t just find out about it this week.  I mean, of &lt;em&gt;course&lt;/em&gt; Python has a startup file.  Everything has a startup file!  I just want to make sure &lt;em&gt;you&lt;/em&gt; know about it.  &lt;em&gt;(Only joking, I had no idea this was a thing.)&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Before you bring it up, I already know about &lt;a href=&quot;https://bpython-interpreter.org/screenshots.html&quot;&gt;bPython&lt;/a&gt;, the awesome, syntax-highlighty, tab-completey, auto-indenty, wonderful drop in replacement for the regular Python interpreter.  I use it all the time.  But that’s not what this blog post is about.  P.S. if you didn’t know about bPython, I highly recommend it (Windows users’ mileage may vary).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;pythonstartup&quot;&gt;$PYTHONSTARTUP&lt;/h2&gt;

&lt;p&gt;If you have the environment variable &lt;code&gt;$PYTHONSTARTUP&lt;/code&gt; set to a valid Python file, that file will get run when starting up the Python interpreter.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ export PYTHONSTARTUP=&quot;~/.config/pythonrc.py&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don’t worry about the name of the file.  Name it whatever you want!  &lt;code&gt;python_startup.py&lt;/code&gt;, or just &lt;code&gt;pythonrc&lt;/code&gt;.  You can also put it in whatever directory you want.  Just make sure your &lt;code&gt;$PYTHONSTARTUP&lt;/code&gt; environment variable matches.  Then, you can put anything you want into that file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# ~/.config/pythonrc.py
a = &quot;Wahoo!&quot;
print(&quot;Soup&quot;)
try:
    import numpy as np
except ImportError:
    print(&quot;Could not import numpy.&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Try running your Python interpreter.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python  # or python3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you should see something similar to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;Python 3.7.0 (default, Jun 29 2018, 20:14:27)
[Clang 9.0.0 (clang-900.0.39.2)] on darwin
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
Soup
&amp;gt;&amp;gt;&amp;gt; np
&amp;lt;module 'numpy' from '/usr/local/lib/python3.7/site-packages/numpy/__init__.py'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; np.zeros((3, 2))
array([[0., 0.],
       [0., 0.],
       [0., 0.]])
&amp;gt;&amp;gt;&amp;gt; a
'Wahoo!'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can import commonly used libraries, create variables for yourself, and more.&lt;/p&gt;

&lt;h2 id=&quot;sysps1-and-sysps2&quot;&gt;sys.ps1 and sys.ps2&lt;/h2&gt;

&lt;p&gt;One neat thing to do is to set the &lt;code&gt;sys.ps1&lt;/code&gt; and &lt;code&gt;sys.ps2&lt;/code&gt; variables, which control your Python prompts.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# ~/.config/pythonrc.py

import sys

sys.ps1 = &quot;🌮&quot;
sys.ps2 = &quot;💩&quot;

# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, back in the interactive REPL:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;🌮 for i in range(10):
💩     print(&quot;I am a mature adult.&quot;)
💩
I am a mature adult.
I am a mature adult.
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In fact, you can even set &lt;code&gt;sys.ps1&lt;/code&gt; and &lt;code&gt;sys.ps2&lt;/code&gt; to objects that aren’t even strings!  If they’re not strings, Python will call &lt;code&gt;str(obj)&lt;/code&gt; on them.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# ~/.config/pythonrc.py

import sys
from datetime import datetime

class CustomPS1:
    def __init__(self):
        self.count = 0

    def __str__(self):
        self.count += 1
        return f&quot;({self.count}) {datetime.now().strftime('%H:%m %p')} &amp;gt; &quot;

sys.ps1 = CustomPS1()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And in the interpreter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;(1) 10:06 AM &amp;gt; for i in range(10):
...     print(&quot;Am I cool now?&quot;)
...
Am I cool now?
Am I cool now?
# ...
(2) 11:06 AM &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;the--i-flag&quot;&gt;The -i Flag&lt;/h2&gt;

&lt;p&gt;In addition to these new superpowers, you can temporarily make &lt;em&gt;any&lt;/em&gt; Python script your startup script.  This could come in really handy for some interactive debugging.  Let’s say you’re working on a project and you have a script that defines some functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# cool_script.py

def what_time_is_it():
    return &quot;Party Time&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use the &lt;code&gt;-i&lt;/code&gt; flag when you run the Python interpreter to use &lt;code&gt;cool_script.py&lt;/code&gt; as your startup file instead of your usual one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;$ python -i cool_script.py
&amp;gt;&amp;gt;&amp;gt; what_time_is_it()
'Party Time'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you do some cool things with your startup file, share it with me!  I want to know about it!  Happy coding!&lt;/p&gt;
</description>
        <pubDate>Sat, 30 Jun 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/06/30/python-startup-file/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/06/30/python-startup-file/</guid>
        
        <category>python</category>
        
        <category>tricks</category>
        
        
      </item>
    
      <item>
        <title>Ascii Wall-E for Your Terminal</title>
        <description>&lt;p&gt;Two things.  1. I’m trying out the &lt;a href=&quot;https://fishshell.com/&quot;&gt;fish shell&lt;/a&gt;.  So far I like it!  2. I made Wall-E!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/wall-e.jpg&quot; alt=&quot;Wall-E in my terminal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On their website, the fish shell has a neat ascii picture of a fish.  I saw examples of people putting that in their initial greeting when the terminal opens up.  I thought that was neat, but I wanted something more my style.  So I spent a few &lt;em&gt;cough&lt;/em&gt; &lt;small&gt;hours&lt;/small&gt; &lt;em&gt;cough&lt;/em&gt; making Wall-E, and now he says hello to me whenever I open up my terminal!&lt;/p&gt;

&lt;p&gt;In case you’re curious, I put the code &lt;a href=&quot;https://gist.github.com/rpalo/cd77a94616b0a30d1c2a2f18d6bc7581&quot;&gt;into a gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Challenge!  Make your own ASCII art and share it.&lt;/p&gt;

&lt;p&gt;Happy Saturday!&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Jun 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/06/23/ascii-wall-e/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/06/23/ascii-wall-e/</guid>
        
        <category>showdev</category>
        
        <category>fish</category>
        
        <category>art</category>
        
        
      </item>
    
      <item>
        <title>Bash Brackets Quick Reference</title>
        <description>&lt;p&gt;&lt;em&gt;Cover image credit: &lt;a href=&quot;https://www.fonts.com/content/learning/fontology/level-4/fine-typography/braces-and-brackets&quot;&gt;Fonts.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Bash has lots of different kinds of brackets.  Like, many much lots.  It adds meaning to doubling up different brackets, and a dollar sign in front means something even more different.  &lt;em&gt;And&lt;/em&gt;, the brackets are used differently than many other languages.  I constantly find myself doing a 5-second search for which one is the right one to do since I’m not writing Bash scripts all the time.  So here, I’m going to lay them all out and then print this article out and staple it to the wall by my desk.  Possibly with a decorative frame.  So here we go.&lt;/p&gt;

&lt;p&gt;A tiny note on all of these is that Bash generally likes to see a space between round or square brackets and whatever’s inside.  It doesn’t like space where curly braces are concerned.  We’ll go through in order of net total squigglyness (NTS score).&lt;/p&gt;

&lt;h2 id=&quot;-single-parentheses-&quot;&gt;( Single Parentheses )&lt;/h2&gt;

&lt;p&gt;Single parenthesis will run the commands inside in a &lt;strong&gt;subshell&lt;/strong&gt;.  This means that they run through all of the commands inside, and then return a single exit code.  Any variables declared or environment changes will get cleaned up and disappeared.  Because it’s within a subshell, if you have it inside a loop, it will run a little slower than if you called the commands &lt;em&gt;without&lt;/em&gt; the parentheses.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;a='This string'
( a=banana; mkdir $a )
echo $a
# =&amp;gt; 'This string'
ls
# =&amp;gt; ...
# =&amp;gt; banana/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;-double-parentheses-&quot;&gt;(( Double Parentheses ))&lt;/h2&gt;

&lt;p&gt;This is for use in integer arithmetic.  You can perform assignments, logical operations, and mathematic operations like multiplication or modulo inside these parentheses.  However, do note that there is no output.  Any variable changes that happen inside them will stick, but don’t expect to be able to assign the result to anything.  If the result inside is &lt;strong&gt;non-zero&lt;/strong&gt;, it returns a &lt;strong&gt;zero&lt;/strong&gt; (success) exit code.  If the result inside is &lt;strong&gt;zero&lt;/strong&gt;, it returns an exit code of &lt;strong&gt;1&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;i=4
(( i += 3 ))
echo $i
# =&amp;gt; 7
(( 4 + 8 ))
# =&amp;gt; No Output
echo $?  # Check the exit code of the last command
# =&amp;gt; 0
(( 5 - 5 ))
echo $?
# =&amp;gt; 1

# Strings inside get considered 'zero'.
(( i += POO ))
echo $i
# =&amp;gt; 7

# You can't use it in an expression
a=(( 4 + 1 ))
# =&amp;gt; bash: syntax error near unexpected token '('
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;-angle-parentheses-&quot;&gt;&amp;lt;( Angle Parentheses )&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Thank you to &lt;a href=&quot;https://dev.to/ferricoxide&quot;&gt;Thomas H Jones II&lt;/a&gt; for &lt;a href=&quot;https://dev.to/ferricoxide/comment/3pdn&quot;&gt;this comment&lt;/a&gt; that inspired this section on Process Substitution&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is known as a &lt;em&gt;process substitution&lt;/em&gt;.  It’s a lot like a pipe, except you can use it anywhere a command expects a file argument.  And you can use multiple at once!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sort -nr -k 5 &amp;lt;( ls -l /bin ) &amp;lt;( ls -l /usr/bin ) &amp;lt;( ls -l /sbin )

# =&amp;gt; Like a billion lines of output that contain many of the
# =&amp;gt; executables on your computer, sorted in order of descending size.

# Just in case you don't magically remember all bash flags,
# -nr  means sort numerically in reverse (descending) order
# -k 5 means sort by Kolumn 5.  In this case, for `ls -l`, that is the &quot;file size&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works because the sort command expects one or many filenames as arguments.  Behind the scenes, the &lt;code&gt;&amp;lt;( stuff )&lt;/code&gt; actually outputs the name of a temporary file (unnamed pipe file) for the &lt;code&gt;sort&lt;/code&gt; command to use.&lt;/p&gt;

&lt;p&gt;Another example of where this comes in handy is the use of the &lt;code&gt;comm&lt;/code&gt; command, which spits out the lines that the files have in common.  Because &lt;code&gt;comm&lt;/code&gt; needs its input files to be sorted, you could either do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# The lame way
sort file1 &amp;gt; file1.sorted
sort file2 &amp;gt; file2.sorted
comm -12 file1.sorted file2.sorted
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ooooor, you can be a total BAshMF and do it this way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# The baller way
comm -12 &amp;lt;( sort file1 ) &amp;lt;( sort file2 )
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;-dollar-single-parentheses-&quot;&gt;$( Dollar Single Parentheses )&lt;/h2&gt;

&lt;p&gt;This is for interpolating a subshell command output into a string.  The command inside gets run inside a subshell, and then any output gets placed into whatever string you’re building.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;intro=&quot;My name is $( whoami )&quot;
echo $intro
# =&amp;gt; My name is ryan

# And just to prove that it's a subshell...
a=5
b=$( a=1000; echo $a )
echo $b
# =&amp;gt; 1000
echo $a
# =&amp;gt; 5
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;-dollar-single-parentheses-dollar-q-&quot;&gt;$( Dollar Single Parentheses Dollar Q )$?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Shoutout again to &lt;a href=&quot;https://dev.to/ferricoxide/comment/3pdn&quot;&gt;Thomas&lt;/a&gt; for the tip!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you want to interpolate a command, but only the exit code and not the value, this is what you use.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;if [[ $( grep -q PATTERN FILE )$? ]]
then
  echo &quot;Dat pattern was totally in dat file!&quot;
else
  echo &quot;NOPE.&quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although, really, this isn’t so much a special bracket pattern as it is an interesting use of &lt;code&gt;$?&lt;/code&gt;, since the above works even if there is a space between the &lt;code&gt;$( stuff )&lt;/code&gt; and the &lt;code&gt;$?&lt;/code&gt;.  But a neat tip, nonetheless.&lt;/p&gt;

&lt;h2 id=&quot;-dollar-double-parentheses-&quot;&gt;$(( Dollar Double Parentheses ))&lt;/h2&gt;

&lt;p&gt;Remember how regular &lt;strong&gt;(( Double Parentheses ))&lt;/strong&gt; don’t output anything?  Remember how that is kind of annoying?  Well, you can use &lt;strong&gt;$(( Dollar Double Parentheses ))&lt;/strong&gt; to perform an &lt;strong&gt;Arithmetic Interpolation&lt;/strong&gt;, which is just a fancy way of saying, “Place the output result into this string.”&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;a=$(( 16 + 2 ))
message=&quot;I don't want to brag, but I have like $(( a / 2 )) friends.&quot;
echo $message
# =&amp;gt; I don't want to brag, but I have like 9 friends.&quot;

b=$(( a *= 2 ))			# You can even do assignments.  The last value calculated will be the output.
echo $b
# =&amp;gt; 36
echo $a
# =&amp;gt; 36
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing to remember is that this is strictly integer arithmetic.  No decimals.  Look into &lt;a href=&quot;https://www.lifewire.com/use-the-bc-calculator-in-scripts-2200588&quot;&gt;&lt;code&gt;bc&lt;/code&gt;&lt;/a&gt; for floating point calculations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;echo $(( 9 / 2 ))  # You might expect 4.5
# =&amp;gt; 4

echo $(( 9 / 2.5 ))
# =&amp;gt; bash: 9 / 2.5 : syntax error: invalid arithmetic operator (error token is &quot;.5 &quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;-single-square-brackets-&quot;&gt;[ Single Square Brackets ]&lt;/h2&gt;

&lt;p&gt;This is an alternate version of the built-in &lt;code&gt;test&lt;/code&gt;.  The commands inside are run and checked for “truthiness.”  Strings of zero length are false.  Strings of length one or more (even if those characters are whitespace) are true.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tldp.org/LDP/abs/html/fto.html&quot;&gt;Here are a list of all of the file-related tests you could do&lt;/a&gt;, like checking if a file exists or if it’s a directory.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.tldp.org/LDP/abs/html/comparison-ops.html&quot;&gt;Here are a list of all of the string-related and integer-related tests you could do&lt;/a&gt;, like checking if two strings are equal or if one is zero-length, or if one number is bigger than another.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;if [ -f my_friends.txt ]
then
	echo &quot;I'm so loved!&quot;
else
	echo &quot;I'm so alone.&quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One last thing that’s important to note is that &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;[&lt;/code&gt; are actually shell commands.  &lt;code&gt;[[ ]]&lt;/code&gt; is actually &lt;em&gt;part of the shell language itself&lt;/em&gt;.  What this means is that the stuff inside of Double Square Brackets isn’t treated like arguments.  The reason you would use Single Square Brackets is if you need to do &lt;em&gt;word splitting&lt;/em&gt; or &lt;em&gt;filename expansion&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Here’s an illustration of the difference.  Let’s say you used Double Square Brackets in the following way.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[[ -f *.txt ]]
echo $?
# =&amp;gt; 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;False, there is no file explicitly named “[asterisk].txt”.  Let’s assume there are currently no &lt;code&gt;.txt&lt;/code&gt; files in our directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# If there's no files .txt files:
[ -f *.txt ]; echo $?
# =&amp;gt; 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;*.txt&lt;/code&gt; gets expanded to a blank string, which is not  a file, and &lt;em&gt;then&lt;/em&gt; the test gets evaluated.  Let’s create a txt file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;touch cool_beans.txt
# Now there's exactly one .txt file
[ -f *.txt ]; echo $?
# =&amp;gt; 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;*.txt&lt;/code&gt; gets expanded to a space-separated list of matching filenames: “cool_beans.txt”, and then the test gets evaluated with that one argument.  Since the file exists, the test passes.  But what if there’s two files?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;touch i_smell_trouble.txt  # bean pun.  #sorrynotsorry
# Now there's two files
[ -f *.txt ]
# =&amp;gt; bash: [: too many arguments.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;*.txt&lt;/code&gt; gets expanded to “cool_beans.txt i_smell_trouble.txt”, and then the test is evaluated.  Bash counts each of the filenames as an argument, receives 3 arguments instead of the two it was expecting, and blurffs.&lt;/p&gt;

&lt;p&gt;Just to hammer my point home: even though there are currently two &lt;code&gt;.txt&lt;/code&gt; files, this next test still fails.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[[ -f *.txt ]]; echo $?
# =&amp;gt; 1.  There is still no file called *.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I tried to come up with some examples of why you would want this, but I couldn’t come up with realistic ones.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the most part, it seems like, a good rule of thumb is: if you need to use &lt;code&gt;test&lt;/code&gt; or &lt;code&gt;[ ]&lt;/code&gt;, you’ll know it.  If you’re not sure if you need it, you probably don’t need it and  you should probably use &lt;strong&gt;[[ double square brackets ]]&lt;/strong&gt; to avoid a lot of the tricky gotchas of the &lt;code&gt;test&lt;/code&gt; command.  If your shell is modern enough to have them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;-double-square-brackets-&quot;&gt;[[ Double Square Brackets ]]&lt;/h2&gt;

&lt;p&gt;True/false testing.  Read through the section above for an explanation of the differences between single and double square brackets.  Additionally, double square brackets support extended regular expression matching.  Use quotes around the second argument to force a raw match instead of a regex match.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;pie=good
[[ $pie =~ d ]]; echo $?
# =&amp;gt; 0, it matches the regex!

[[ $pie =~ [aeiou]d ]]; echo $?
# =&amp;gt; 0, still matches

[[ $pie =~ [aei]d ]]; echo $?
# =&amp;gt; 1, no match

[[ $pie =~ &quot;[aeiou]d&quot; ]]; echo $?
# =&amp;gt; 1, no match because there's no literal '[aeoiu]d' inside the word &quot;good&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, inside double square brackets, &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; sort by your locale.  Inside single square brackets, it’s by your machine’s sorting order, which is usually ASCII.&lt;/p&gt;

&lt;h2 id=&quot;-single-curly-braces-&quot;&gt;{ Single Curly Braces }&lt;/h2&gt;

&lt;p&gt;Single curly braces are used for expansion.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;echo h{a,e,i,o,u}p
# =&amp;gt; hap hep hip hop hup
echo &quot;I am &quot;{cool,great,awesome}
# =&amp;gt; I am cool I am great I am awesome

mv friends.txt{,.bak}
# =&amp;gt; braces are expanded first, so the command is `mv friends.txt friends.txt.bak`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The cool thing is that you can make ranges as well!  With leading zeros!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;echo {01..10}
01 02 03 04 05 06 07 08 09 10
echo {01..10..3}
01 04 07 10
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;dollar-braces&quot;&gt;${dollar braces}&lt;/h2&gt;

&lt;p&gt;Note that there are no spaces around the contents.  This is for variable interpolation.  You use it when normal string interpolation could get weird&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# I want to say 'bananaification'
fruit=banana
echo $fruitification
# =&amp;gt; &quot;&quot; No output, because $fruitification is not a variable.
echo ${fruit}ification
# =&amp;gt; bananaification
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The other thing you can use &lt;strong&gt;${Dollar Braces}&lt;/strong&gt; for is variable manipulation.  Here are a few common uses.&lt;/p&gt;

&lt;p&gt;Using a default value if the variable isn’t defined.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;function hello() {
  echo &quot;Hello, ${1:-World}!&quot;
}
hello Ryan
# =&amp;gt; Hello Ryan!
hello
# =&amp;gt; Hello World!

function sign_in() {
	name=$1
  echo &quot;Signing in as ${name:-$( whoami )}&quot;
}
sign_in
# =&amp;gt; Signing in as ryan
sign_in coolguy
# =&amp;gt; Signing in as coolguy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Getting the length of a variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;name=&quot;Ryan&quot;
echo &quot;Your name is ${#name} letters long!&quot;
# =&amp;gt; Your name is 4 letters long!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Chopping off pieces that match a pattern.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;url=https://assertnotmagic.com/about
echo ${url#*/}     # Remove from the front, matching the pattern */, non-greedy
# =&amp;gt; /assertnotmagic.com/about
echo ${url##*/}    # Same, but greedy
# =&amp;gt; about
echo ${url%/*}     # Remove from the back, matching the pattern /*, non-greedy
# =&amp;gt; https://assertnotmagic.com
echo ${url%%/*}    # Same, but greedy
# =&amp;gt; https:/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can uppercase matching letters!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;echo ${url^^a}
# =&amp;gt; https://AssertnotmAgic.com/About
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can get slices of strings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;echo ${url:2:5}  # the pattern is ${var:start:len}.  Start is zero-based.
# =&amp;gt; tps://
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can replace patterns.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;echo ${url/https/ftp}
# =&amp;gt; ftp://assertnotmagic.com

# Use a double slash for the first slash to do a global replace
echo ${url//[aeiou]/X}
# =&amp;gt; https://XssXrtnXtmXgXc.cXm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, you can use variables indirectly &lt;em&gt;as the name of other variables&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;function grades() {
  name=$1
  alice=A
  beth=B
  charles=C
  doofus=D
  echo ${!name}
}

grades alice
# =&amp;gt; A
grades doofus
# =&amp;gt; D
grades &quot;Valoth the Unforgiving&quot;
# =&amp;gt; bash: : bad substitution.   
# There is no variable called Valoth the Unforgiving,
# so it defaults to a blank value.  
# Then, bash looks for a variable with a name of &quot;&quot; and errors out.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;double-angle-heredocs&quot;&gt;«Double Angle Heredocs&lt;/h2&gt;

&lt;p&gt;This is how you make multiline strings in Bash (one method).  Two arrows and then a word – any word that you choose – to signal the start of the string.  The string doesn’t end until you repeat your magic word.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;nice_message=&amp;lt;&amp;lt;MESSAGE
Hi there!  I really like the way you look
when you are teaching newbies things
with empathy and compassion!
You rock!
MESSAGE

echo $nice_message
# =&amp;gt; Hi there!  I really like the way you look
# =&amp;gt; when you are teaching newbies things
# =&amp;gt; with empathy and compassion!
# =&amp;gt; You rock!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The word can be whatever you want.  I generally end up using “HEREDOC” to make it easier for future me.&lt;/p&gt;

&lt;p&gt;One final trick is that, if you add a dash after the arrows, it suppresses any leading tabs (&lt;em&gt;but not spaces&lt;/em&gt;) in your heredoc.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cat &amp;lt;&amp;lt;-HEREDOC
        two leading tabs
    one leading tab
  two spaces here
HEREDOC

# =&amp;gt; two leading tabs
# =&amp;gt; one leading tab
# =&amp;gt;   two spaces here
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;punctuations-a-killer&quot;&gt;Punctuation’s a Killer&lt;/h2&gt;

&lt;p&gt;Hopefully this is helpful.  If you see something I missed or have another cool use for one of these variants, be sure to let me know, and I’ll update it and publicly praise your genius.  Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Jun 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/06/20/bash-brackets-quick-reference/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/06/20/bash-brackets-quick-reference/</guid>
        
        <category>bash</category>
        
        <category>shell</category>
        
        <category>cheatsheet</category>
        
        
      </item>
    
      <item>
        <title>Python Scripting Toolbox: Part 2 - String Templates and `argparse`</title>
        <description>&lt;p&gt;&lt;em&gt;Cover photo by Philip Swinburn on Unsplash&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is Part 2 in the Python Scripting Toolbox series.  It’s a three-part survey of the tools available to us for Python scripting.  I’m showing off the functionality by creating three scripts that show off different parts of the standard library.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In &lt;a href=&quot;/2018/06/05/python-toolbox-shout/&quot;&gt;Part 1&lt;/a&gt;, we built &lt;code&gt;shout.py&lt;/code&gt;: a script that shouts everything you pass into it.&lt;/li&gt;
  &lt;li&gt;In Part 2, we’ll create &lt;code&gt;make_script.py&lt;/code&gt;: a script that generates a starter script from a template, for use in things like &lt;a href=&quot;https://projecteuler.net/&quot;&gt;Project Euler&lt;/a&gt; or &lt;a href=&quot;http://rosalind.info/problems/locations/&quot;&gt;Rosalind&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Next time, Part 3 will feature &lt;code&gt;project_setup.py&lt;/code&gt;: a script that creates a basic project skeleton&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, let’s get started.&lt;/p&gt;

&lt;h2 id=&quot;script-2-make_scriptpy&quot;&gt;Script 2: &lt;code&gt;make_script.py&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;When doing coding challenges where you are supposed to write the code on your local machine and then just submit the answer once you find it, you find yourself rewriting a lot of the same boiler plate over and over for reading in command line arguments, parsing things, and outputting results, when the real meat and potatoes of your work is in the main function of the script.  Handling input and output is just a side task.  Wouldn’t it be nice if we could just script away this grunt work and get started on the coding problem sooner?  That’s what we’re doing today.&lt;/p&gt;

&lt;p&gt;Here are our requirements.  We’re creating a Python script called &lt;code&gt;make_script.py&lt;/code&gt;.  We want it to create a Python script from a template, filling in some variable names, docstrings, or other small variations based on our user inputs.  If it could have sensible defaults, that would be a plus.  Let’s get started.&lt;/p&gt;

&lt;h3 id=&quot;step-1-the-template&quot;&gt;Step 1: The Template&lt;/h3&gt;

&lt;p&gt;First, I want to come up with what our template should look like.  Open a file named &lt;code&gt;script.py.template&lt;/code&gt;.  That’s not a convention, it’s a file ending I made up.  You can call it whatever you want.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&quot;&quot;&quot;$docstring&quot;&quot;&quot;

import sys


def main($input):
    $output = &quot;&quot;
    return $output
  

if __name__ == &quot;__main__&quot;:
    $input = sys.argv[1]
    $output = main($input)
    print($output)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not a whole lot there, not super fancy, but it should save us some typing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But, Ryan!  What’s with all of those dollar signs?  I thought this was Python, not PHP!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You are correct.  We’re going to be using the &lt;code&gt;template&lt;/code&gt; class in Python’s &lt;code&gt;string&lt;/code&gt; module of the standard library.  It’s good to note that there are several very good templating libraries that aren’t in the standard library but have quite a bit more power.  &lt;a href=&quot;http://jinja.pocoo.org/docs/2.10/&quot;&gt;Jinja2&lt;/a&gt; and &lt;a href=&quot;https://docs.djangoproject.com/en/2.0/ref/templates/api/&quot;&gt;Django Templates&lt;/a&gt; come to mind right away.  But this will get us where we need to go.&lt;/p&gt;

&lt;p&gt;With this templating language, we simply specify a variable with a dollar sign in front of it.  If you want to show an &lt;em&gt;actual&lt;/em&gt; dollar sign, simply use 2 dollar signs in a row (&lt;code&gt;$$&lt;/code&gt;).  This will render out as a single dollar sign.  Now, on to our actual code.&lt;/p&gt;

&lt;h3 id=&quot;step-2-filling-in-the-template&quot;&gt;Step 2: Filling In the Template&lt;/h3&gt;

&lt;p&gt;The code to actually fill in this template is not very many lines.  Create a new file called &lt;code&gt;make_script.py&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&quot;&quot;&quot;Creates a script from a basic template.&quot;&quot;&quot;

import string

with open(&quot;script.py.template&quot;, &quot;r&quot;) as f:
    template_text = f.read()

data = {
    &quot;docstring&quot;: &quot;Hey look at this cool script.&quot;,
    &quot;input&quot;: &quot;dat_arg&quot;,
    &quot;output&quot;: &quot;awesome_result&quot;
}

template = string.Template(template_text)
result = template.substitute(data)

with open(&quot;new_script.py&quot;, &quot;w&quot;) as f:
    f.write(result)

print(result)
print(&quot;----&quot;)
print(&quot;Script created!&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are essentially four steps to this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Read the template into a string.&lt;/li&gt;
  &lt;li&gt;Create a Template object from this string (provided by the Standard Libary’s &lt;code&gt;string&lt;/code&gt; module).&lt;/li&gt;
  &lt;li&gt;Substitute in data.  This can be done as keyword arguments to the &lt;code&gt;substitute&lt;/code&gt; method, or (like we did it) as a dictionary.  Either way, the keys should be the names of variables defined in the template, and the values should be what you want to substitute in.&lt;/li&gt;
  &lt;li&gt;Write the newly processed result to a new file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you try running &lt;code&gt;python make_script.py&lt;/code&gt;, you should see the results of the substitution in your terminal as well as in a new file called &lt;code&gt;new_script.py&lt;/code&gt;.  Pretty cool, ja?&lt;/p&gt;

&lt;p&gt;This is great, but we don’t want to have to go in and change the values in &lt;code&gt;make_script.py&lt;/code&gt; any time we want to create a new script.  We’d like our script to be a little more dynamic and maybe have a little better user interface.  Looks like it’s time for…&lt;/p&gt;

&lt;h3 id=&quot;step-3-argparseing-our-way-to-cli-greatness&quot;&gt;Step 3: &lt;code&gt;argparse&lt;/code&gt;ing Our Way to CLI Greatness&lt;/h3&gt;

&lt;p&gt;We’d like our script to take some arguments, some options, and maybe show a help message.  Once again, I’d like to note that there are some excellent CLI libraries out there if you want a little more power.  I think &lt;a href=&quot;http://click.pocoo.org/5/&quot;&gt;Click&lt;/a&gt; is probably my favorite.  I wrote an article a while ago about &lt;a href=&quot;https://assertnotmagic.com/2016/11/27/discovering-click/&quot;&gt;using Click&lt;/a&gt;.  Be gentle — it was one of my first blog posts!&lt;/p&gt;

&lt;p&gt;Anyways, we’ve committed to using &lt;em&gt;only&lt;/em&gt; the Standard Library in these guides, so we’ll soldier on with our friend &lt;code&gt;argparse&lt;/code&gt;.  For more examples and information, you can take a look at the &lt;a href=&quot;https://docs.python.org/3/library/argparse.html&quot;&gt;&lt;code&gt;argparse&lt;/code&gt; documentation&lt;/a&gt;.  For now, I think it’s best to just show you the new, shiny version of &lt;code&gt;make_script.py&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&quot;&quot;&quot;Creates a script from a basic template.&quot;&quot;&quot;

import argparse
import string

parser = argparse.ArgumentParser(description=&quot;Create new Python scripts from a template.&quot;)
parser.add_argument(&quot;scriptname&quot;, help=&quot;The name of the new script to create&quot;)
parser.add_argument(
    &quot;-d&quot;, 
    &quot;--docstring&quot;,
    help=&quot;The docstring to be placed at the top of the script&quot;,
    default=&quot;Placeholder docstring&quot;
)
parser.add_argument(
    &quot;-i&quot;,
    &quot;--input&quot;,
    help=&quot;The name of the variable used as the input parameter&quot;,
    default=&quot;inval&quot;
)
parser.add_argument(
    &quot;-r&quot;,
    &quot;--result&quot;,
    help=&quot;The name of the variable used as the result/output&quot;,
    default=&quot;result&quot;
)

args = parser.parse_args()

# ...  You'll see how we use these args in a minute
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we’ve imported the &lt;code&gt;argparse&lt;/code&gt; module, we can create our argument parser.  We’ll tell this argument parser about all of the arguments and options that we’re expecting.  By default, any argument that starts with a &lt;code&gt;-&lt;/code&gt; is considered an optional… um… option, while everything else is considered a required argument.&lt;/p&gt;

&lt;p&gt;If you provide each argument with a &lt;code&gt;help&lt;/code&gt; value, it will make your help text really look shiny.  At the end, you process the arguments provided by the user with the &lt;code&gt;parse_args&lt;/code&gt; method.  Let’s take a look at how to use them.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# ... Everything in the previous code block

with open(&quot;script.py.template&quot;, &quot;r&quot;) as f:
    template_text = f.read()

data = {
    &quot;docstring&quot;: args.docstring,
    &quot;input&quot;: args.input,
    &quot;output&quot;: args.result
}

template = string.Template(template_text)
result = template.substitute(data)

with open(args.scriptname, &quot;w&quot;) as f:
    f.write(result)
    
print(result)
print(&quot;----&quot;)
print(&quot;Script created!&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of the arguments are available under the &lt;code&gt;args&lt;/code&gt; &lt;em&gt;namespace&lt;/em&gt;, which basically just means that you can access them via &lt;code&gt;args.whatever_your_variable_is&lt;/code&gt;.  The variable name will be whatever name you passed into the &lt;code&gt;add_argument&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Now, if you run your script, it will complain if the right things aren’t passed in, &lt;em&gt;and&lt;/em&gt; if you run &lt;code&gt;python make_script.py —help&lt;/code&gt;, it prints out a pretty little help message.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python make_script.py --help
usage: make_script.py [-h] [-d DOCSTRING] [-i INPUT] [-r RESULT] scriptname

Create new Python scripts from a template.

positional arguments:
  scriptname            The name of the new script to create

optional arguments:
  -h, --help            show this help message and exit
  -d DOCSTRING, --docstring DOCSTRING
                        The docstring to be placed at the top of the script
  -i INPUT, --input INPUT
                        The name of the variable used as the input parameter
  -r RESULT, --result RESULT
                        The name of the variable used as the result/output
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next time, we’ll work on a script that will build a project directory for us.  Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Sat, 16 Jun 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/06/16/python-toolbox-make-script/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/06/16/python-toolbox-make-script/</guid>
        
        <category>python</category>
        
        <category>scripting</category>
        
        <category>tutorial</category>
        
        
      </item>
    
      <item>
        <title>Command Not Found... Dum Dum</title>
        <description>&lt;p&gt;Do you know what time it is?  That’s right.  It’s time for a&lt;/p&gt;

&lt;h2 id=&quot;quiiiiick-tip&quot;&gt;QUIIIIICK TIP&lt;/h2&gt;

&lt;p&gt;This tip comes from the &lt;a href=&quot;https://amzn.to/2t7Fp1i&quot;&gt;Bash Pocket Reference, 2nd Ed.&lt;/a&gt; by Arnold Robbins.&lt;/p&gt;

&lt;p&gt;Do you know how Bash (and similar shells) look for commands when you give it a command?  Here’s the list:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First, it checks to see if what you’ve typed is a language keyword like &lt;code&gt;for&lt;/code&gt; or &lt;code&gt;while&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, it checks your aliases.  Interestingly, the book above states (and cites other sources that agree) that you should basically never use aliases!  It says writing a function should almost always be preferred – contrary to a lot of StackOverflow answers I’ve seen.  I think I agree, actually.  Writing functions seems much cleaner and easier to come back to and modify later.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then, it checks for special built-in functions like &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;exit&lt;/code&gt;, or &lt;code&gt;export&lt;/code&gt;.  These aren’t needed for the internals of the Bash language, necessarily, but they’re needed for scripting and interactive shells.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After that, it looks at any functions you have defined.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next are non-special built-ins.  These are commands like &lt;code&gt;cd&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt;.  Since functions are checked before these, you could feasibly override &lt;code&gt;cd&lt;/code&gt; with your own function!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;function cd() {
  echo &quot;You're the best!&quot;
  command cd &quot;$@&quot;  # Actually calls the real `cd`
}

$ cd ~/code
# =&amp;gt; You're the best!
# Now in ~/code
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, it hunts through the &lt;code&gt;$PATH&lt;/code&gt; to try to find scripts that match.&lt;/p&gt;

&lt;p&gt;Here’s the tip: if Bash can’t find the command you typed in any of these places, it runs a function called &lt;code&gt;command_not_found_handle&lt;/code&gt;.  Aaaaand, if you so happen to override this function, it will call &lt;em&gt;your&lt;/em&gt; version instead!&lt;/p&gt;

&lt;p&gt;Sooooo, if your terminal experience is just not quite hostile enough, you could feasibly put the following into your &lt;code&gt;.bash_profile&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;function command_not_found_handle() {
  options=(
    &quot;no.&quot;
    &quot;No!&quot;
    &quot;NO.&quot;
    &quot;OMG NO.&quot;
    &quot;Mother ****!&quot;
    &quot;WHAT ARE YOU DOING?&quot;
    &quot;Success!  JK, you're still a dum dum.&quot;
  )
  option_choice=$(( $RANDOM % 7 ))
  echo &quot;${options[$option_choice]} '$*' command not found.&quot;
  # The command that you tried is passed into
  # this function as arguments, so $* will contain
  # the entire command + arguments and options
  
  return 127   # 127 is the canonical exit code for
  						# &quot;command not found&quot; 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, when you open up your terminal, you should see this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ hwaaaa
# =&amp;gt; NO. 'hwaaaa' command not found.
$ but why not tho
# =&amp;gt; Success!  JK, you're a dum dum.  'but why not tho' command not found.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All kidding aside, hopefully, you start to see how you could write some scripts to provide slightly more helpful/friendly error messages that maybe even show some possible options that were close to what you typed?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick Tip Over.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 16 Jun 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/06/16/command-not-found/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/06/16/command-not-found/</guid>
        
        <category>bash</category>
        
        <category>shell</category>
        
        <category>quicktip</category>
        
        
      </item>
    
      <item>
        <title>Each Pair with Itertools</title>
        <description>&lt;p&gt;&lt;em&gt;Cover Photo by &lt;a href=&quot;https://unsplash.com/photos/hXaHghBkEMQ?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Dan Gold&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/search/photos/pears?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Quick Tip Time!&lt;/p&gt;

&lt;p&gt;This week I was working on some coding challenges on &lt;a href=&quot;http://rosalind.info&quot;&gt;Rosalind&lt;/a&gt; in Python.  For one of the problems, I needed to run through consecutive groups of characters in a string and do something with them.  For example, if the string was “ACGTACAGTACTGACAGATCA”, I wanted to operate on the following substrings:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&quot;ACGT&quot;
&quot;CGTA&quot;
&quot;GTAC&quot;
&quot;TACA&quot;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I was writing in Ruby, this would be a perfect use case for the &lt;a href=&quot;https://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-each_cons&quot;&gt;each_cons&lt;/a&gt; method!  Unfortunately, no such luck with a similar function built-in to Python.  I ended up going with the slightly less pretty:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def each_cons(n, iterable):
    &quot;&quot;&quot;Returns every n consecutive items in an iterable.
    Example: each_cons(4, range(10)) =&amp;gt; [0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5]...
    &quot;&quot;&quot;
    return (iterable[i: i + n] for i in range(len(iterable) - n + 1))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Anytime you write &lt;code&gt;range(len(...&lt;/code&gt;, there’s probably a better way you could have done things.  &lt;strong&gt;If you know a slicker, less indexy way to do this, please share it, because there’s got to be a better way.  I can’t be indexing into things manually like a barbarian.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;However, that’s not what this post is about.  In my search for a better way, I came across a clever use of the &lt;code&gt;itertools&lt;/code&gt; module that was too good not to share.&lt;/p&gt;

&lt;h2 id=&quot;each-pair-with-itertools&quot;&gt;Each Pair with Itertools&lt;/h2&gt;

&lt;p&gt;This method only really works cleanly if you need only two consecutive items, but it feels &lt;em&gt;very&lt;/em&gt; Pythonic to me.  I’ll show you the code and then point out the key parts.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from itertools import tee

def each_pair(iterable):
    &quot;&quot;&quot;Returns each consecutive pair of items in an iterable&quot;&quot;&quot;
    first, second = tee(iterable)
    next(second, None)
    return zip(first, second)

each_pair(range(10))
# =&amp;gt; [0, 1], [1, 2], [2, 3], [3, 4], [4, 5]...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahhhh &lt;em&gt;SO GOOD.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-magic-explained&quot;&gt;The Magic Explained&lt;/h2&gt;

&lt;p&gt;So, how does it work?&lt;/p&gt;

&lt;p&gt;First, we use &lt;code&gt;itertools.tee&lt;/code&gt;, which returns two copies of the original iterable (a fancy word for anything you can iterate through: strings, lists, generators, etc.).  It also takes an optional argument for &lt;code&gt;n&lt;/code&gt; if you want to make &lt;code&gt;n&lt;/code&gt; copies instead of just 2.&lt;/p&gt;

&lt;p&gt;Now we have two identical copies of the original iterable.  We then call &lt;code&gt;next&lt;/code&gt; on the second one in order to step it one item forward.  Notice the second argument to &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;None&lt;/code&gt;.  The &lt;code&gt;next&lt;/code&gt; function returns (and uses up) the next item in an iterable, and if you provide it a &lt;em&gt;default&lt;/em&gt; and it can’t return another item because that iterable is empty, it just returns the default.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# next only works on Iterator objects
a = iter([1, 2, 3])
next(a, &quot;EMPTY&quot;)
# =&amp;gt; 1
next(a, &quot;EMPTY&quot;)
# =&amp;gt; 2
next(a, &quot;EMPTY&quot;)
# =&amp;gt; 3
next(a, &quot;EMPTY&quot;)
# =&amp;gt; &quot;EMPTY&quot;
next(a)
# =&amp;gt; Error!  StopIteration!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is just a neat way of saying “cycle the &lt;code&gt;second&lt;/code&gt; iterable one item forward, but if you’re already empty, don’t worry about it.  Just don’t throw an error.”  You probably also noticed that we don’t do anything with the result of this call to &lt;code&gt;next&lt;/code&gt;.  We’re just throwing an item away, if it exists.&lt;/p&gt;

&lt;p&gt;The last part is zipping the two iterables together.  &lt;code&gt;zip&lt;/code&gt; is a tricky function that seems simple, but often the results can be hard to wrap your head around.  It makes each n-th item of each iterator it is passed into one single list.&lt;/p&gt;

&lt;p&gt;It’s  easier to see in an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = [1, 2, 3, 4]
b = [&quot;Apple&quot;, &quot;Banana&quot;, &quot;Pear&quot;, &quot;Soup&quot;]
c = [True, False, True, False]

zip(a, b, c)
# =&amp;gt; [
#       [1, &quot;Apple&quot;, True],
#       [2, &quot;Banana&quot;, False],
#       [3, &quot;Pear&quot;, True],
#       [4, &quot;Soup&quot;, False],
#	]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The trick is that, if our lists have different lengths, it will only use up to the shortest one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = [1, 2, 3, 4, 5, 6, 7, 8]
b = [1, 2, 3]
zip(a, b)
# =&amp;gt; [[1, 1], [2, 2], [3, 3]]  See how it drops the last 5 elements of 'a'?
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;The &lt;code&gt;itertools&lt;/code&gt; module also has a &lt;code&gt;zip_longest&lt;/code&gt; function that takes a default value to fill in if some of the arguments to zip are too short.&lt;/p&gt;

  &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = [1, 2, 3, 4, 5, 6]
b = [1, 2]
itertools.zip_longest(a, b, fillvalue=&quot;:)&quot;)
# =&amp;gt; [
#	    [1, 1],
#	    [2, 2],
#	    [3, &quot;:)&quot;]
#	    [4, &quot;:)&quot;]
#	    [5, &quot;:)&quot;]
#	    [6, &quot;:)&quot;]
# ]
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap Up&lt;/h2&gt;

&lt;p&gt;Anyways, I thought this was neat.  I like it anytime I can get what I want out of an iterable without actually using any brute force indices.  It seems like it cuts down on &lt;a href=&quot;https://twitter.com/codinghorror/status/506010907021828096?lang=en&quot;&gt;off-by-one&lt;/a&gt; errors.&lt;/p&gt;

&lt;p&gt;Like I said before, if you’ve got a better way to make the &lt;code&gt;each_cons&lt;/code&gt; function above, I want to see it.  Be sure to comment or &lt;a href=&quot;https://twitter.com/paytastic/&quot;&gt;tweet it at me&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 09 Jun 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/06/09/itertools-each-pair/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/06/09/itertools-each-pair/</guid>
        
        <category>python</category>
        
        <category>tricks</category>
        
        <category>itertools</category>
        
        
      </item>
    
      <item>
        <title>Python Scripting Toolbox: sys and fileinput</title>
        <description>&lt;p&gt;&lt;em&gt;Cover Photo by Fleur Treurniet on Unsplash&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Python is an extremely flexible language with uses in tons of different applications and fields: web apps, automation, sciences, and data analysis, to name a few.  However, my &lt;em&gt;favorite&lt;/em&gt; thing to use it for is scripting.  Scripting can be as simple as writing a quick little one-off script to do something faster than you would want to do by hand, or it can more complex, a recurring task that you polish up – something with options, and flags, and a bit of a user interface.&lt;/p&gt;

&lt;p&gt;Lucky for us, Python already has many of the essentials for scripting built into its standard library!  I’m going to show you a few of the features I like best and how they are used.  I’ll be using Python 3.6 for all of these examples.  Most things should work in any Python 3.  Your mileage may vary if you use legacy Python (Python 2).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I know that there are libraries and frameworks out there for creating command line interfaces.  They are awesome.  In this article, I’m going to focus on Python’s “Batteries Included”: the standard library.  I’ll show you how much you can accomplish without installing a single external dependency.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-setup&quot;&gt;The Setup&lt;/h2&gt;

&lt;p&gt;This will be a three-part survey of the tools available to us for Python scripting.  I’ll show off the functionality by creating three scripts that show off different parts of the standard library.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;shout.py&lt;/code&gt;: a script that shouts everything you pass into it.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;make_script.py&lt;/code&gt;: a script that generates a starter script from a template, for use in things like &lt;a href=&quot;https://projecteuler.net/&quot;&gt;Project Euler&lt;/a&gt; or &lt;a href=&quot;http://rosalind.info/problems/locations/&quot;&gt;Rosalind&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;project_setup.py&lt;/code&gt;: a script that creates a basic project skeleton&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This here is part one.  Now, let’s get started.&lt;/p&gt;

&lt;h2 id=&quot;script-1-shout&quot;&gt;Script 1: shout&lt;/h2&gt;

&lt;p&gt;Did you ever wish that your computer would yell at you more?  Or that you computer was more abraisive?  You’re in luck then, because we’re about to fix all of that.  Create a new file called &lt;code&gt;shout.py&lt;/code&gt;.  We’re going to first just fill in the basic functionality, and then build out the interface from there.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python
&quot;&quot;&quot;Takes in input and returns that same input, but uppercase.&quot;&quot;&quot;

def shout(text):
    return text.upper()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Good so far!  I wanted to keep it simple to start with so we can focus mainly on our toolbox.  Right now, if you run &lt;code&gt;python shout.py&lt;/code&gt;, it doesn’t do anything.  Let’s fix that.  But how do we get access to the arguments provided to our scripts?  Our first tool: &lt;code&gt;sys&lt;/code&gt;.  &lt;code&gt;sys&lt;/code&gt; is a module that handles a lot of different system-level, system-specific, or python-install-specific options and values.  You can use it to check what version of Python someone’s using, what operating system the script is running on, or (what we’re using it for) get access to &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt;, and command line arguments.&lt;/p&gt;

&lt;h3 id=&quot;using-sysargv&quot;&gt;Using &lt;code&gt;sys.argv&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Let’s look at one way we could use this script, which might be a good option if we have a set or specific number of arguments we expect.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python3
&quot;&quot;&quot;Takes in input and returns that same input, but uppercase.&quot;&quot;&quot;

import sys

def shout(text):
    return text.upper()
  
if __name__ == &quot;__main__&quot;:
    text = sys.argv[1]
    print(shout(text))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;argv&lt;/code&gt; is the array of arguments (space-separated) that were passed to our script.  Note that &lt;code&gt;argv[0]&lt;/code&gt; is the name of the script that was run.  Running this, the result would be:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python3 shout.py banana
BANANA
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That works OK for some things.  If we had a script that calculated the area of a polygon based on the number of sides and side length (&lt;code&gt;e.g. python polygonArea.py 5 20&lt;/code&gt;), &lt;code&gt;argv&lt;/code&gt; would be just what the doctor ordered.  But, in this case, it might be useful to be able to pass things into our script via &lt;code&gt;stdin&lt;/code&gt;, like any other shell command.  Luckily, &lt;code&gt;sys&lt;/code&gt; has our back once again!&lt;/p&gt;

&lt;h3 id=&quot;using-sysstdin-and-sysstdout&quot;&gt;Using &lt;code&gt;sys.stdin&lt;/code&gt; and &lt;code&gt;sys.stdout&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python3
&quot;&quot;&quot;Takes in input and returns that same input, but uppercase.&quot;&quot;&quot;

import sys

def shout(text):
    return text.upper()
  
if __name__ == &quot;__main__&quot;:
    text = sys.stdin.read()
    sys.stdout.write(shout(text))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;sys&lt;/code&gt; module provides handles to &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt;, and &lt;code&gt;stderr&lt;/code&gt;, which you can read and write to, respectively, just like any other file-type object.  Now find a text file or create one with multiple lines, and run your code like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cat test.txt | python3 shout.py
BANANA OONANA
I GAVE MY HEART TO A BANANA
MY HEART TO A BANANA.
BANANA OONANA!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’m sorry for all of the “banana” stuff.  I’ve got &lt;a href=&quot;https://www.youtube.com/watch?v=BQ0mxQXmLsk&quot;&gt;that song&lt;/a&gt; stuck in my head.  But the Python stuff is cool, right?  There’s one more improvement we can make here.  What if our text that we want shouted was really, &lt;em&gt;really&lt;/em&gt; long?  It would be better for it to be processed line by line, right?  That way, we could see partial outputs as it processes, and we don’t have to worry about reading the whole file into memory.  That’s what’s so great about &lt;code&gt;stdin&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt; being “File-like objects.”  They’ve got the same methods that regular files do.  That means we can iterate over the lines of &lt;code&gt;stdin&lt;/code&gt; in a &lt;code&gt;for&lt;/code&gt; loop!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# ...
if __name__ == &quot;__main__&quot;:
    for line in sys.stdin:
        sys.stdout.write(shout(line))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This time, when you run it, you won’t notice any difference.  Let’s put a delay in between each line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python3
&quot;&quot;&quot;Takes in input and returns that same input, but uppercase.&quot;&quot;&quot;

import sys
from time import sleep

def shout(text):
    return text.upper()
  
if __name__ == &quot;__main__&quot;:
    for line in sys.stdin:
        sys.stdout.write(shout(line))
        sleep(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you run it this time, the lines should come out slowly, whereas the old version would happen all at once no matter what!&lt;/p&gt;

&lt;h3 id=&quot;using-fileinput&quot;&gt;Using &lt;code&gt;fileinput&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;What if you wanted to go really over the top with this shouting tool?  You wanted to be able to shout a whole bunch of files at once, along with piping from &lt;code&gt;stdin&lt;/code&gt;?  You’d want &lt;code&gt;fileinput&lt;/code&gt;.  Check it out.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python3
&quot;&quot;&quot;Takes many inputs and returns that same input, but uppercase.&quot;&quot;&quot;

import fileinput
import sys

def shout(text):
    return text.upper()
  
if __name__ == &quot;__main__&quot;:
    for line in fileinput.input():
        sys.stdout.write(f&quot;({ fileinput.filename() }) - { shout(line) }&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, create a second file (&lt;code&gt;test2.txt&lt;/code&gt;) .  Run the script like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python3 shout.py test.txt test2.txt
(test.txt) - BANANA OONANA
(test.txt) - I LEFT MY HEART INSIDE BANANAS
(test.txt) - INSIDE BANANAS.
(test.txt) - BANANAS OONANANA!
(test2.txt) - THIS IS THE SECOND FILE.
(test2.txt) - IT IS LAMER.
(test2.txt) - NOT AS CATCHY OF TEXT.
(test2.txt) - HELLO.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/fileinput.html&quot;&gt;&lt;code&gt;fileinput&lt;/code&gt;&lt;/a&gt; uses the &lt;code&gt;input&lt;/code&gt; function to combine all of the filename arguments and read them in as a single line-by-line stream.  It has additional useful functions that you can call while reading to add additional information, as well.  We used it to provide the filename of the file being processed, but there are more, like &lt;code&gt;lineno&lt;/code&gt;, &lt;code&gt;filelineno&lt;/code&gt;, &lt;code&gt;isfirstline&lt;/code&gt;, and &lt;code&gt;isstdin&lt;/code&gt;.  You can even add extra options to change the input files in-place, create backups of in-place modified files, decompress compressed files, and more!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But wait a minute.  That’s really cool, but you promised that we could still use &lt;code&gt;stdin&lt;/code&gt; with this method.  How does that work?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can include &lt;code&gt;stdin&lt;/code&gt; in your list of files by using a single dash (&lt;code&gt;-&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;echo &quot;whaddup from stdin&quot; | python3 shout.py test.txt - test2.txt
(test.txt) - BANANA OONANA
(test.txt) - I LEFT MY HEART INSIDE BANANAS
(test.txt) - INSIDE BANANAS.
(test.txt) - BANANAS OONANANA!
(&amp;lt;stdin&amp;gt;) - WHADDUP FROM STDIN
(test2.txt) - THIS IS THE SECOND FILE.
(test2.txt) - IT IS LAMER.
(test2.txt) - NOT AS CATCHY OF TEXT.
(test2.txt) - HELLO.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;all-shouted-out&quot;&gt;All Shouted Out&lt;/h2&gt;

&lt;p&gt;That’s it for &lt;code&gt;sys&lt;/code&gt;, &lt;code&gt;fileinput&lt;/code&gt;, and our &lt;code&gt;shout.py&lt;/code&gt; script.  Stay tuned for the next part, where we’ll build &lt;code&gt;make_script.py&lt;/code&gt; — we’ll write a script that writes scripts so we can script while our scripts script.  See you next time!&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Jun 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/06/05/python-toolbox-shout/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/06/05/python-toolbox-shout/</guid>
        
        <category>python</category>
        
        <category>scripting</category>
        
        <category>tutorial</category>
        
        
      </item>
    
  </channel>
</rss>
