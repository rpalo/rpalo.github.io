<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>assert_not magic?</title>
    <description>Programming blog by Ryan Palo.  Code is not magic, and anyone can do it.  Python, Ruby, JavaScript, shell scripting, systems, the web, and more!
</description>
    <link>https://assertnotmagic.com</link>
    <atom:link href="https://assertnotmagic.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 08 Nov 2018 20:11:57 -0800</pubDate>
    <lastBuildDate>Thu, 08 Nov 2018 20:11:57 -0800</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>The Programmer and the Sea</title>
        <description>&lt;link rel=&quot;canonical&quot; href=&quot;https://simpleprogrammer.com/programmer-and-sea/&quot; /&gt;

&lt;p&gt;&lt;em&gt;This story originally published by &lt;a href=&quot;https://simpleprogrammer.com/programmer-and-sea/&quot;&gt;Simple Programmer&lt;/a&gt;.  Cover image courtesy of the Simple Programmer staff.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Learning to code is a journey. Recently, on a trip to Morro Bay, California, my wife and I went stand-up paddleboarding, and I noticed a lot of similarities between paddleboarding and programming. So, the rest of this article is a metaphor for the developer journey.&lt;/p&gt;

&lt;p&gt;In the interest of clarity, I’ve labeled a few of the key parallels with reference numbers. At the end, each of these reference numbers has a short, concrete description of the idea behind each metaphor. Of course, like all (hopefully) good literature, part of the value is the unique experiences the reader brings. I highly encourage you to connect other similarities to your own life and share them.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;As we walked down the harborfront, some of the locals were already out on the water. It was a beautiful day; the sun was out, and the bay was smooth as glass. They were gliding around, weaving in and out of the anchored boats, and paddling with grace and ease.&lt;/p&gt;

&lt;p&gt;They were stand-up paddleboarding. Fundamentally, a paddleboard is a bigger, flatter surfboard that you stand on, and you use a long kayak-like paddle to paddle yourself around for sport or relaxation.&lt;/p&gt;

&lt;p&gt;We looked out over the bay at all the people tooling around. Some had simple, beautiful boards. Some had what looked like very complicated setups, custom paddles, and extra-fancy rigs—looking at these people, I wasn’t sure if I would even be able to get started. It looked like there was so much stuff that we needed to have and so many things we needed to know. It was hard not to be intimidated (&lt;a href=&quot;#footnote1&quot; id=&quot;sub1&quot;&gt;1&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Even still, it looked like fun, so we headed down to the waterfront to a kayak and paddleboard rental place that we’d used before (shoutout to the folks at Rock Kayak). I needn’t have worried about not having what it takes to get started.&lt;/p&gt;

&lt;p&gt;The people there were used to dealing with people like us: full of excitement and drive and empty of any knowledge or skill. After signing a couple waivers, they gave us a quick rundown of the skills and knowledge we needed to keep us safe, happy, and mostly dry. (&lt;a href=&quot;#footnote2&quot; id=&quot;sub2&quot;&gt;2&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The most important thing is that they talked to us like the beginners that we were, and they didn’t expect us to know anything. “See that buoy out there?” the rental guide asked, pointing out over the water. “See how it’s got the number 12? The numbers increase going out to the right. Don’t go out past the red one, or it starts to get dangerous. The numbers decrease going out to the left. Don’t go past eight, or you risk getting stuck in the mud and having no fun at all. See that red roof right above us? That’s home. If you get lost or scared, you can always come back here to us.” I was surprised how comforting it was to hear that.&lt;/p&gt;

&lt;p&gt;Essentially, they were saying, “You’re doing something new. It’s natural to get confused, disoriented, or scared. Here’s a safe place you can go if all else fails.” Having that escape hatch was critical, massively reducing any anxiety I was feeling.&lt;/p&gt;

&lt;p&gt;They provided us with life vests, a watertight bag for our stuff, boards, and paddles; held our boards stable; and helped us get out on the water. (&lt;a href=&quot;#footnote3&quot; id=&quot;sub3&quot;&gt;3&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Fun fact: water is really squishy. It’s not nearly as solid as dry land. When there’s no helpful guide holding your paddleboard steady, you realize that keeping everything stable becomes your job. As my board began wobbling like hundreds of crazed kamikaze fish were battering the underside, my first instinct was to stare at my feet and will them to stillness. This worked, kind of. (&lt;a href=&quot;#footnote4&quot; id=&quot;sub4&quot;&gt;4&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;I achieved a semblance of stability, but every muscle in my body was totally clenched, and I very quickly began cramping. This was not the relaxing, meditative nautical activity I was promised. On top of that, I realized that I had forgotten to paddle, and the light current was carrying me away. (&lt;a href=&quot;#footnote5&quot; id=&quot;sub5&quot;&gt;5&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;My beautiful saint of a wife called out to me, snapping me out of my spiraling. “Come on!” she yelled, waving, as she calmly scooted away from me like an elegant ocean princess. This was actually really helpful because it gave me a goal to focus on achieving rather than just focusing on how uncomfortable I was in this new unknown arena.&lt;/p&gt;

&lt;p&gt;I tentatively dipped my paddle into the water, switching sides every so often. As I began to paddle and find a rhythm, the training that the folks at Rock Kayak had given us came back to me. I started to make progress against the tide, following my wife.&lt;/p&gt;

&lt;p&gt;While I was focused on paddling, my board also settled into a rhythmic motion, rocking naturally with the surf and my motions. No more frantic wobbling! Throughout the day, I slowly realized that the concept was relatively universal: The more I focused on things that were far away, like the scenery and my overall goal, the more natural my movements became and the more efficient my paddling was.&lt;/p&gt;

&lt;p&gt;The tides that turned my stationary targets into a moving goal were less of a problem for me. The second I focused on close-up issues—Am I doing this right? Here comes a big wave! Is Jenny going faster than me?—things got wobbly, clenchy, and unproductive. (&lt;a href=&quot;#footnote6&quot; id=&quot;sub6&quot;&gt;6&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Shortly after I mastered the complex art of standing still and paddling, a new problem cropped up: My feet started cramping. My mind started to race again. What was I going to do? I was out in the middle of the water. It wasn’t like I could just step off onto dry land to rest my poor feet! It wasn’t like I could just kneel down right there on the board … oh.&lt;/p&gt;

&lt;p&gt;As it turns out, it’s fairly easy to kneel or sit down from a standing position when on a paddleboard.&lt;/p&gt;

&lt;p&gt;I may not have looked like the coolest hot-rodding paddleboarder out there. I maybe moved a little bit slower than Jenny. But I was able to still move forward while preserving my mental and “foot-al” health. And there is no shame in that. (&lt;a href=&quot;#footnote7&quot; id=&quot;sub7&quot;&gt;7&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;I transitioned from standing to kneeling and back again several more times that morning, and knowing I could do that offered me another escape hatch that drastically improved how much fun I was having.&lt;/p&gt;

&lt;p&gt;Now that the immediate emergencies were dealt with, I began a really amazing, zen-like experience. I paddled around, enjoying the sun and the ocean, the smell of the salty spray, and the sounds of the harbor. I said hello to a couple of seals sunning themselves and some otters that were floating around. This was the relaxing, meditative activity I was promised. I would definitely be doing this again. It was then that I had my most important revelation.&lt;/p&gt;

&lt;p&gt;Why was I so worried about falling in?&lt;/p&gt;

&lt;p&gt;That was easily the worst thing that could happen to me. However, the water wasn’t that cold, my phone and wallet were tucked in a waterproof bag, I was wearing a life vest, and most importantly, I know how to swim. Oh yeah, that’s right. I’ve been swimming since I was in elementary school. (&lt;a href=&quot;#footnote8&quot; id=&quot;sub8&quot;&gt;8&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;In all of my panic and spiraling, I had forgotten all of the other skills and coping mechanisms that I’ve developed in other parts of my life. I had never been in any real danger—at least, no more than the danger of getting wet and a bit chilly. Maybe I’d smell like fish for a while. But I certainly wasn’t going to die!&lt;/p&gt;

&lt;p&gt;On top of that, I realized there was no one out here that actively wanted me to fall in (maybe besides Jenny, and then only with love and the desire to laugh at me looking silly). In fact, were I to ever be in any real trouble, everyone out on that bay would immediately rush to my aid. I had been too busy looking at all of the things that could go wrong to consider the vast safety net that was available to me if I needed it.(&lt;a href=&quot;#footnote9&quot; id=&quot;sub9&quot;&gt;9&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;With that, we finished out the remainder of our time on the water, peacefully enjoying each other’s company and the gentle rolling of the sea: Jenny, deftly maneuvering in and out of the boats, and me, goofy but well-meaning, surviving and having the time of my life.&lt;/p&gt;

&lt;p&gt;I highly recommend it to anyone who is interested (and within easy traveling distance of a good body of water), and I’d happily take anyone who wants to go, sharing my newfound wisdom, because I know that they will love it, too. I’ve got a lot to learn and a long way to go to be a great paddleboarder, but I do consider myself a paddleboarder, and I’m proud to be one.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;#sub1&quot; id=&quot;footnote1&quot;&gt;1. &lt;/a&gt;There is a lot of tooling in the programming world. Complicated build processes, tricked-out editors, and—the config files! Oh, the config files! Especially for a beginner, it is intimidating to figure out what is needed. What are the right tools? What is the right way to do things? It’s easy to forget that the important thing is to just get started. The learning and the tooling will come when you need them.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#sub2&quot; id=&quot;footnote2&quot;&gt;2. &lt;/a&gt;Mentors can come in many different forms. Of course, there are the more traditional teachers, like high school and college professors and bootcamp leaders, but a person on a message board online or a co-worker with a little more experience can also be a great mentor. The important thing is that they help you to be productive and safe, and they push you to grow.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#sub3&quot; id=&quot;footnote3&quot;&gt;3. &lt;/a&gt;Mentors are critical to the path of learning how to program, and the best ones know that learning needs to be a challenging but 100 percent safe experience—at least at the beginning.&lt;/p&gt;

&lt;p&gt;It’s the mentor’s job to make sure the mentee knows what they need to know to progress and be safe, as well as how to find help if they get confused. Without this “safety net,” a learner can easily get lost and confused, eventually giving up.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#sub4&quot; id=&quot;footnote4&quot;&gt;4. &lt;/a&gt;While learning spaces like college, apprenticeship, or a boot camp are relatively real-consequence-free that first time you are on your own, working on your own project, or working at a first job, the training wheels come off. Your actions can have real consequences, and your mistakes can affect hundreds or thousands of people. This is, understandably, terrifying.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#sub5&quot; id=&quot;footnote5&quot;&gt;5. &lt;/a&gt;There’s a lot to do as a new programmer: learning all there is to learn, working on your portfolio, publicizing your personal brand, and more. To make things even more difficult, the industry is rapidly evolving, making your learning a moving target. If you are standing still, then you are falling behind! This is, understandably, stressful.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#sub6&quot; id=&quot;footnote6&quot;&gt;6. &lt;/a&gt;Don’t focus so much on the things happening right now. Don’t worry about whether you’re progressing as fast as other people. Don’t worry if you are doing this or that little coding thing “the wrong way.” Focus on the goal. If your goal is to get a job at a big tech company, always keep that in your mind as you’re working. If your goal is to teach, make everything you do align with that goal.&lt;/p&gt;

&lt;p&gt;A common mountain biking tip is to look at where you want to be. If you stare at the big rock, you are going to run into the big rock. The same applies in tech. This will help keep you from burning out, and it will help you ride out the little bumps and issues along the way.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#sub7&quot; id=&quot;footnote7&quot;&gt;7. &lt;/a&gt;It is OK if you need to take a break. Burnout is real, and it is powerful. No matter what, your physical and mental health should come before any deadline, boss’s mandate, or performance review. If anyone tells you otherwise, they don’t have your best interests at heart. Full stop.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#sub8&quot; id=&quot;footnote8&quot;&gt;8. &lt;/a&gt;When things get crazy, especially in an industry where you are always learning and finding out how much you don’t know, it’s important to remember that you do know some things. Remember what you’ve practiced, and do as much as you can to set yourself up for success and minimize the consequences associated with failure.&lt;/p&gt;

&lt;p&gt;The goal is to plan ahead and leverage your knowledge so that when you ask yourself, “What’s the worst that could happen?” the answers aren’t that scary. Not sure if your code will break production? Write some tests. Have a co-worker look at it. Run it. Going to ask for a promotion? Do your research. Figure out what a reasonable salary increase is. Document all of the good things and extra work you’ve done. Remember the skills that you have.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#sub9&quot; id=&quot;footnote9&quot;&gt;9. &lt;/a&gt;This is complementary to #7. Build a support network. Find people who love you, will lift you up, and want you to succeed. Then, lean on them when things get hard. They’ll be there for you if you fail. Don’t forget that means you need to be there for them, too!&lt;/p&gt;

</description>
        <pubDate>Thu, 08 Nov 2018 00:00:00 -0800</pubDate>
        <link>https://assertnotmagic.com/2018/11/08/programmer-and-the-sea/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/11/08/programmer-and-the-sea/</guid>
        
        <category>learning</category>
        
        <category>story</category>
        
        
      </item>
    
      <item>
        <title>Automating Simple Things with Python is Awesome</title>
        <description>&lt;p&gt;&lt;em&gt;Cover photo by Tim Easley on Unsplash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is just a quick post about something that happened to me yesterday at work.&lt;/p&gt;

&lt;p&gt;So there I was: working hard as a mechanical engineer.  You know, measuring stuff.  Squinting at things.  Taking some notes.  Buying various bolts and screws.  The usual.&lt;/p&gt;

&lt;p&gt;I had just downloaded some 3D model files for a clamp we were going to use in a fixture – a real one, sorry software testing folks.  &lt;a href=&quot;https://www.destaco.com/catalog/215-U&quot;&gt;This clamp&lt;/a&gt;, in fact.  As the files came in, I gasped in horror.  The files all had the wrong extensions!  I had clicked the button to download a folder full of &lt;code&gt;.sldprt&lt;/code&gt; (individual parts) and &lt;code&gt;.sldasm&lt;/code&gt; (assemblies) files, but they came in as &lt;code&gt;.prt.1&lt;/code&gt; and &lt;code&gt;.asm.1&lt;/code&gt; files.  What gives!?  And to make matters worse, there were a few XML files thrown into the mix – useless to me!&lt;/p&gt;

&lt;p&gt;So I right-clicked and renamed the first file, changing to the appropriate extension.  And, as I right-clicked on the second file (of about 30), my inner developer started getting grumpy.  “We don’t have to stand for this!” he cried, flinging his tiny inner-developer keyboard accross his tiny inner-developer office.  (My inner developer startup has offices and doors because I’m not a monster.)&lt;/p&gt;

&lt;p&gt;Anyways, back to him.  “We don’t have to stand for this!” he cried.  “We’re not some mindless, paper-pushing drones!  We can program!  We could script this in no time!”&lt;/p&gt;

&lt;p&gt;“We &lt;em&gt;could&lt;/em&gt;,” my inner project manager chimed in.  (My inner startup is well-staffed.)  “But how much time is that really going to save us?  We could be done renaming all of these files in like two minutes.”&lt;/p&gt;

&lt;p&gt;“Alright,” the inner developer replied, bottom lip starting to jut stubbornly.  Then I’ll do it in 120 seconds or less.”&lt;/p&gt;

&lt;p&gt;He then said, “Crap.  We’re on a Windows machine without Bash, and I can’t quite remember the PowerShell syntax to manipulate strings.  Or, at least, not enough to get it done in time.  Oh wait!  We know Python!  We can do anything we want!”&lt;/p&gt;

&lt;p&gt;So, he quickly guided me to do a search for a way to iterate over a directory and rename files.  I had to search, because I know there are a few ways of doing it.  Was it &lt;code&gt;os&lt;/code&gt;, or &lt;code&gt;shutil&lt;/code&gt;, or &lt;code&gt;pathlib&lt;/code&gt;?  I think any one of those would have worked.  I know there’s a bunch of ways to do what I want, but I needed a way that could be accomplished in 120 seconds of combined Googling and implementing.&lt;/p&gt;

&lt;p&gt;Aha!  Got it!&lt;/p&gt;

&lt;p&gt;“That’s 30 seconds down,” warned my inner project manager.  “Get a move on!”&lt;/p&gt;

&lt;p&gt;So I opened up a terminal and fired up &lt;code&gt;ipython&lt;/code&gt;, my preferred Python REPL.  (Yes I have used &lt;code&gt;bpython&lt;/code&gt;.  Yes it is amazing.  I still like &lt;code&gt;ipython&lt;/code&gt;.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import os

for filename in os.listdir(&quot;.&quot;):
    if filename.endswith(&quot;.1&quot;):
        basename = filename[:-6]
        extension = filename[-5:-2]
        os.rename(filename, basename + &quot;.sld&quot; + extension)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My inner dev team high-fived and clinked their cans of La Croix in celebration.&lt;/p&gt;

&lt;p&gt;Was it the prettiest, most elegant code I’ve ever written?  No.  But did I get it done in less than 120 seconds?  Yes.  Did it work?  Yes.  Did I feel like a wizard?  You’re darn right.&lt;/p&gt;

&lt;p&gt;Python is awesome, and no matter what I do with it, it makes me feel happy.&lt;/p&gt;

&lt;h2 id=&quot;after-credits-scene&quot;&gt;After-Credits Scene&lt;/h2&gt;

&lt;p&gt;Now that I’m not on the clock and I’m free to take as much time as I like, I’ve decided I like this solution better:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from pathlib import Path

for file in Path(&quot;.&quot;).glob(&quot;*.1&quot;):
    name, ext, _ = file.name.split(&quot;.&quot;)  # There were no other .'s in the names
    file.rename(f&quot;{name}.sld{ext}&quot;)
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Sat, 03 Nov 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/11/03/automating-with-python-is-cool/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/11/03/automating-with-python-is-cool/</guid>
        
        <category>python</category>
        
        <category>scripting</category>
        
        
      </item>
    
      <item>
        <title>Degree, Bootcamp, or Self-Taught: Thoughts on How to Choose</title>
        <description>&lt;p&gt;&lt;em&gt;Cover image a compilation of images from Cal Poly, &lt;a href=&quot;https://unsplash.com/photos/IgUR1iX0mqM?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;NESA by Makers&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/search/photos/bootcamp?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;, and me!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One cool thing about programming is that there are many different roads to learning how to do it.  I think that these are a few of the most common ways:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Go to college to get a degree in Computer Science, Software Engineering, Information Technology, or a similar focus.&lt;/li&gt;
  &lt;li&gt;Attend a Coding Bootcamp either online or in-person.  These are relatively short, intensive programs that are heavily focused on getting students up and running with relevant and marketable skills with the ultimate goal of getting a job.&lt;/li&gt;
  &lt;li&gt;Set your own curriculum and pace, learning from online videos, courses, books, coding challenges, and other free or inexpensive resources.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’ve seen people wonder about the pros and cons of each option a number of times on places like Twitter, StackOverflow, and Dev.to.  I’ve had a little experience with each of these options, and I thought I’d share my experiences and recommendations.  One caveat: I’ve never had a software job.  I’m just sharing my learning experience, along with some knowledge I’ve absorbed from books/videos/podcasts/talks/tweets given by a lot of really smart people.&lt;/p&gt;

&lt;p&gt;Keep in mind that everyone’s learning style is different, and your mileage may vary.  I’m just providing some things to think about when weighing your decision.&lt;/p&gt;

&lt;h2 id=&quot;multi-year-college-degree&quot;&gt;Multi-Year College Degree&lt;/h2&gt;

&lt;h3 id=&quot;the-facts&quot;&gt;The Facts&lt;/h3&gt;

&lt;p&gt;The academic setting really works for some people.  You’ll know if this is you.  If the thought of going back to school (or heading to college for the first time) fills you with dread, this probably isn’t you.  That being said, sometimes, a hiring manager will tell you that you &lt;em&gt;need&lt;/em&gt; a particular degree for a particular position.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Side note: If you &lt;em&gt;don’t&lt;/em&gt; have the degree that a job posting is asking for, but you think you could do the job and would enjoy it, definitely apply anyway.  Don’t take &lt;em&gt;yourself&lt;/em&gt; out of the running.  Wait until the person that would be hiring you has met you and heard all of your qualifications, and &lt;em&gt;then&lt;/em&gt;, if they tell you you need a degree, you can believe them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While in pursuit of a college degree, you usually have all of the benefits of learning in a classroom setting: a professor that knows the subject, classmates that are all learning the material at the same time as you, a structured learning environment (syllabus, learning goals, scheduled homework and tests).&lt;/p&gt;

&lt;p&gt;Depending on the workload and the student, that structured learning environment can be extremely stressful, because the timelines are fixed and there are real consequences for failure.  That being said, it &lt;em&gt;is&lt;/em&gt; possible to do a degree program in smaller doses – maybe a few hours per week, at night – if you want to get a degree while still continuing to work full-time.&lt;/p&gt;

&lt;p&gt;The quality of the education will vary wildly from professor to professor.  While many professors teach, not &lt;em&gt;all&lt;/em&gt; of them are &lt;em&gt;teachers&lt;/em&gt;.  Some are really amazing and they make the class engaging, enjoyable, and you learn a ton.  Some are not that great.  If they teach in a hard-to-understand or demeaning way, it can demoralize you and make you feel like you’re not good enough or smart enough to code.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Fun fact: The statements “I am not smart enough to code,” and “I just don’t have that kind of brain,” are always false.  Everyone can code.  They just need the right teaching approach.  And determination, because coding is hard.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;my-recommendation&quot;&gt;My Recommendation&lt;/h3&gt;

&lt;p&gt;I would suggest pursuing a programming-related degree for the following reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You really love it and want to dive deeper.&lt;/li&gt;
  &lt;li&gt;You have the determination to stick through the classes that are hard or confusing, the confidence to know it’s probably not your fault that it’s hard, and the wisdom to accept that and put in the work anyways.&lt;/li&gt;
  &lt;li&gt;You are able to spend the money and the time it takes to get a degree.&lt;/li&gt;
  &lt;li&gt;Your end goals require you to have this degree.&lt;/li&gt;
  &lt;li&gt;You already have been programming for a while.  You’ll have real-world context for the concepts that are taught and why they are useful, which is incredibly helpful.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I would &lt;em&gt;not&lt;/em&gt; suggest pursuing a programming-related degree if:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You don’t know how to code and you’re not sure if you would like it or not.  Paying for college tuition is not a wise way to figure that out.  At least try out Codecademy or something first.&lt;/li&gt;
  &lt;li&gt;You don’t like school and don’t &lt;em&gt;need&lt;/em&gt; a degree for some reason.&lt;/li&gt;
  &lt;li&gt;You can’t afford it, don’t want to pay loans, and don’t need a degree for some reason.&lt;/li&gt;
  &lt;li&gt;You don’t have the time to allocate and don’t need a degree for some reason.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;coding-bootcamp&quot;&gt;Coding Bootcamp&lt;/h2&gt;

&lt;h3 id=&quot;the-facts-1&quot;&gt;The Facts&lt;/h3&gt;

&lt;p&gt;I haven’t personally been through a bootcamp, but I’ve got family that has, and I’ve tutored someone who was going through one.  If you’ve got experiences that differ from what I’ve seen, I’d love to hear about it.&lt;/p&gt;

&lt;p&gt;Coding bootcamps are great if you currently don’t know a ton about programming, but your goal is to get a tech-related job in the near future anyways.  Most of them will have some sort of pipeline/network for getting their students jobs at the end.  They’ll probably help you with your resume, interviewing skills, and help you research companies that might be a good fit.&lt;/p&gt;

&lt;p&gt;There are some significant costs associated with them, but not as much as most college degree programs.  Now, some bootcamps are even willing to waive your tuition until &lt;em&gt;after&lt;/em&gt; you’ve graduated and gotten a paying job.&lt;/p&gt;

&lt;p&gt;The main downside to a bootcamp is the time commitment.  Many bootcamps require a few months of full-time engagement, which would require you to take time off from work or work but never sleep.  But, if you’ve got a company that will let you take that time off and still have your job (or even better – a software job!) waiting for you when you get back, that’s an amazing opportunity.&lt;/p&gt;

&lt;p&gt;Similar to how the teaching quality can vary from professor to professor, the experience can be &lt;em&gt;very&lt;/em&gt; different depending on which bootcamp you choose.  Definitely do your research, read reviews, and, if possible, talk with people who have gone through the program to get their feedback.  Because of the time and money commitment, you really want to get the right one.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Even so, regardless of the quality of the bootcamp, if you’re ready to put in the work and be the &lt;em&gt;best&lt;/em&gt; in your class, you’ll most likely come out the other side mostly ready for your first tech job no matter what.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The one downside I noticed while working through the courseload with the people I was tutoring was that the program spent a &lt;em&gt;lot&lt;/em&gt; of time showing the students &lt;em&gt;how&lt;/em&gt; to do things with the current frameworks, libraries, and languages, but not very much time explaining &lt;em&gt;why&lt;/em&gt; things worked.  The students I’ve encountered all felt a little shaky on some of the basics of their programming languages, but were pretty comfortable with things like Git workflow, &lt;code&gt;npm&lt;/code&gt;, and the particular functions and usages of popular libraries.&lt;/p&gt;

&lt;p&gt;Again, getting comfortable with the basics of programming may mean some extra hard work and practice on your part.  This will depend heavily on which bootcamp you choose.&lt;/p&gt;

&lt;h3 id=&quot;my-recommendation-1&quot;&gt;My Recommendation&lt;/h3&gt;

&lt;p&gt;I would recommend attending a bootcamp if:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Your primary goal is to get a programming job as quickly as possible.&lt;/li&gt;
  &lt;li&gt;You like programming and really want to learn those skills, but you have a hard time keeping motivated on your own.&lt;/li&gt;
  &lt;li&gt;You are able to make the significant time commitment.&lt;/li&gt;
  &lt;li&gt;You can afford the tuition and/or you find a program that will wait until after you’ve gotten a job to bill you.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I would not recommend a bootcamp if:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;You’re just curious about programming and have never tried it.  Try a couple of free online learning resources first, just to make sure it’s something you want to spend the money on.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;You don’t learn well in a fast-paced environment.  They go fast, because they’ve got a lot of material to cover in a short time, and you have to be able to be willing to do research on your own or ask for help outside of class.&lt;/li&gt;
  &lt;li&gt;You’re not looking for a programming job.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;self-taught&quot;&gt;Self-Taught&lt;/h2&gt;

&lt;h3 id=&quot;the-facts-2&quot;&gt;The Facts&lt;/h3&gt;

&lt;p&gt;“Self-taught” is actually a little bit of a misnomer, because even though your learning is “self-paced,” in fact, you’re learning from hundreds or thousands of amazing, smart people who all put their knowledge out online for free (or relatively cheap).&lt;/p&gt;

&lt;p&gt;No matter what path you choose, you will &lt;em&gt;need&lt;/em&gt; to do &lt;em&gt;some&lt;/em&gt; amount of self-teaching.  In fact, being hungry for knowledge and always trying to learn new things is an important skill to cultivate for a budding developer.  Because this industry is always changing, if you stop learning the moment you graduate from college or your bootcamp, you’ll immediately be behind the curve.&lt;/p&gt;

&lt;p&gt;It’s important to note (for your sanity and mental well-being) that there is an &lt;em&gt;enormous&lt;/em&gt; amount of knowledge out there.&lt;/p&gt;

&lt;p&gt;A.  Lot.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There is no way that you could ever learn everything there is to know about programming.  So don’t stress too hard about being “behind.”  Just stay curious, willing to experiment, and open to new ideas, and the growth will come.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That is the main benefit – and drawback – of the self-paced path: it’s a long and winding road (#dontsuemeBeatles).  It’s hard to stay focused on learning one specific skill or set of skills.  There’s so many cool topics out there, it’s easy to get distracted – and often getting distracted is okay!  You’re not on anyone’s timeline but your own, so if you want to take a weekend to learn how compilers work or use a Raspberry Pi to make an LED blink, there’s nothing wrong with that.  But it &lt;em&gt;will&lt;/em&gt; take time away from the other skills you’re trying to learn.&lt;/p&gt;

&lt;p&gt;So, if your end goal is to get a programming job, and you are trying to do it all on your own, know that it may take a while, and you may have some random gaps in your knowledge that might be surprising to others.  However, as long as you are willing and able to go back and learn the things you might have missed when you need to, that might not be a problem.&lt;/p&gt;

&lt;p&gt;The last thing to note is that, even though this section is all about “teaching yourself to code,” &lt;em&gt;you don’t have to do that alone.&lt;/em&gt;  There are a &lt;em&gt;ton&lt;/em&gt; of great communities of people out there who are learning to code right along side you, and it can be really helpful to have them there to share your pains, struggles, and victories with.  Dev.to, Code Newbies, and people doing the #100daysofcode are three that are especially great.&lt;/p&gt;

&lt;h3 id=&quot;my-recommendation-2&quot;&gt;My Recommendation&lt;/h3&gt;

&lt;p&gt;I would recommend the self-taught path if:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You don’t have pressing needs for a programming job or degree.&lt;/li&gt;
  &lt;li&gt;You love coding for fun!&lt;/li&gt;
  &lt;li&gt;You can’t afford tuition but you can afford a laptop, internet, and are ready to push yourself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I would not recommend the self-taught path if:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You need a little more structure to your learning environment.  Even still, you should probably practice learning things on your own, because that skill will come in handy.&lt;/li&gt;
  &lt;li&gt;You urgently need a programming job.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dont-wait--decide-and-go-to-work&quot;&gt;Don’t Wait.  Decide and Go to Work&lt;/h2&gt;

&lt;p&gt;The worst thing you can do is to do nothing and agonize over which is the “right” way to do it.  Start learning on your own, and then look into a degree program or a bootcamp if you feel like you need to supercharge your learning pace or deepen your understanding.  Remember that degrees and bootcamps are an &lt;em&gt;investment&lt;/em&gt;, so do that math and make sure your investment will pay off (salary-wise, time-wise, remote-work-wise, or other-wise) before you make that commitment.&lt;/p&gt;

&lt;p&gt;And remember that, no matter what, at the end, you’ll be able to code, and you’ll be a better learner.  And that’s important.  And it should make you feel like a gosh darn superhero.&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Nov 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/11/02/degree-bootcamp-self-taught/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/11/02/degree-bootcamp-self-taught/</guid>
        
        <category>learning</category>
        
        
      </item>
    
      <item>
        <title>It's Ruby, There Must Be a Better Way</title>
        <description>&lt;p&gt;I was recently doing a challenge on &lt;a href=&quot;https://exercism.io&quot;&gt;Exercism&lt;/a&gt;, on the Ruby track, and I struggled a lot, but when I ended up with a final solution, I was amazed at how much the power of Ruby let me simplify my code.&lt;/p&gt;

&lt;p&gt;It’s a pretty cool challenge, so, I’ll lay out the premise first, and then you can try it out.  If you’re really into it, the Ruby tests for this exercise are &lt;a href=&quot;https://github.com/exercism/ruby/blob/master/exercises/robot-name/robot_name_test.rb&quot;&gt;in the Exercism Ruby repo&lt;/a&gt;.  Most of the repos for the other languages have similar test suites for this exercise as well.  This exercise is called &lt;strong&gt;Robot Name&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-premise&quot;&gt;The Premise&lt;/h2&gt;

&lt;p&gt;You are creating a line of robots that each have a unique name.  Their names all follow the pattern &lt;code&gt;letter letter number number number&lt;/code&gt;.  A couple of valid names might be &lt;code&gt;AB123&lt;/code&gt;, &lt;code&gt;YE801&lt;/code&gt;, or &lt;code&gt;RP100&lt;/code&gt;.  This means that there are &lt;code&gt;26 * 26 * 10 * 10 * 10&lt;/code&gt; possible names.  So here’s the challenge.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Write a class that creates Robots.&lt;/li&gt;
  &lt;li&gt;Each Robot created must have a unique name that matches the pattern above.&lt;/li&gt;
  &lt;li&gt;Robots must be able to be &lt;code&gt;reset&lt;/code&gt;, wiping their memory and forgetting their name, receiving a new one that is still unique.  Don’t worry about recycling their name and returning it to the pool.  We’ll assume that once a name is taken, it’s used up.&lt;/li&gt;
  &lt;li&gt;The name sequence &lt;strong&gt;must be random&lt;/strong&gt;.  That means the sequence must not be predictable.&lt;/li&gt;
  &lt;li&gt;The Robot Class must have a &lt;code&gt;forget&lt;/code&gt; method that makes it forget the current state of robots, resetting any shared state it may have.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Make sense?  OK, if you’re going to attempt this challenge, off you go.  I’m going to share my journey below.&lt;/p&gt;

&lt;h2 id=&quot;my-journey&quot;&gt;My Journey&lt;/h2&gt;

&lt;h3 id=&quot;1-naive-guess-and-check&quot;&gt;1. Naive Guess and Check&lt;/h3&gt;

&lt;p&gt;The difficulty of this exercise is mainly in the fact that &lt;em&gt;there are so many possibilities for names&lt;/em&gt;.  Any attempt to build all of those strings and combinations through looping or appending to a list are just waaaay too slow.  I tried a bunch of different approaches, and there were actually several false-start versions before I reached version 1.  My first thought was to naively keep track of the names used, generate a random name, and check if it’s in the list:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class Robot
  LETTERS = ('A'..'Z').to_a
  NUMBERS = ('0'..'9').to_a
    
  @@taken_names = []
    
  def self.forget
    @@taken_names = []
  end
    
  attr_reader :name
    
  def initialize
      reset
  end
  
  def reset
    name = &quot;&quot;
    loop do
      name = LETTERS.sample(2) + NUMBERS.sample(3)
      break if ! @@taken_names.include?(name)
    end
    @name = name
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works great for the first bunch of robots created, but as soon as you get high enough that there start to be collisions, you quickly realize you’ve got an algorithm that could, in theory, run infinitely long searching for a needle in a 676,000-strand haystack!&lt;/p&gt;

&lt;p&gt;But this is Ruby!  There’s got to be a better way!  Maybe we should do it the other way, starting with a list of possible names and then popping them out, guaranteeing no collisions.&lt;/p&gt;

&lt;h3 id=&quot;2-popping-names-off-a-list&quot;&gt;2. Popping Names Off a List&lt;/h3&gt;

&lt;p&gt;So that’s a great thought, but how to build the list of names?  Something like this?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;@@names = LETTERS
  .product(LETTERS, NUMBERS, NUMBERS, NUMBERS)
  .map(&amp;amp;:join)
# =&amp;gt; @@names = ['AA000', 'AA001' ... 'ZZ998', 'ZZ999']
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK, that works.  The &lt;code&gt;product&lt;/code&gt; method creates a “Cartesian Product” between all of its arguments.  For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;[1, 2, 3].product([4, 5])
# =&amp;gt; [
# [1, 4],
# [1, 5],
# [2, 4],
# [2, 5],
# [3, 4],
# [3, 5],
# ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That giant product above creates a list like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;[
  ['A', 'A', '0', '0', '0'],
  ['A', 'A', '0', '0', '1'],
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s why we join them all together into single strings via the &lt;code&gt;.map(&amp;amp;:join)&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Startup time for our class (as well as &lt;code&gt;forget&lt;/code&gt; run time) is pretty long, but maybe that’s allowable, seeing how much time it saves us on our algorithm.  Right?  Right?&lt;/p&gt;

&lt;p&gt;Wrong.  When our list is huge, randomly choosing an index and then popping that out takes FOR.  EVER.  Because, each time we pop an item out, all of the items behind that item have to figure out what to do with the gap that it left.  This list of names is so huge, it’s like trying to turn the Titanic.  And how’d that work out for Leo?!  (Too soon?)&lt;/p&gt;

&lt;p&gt;I even tried generating a giant list of integers instead and converting each integer to my own custom numbering system that was (base 26, base 26, base 10, base 10, base 10), but that was more confusing and not any better.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class Robot
  LETTERS = ('A'..'Z').to_a
  NUMBERS = ('0'..'9').to_a
    
  @@possible_names = LETTERS
    .product(LETTERS, NUMBERS, NUMBERS, NUMBERS)
    .map(&amp;amp;:join)
    
  def self.forget
    @@possible_names = LETTERS
      .product(LETTERS, NUMBERS, NUMBERS, NUMBERS)
      .map(&amp;amp;:join)
  end
    
  def initialize
    reset
  end
    
  def reset
    next_index = rand(0...@@possible_names.length)
    @name = @@possible_names.pop(next_index)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;This is Ruby!  There must be a better way!&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-final-solution&quot;&gt;The Final Solution&lt;/h3&gt;

&lt;p&gt;As it turns out, there is.  My fundamental idea of working from a pre-built list was the right idea, but I wasn’t &lt;em&gt;letting Ruby work for me enough&lt;/em&gt;.  There were a lot of things I could improve upon.&lt;/p&gt;

&lt;p&gt;First, the building of the list of names.  I forgot how &lt;em&gt;awesome&lt;/em&gt; ranges in Ruby are.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;@@names = 'AA000'..'ZZ999'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s right.  Ruby knows how to increment each character in the string (even the letters) to fill in the gaps.  I’ll be honest, when this was pointed out to me by the Ruby Track Mentor after all of that work, I only cried for like 12 minutes.&lt;/p&gt;

&lt;p&gt;Next, random access.  Rather than randomly selecting each time, why not shuffle once, up front?  &lt;em&gt;But you can’t shuffle a range in Ruby!&lt;/em&gt;  Not a problem!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;@@names = ('AA000'..'ZZ999').to_a.shuffle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This crying session only lasted 7 minutes.&lt;/p&gt;

&lt;p&gt;Lastly, dealing with modifying this great giant list over and over.  The solution?  &lt;em&gt;Don’t.&lt;/em&gt;  The best way to deal with a large dataset isn’t to pop off of it.  It’s to let Ruby work for you and use an &lt;strong&gt;Enumerator.&lt;/strong&gt;  This lazily yields each element.  It’s similar to having a pointer point at the element you want and then moving the pointer to the next element, but way less work.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class Robot
  POSSIBLE_NAMES = 'AA000'..'ZZ999'
    
  @@names = POSSIBLE_NAMES.to_a.shuffle.each
    
  def self.forget
    @@names = POSSIBLE_NAMES.to_a.shuffle.each
  end
    
  attr_reader :name
    
  def initialize
    reset
  end
    
  def reset
    @name = @@names.next
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way, you walk through the names until you run out.  Handily, when the &lt;code&gt;@@names&lt;/code&gt; Enumerator runs out of names, a call to &lt;code&gt;@@names.next&lt;/code&gt; will raise a &lt;code&gt;StopIteration&lt;/code&gt; exception, telling the user that you’re out of names.  If you want, you could catch that exception and raise your own &lt;code&gt;RobotNamesDepletedError&lt;/code&gt; too.  And a call to &lt;code&gt;Robot.forget&lt;/code&gt; renews the list of names with a new random shuffle.&lt;/p&gt;

&lt;p&gt;What did you come up with?  Did you try the exercise in another language?  How did it turn out?  Let me know.&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Oct 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/10/27/ruby-a-better-way/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/10/27/ruby-a-better-way/</guid>
        
        <category>ruby</category>
        
        <category>exercism</category>
        
        <category>challenge</category>
        
        
      </item>
    
      <item>
        <title>Tips for Taming the CSS Beast</title>
        <description>&lt;p&gt;&lt;em&gt;Cover image photo by Tallie Robinson on Unsplash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Today I had a conversation on Twitter with @milos_ljuba about CSS.  He had read &lt;a href=&quot;https://dev.to/rpalo/state-of-the-web-data-exploration-1b68&quot;&gt;my article about the Dev.to State of the Web Survey&lt;/a&gt;, and he said he really identified with the group that doesn’t like CSS.  Our conversation was great, and I asked him if I could share it, because I feel like a lot of people probably struggle with CSS in a similar way.  Hopefully I shared some resources that can help, and Milos can help those people remember they’re not alone.&lt;/p&gt;

&lt;p&gt;So, here’s the conversation (albeit with more formatting and fewer typos on my side).&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;milos&quot;&gt;Milos:&lt;/h2&gt;

&lt;p&gt;Hey Ryan, I’ve read your post about the Survey data exploration. Great job! :) You mentioned something about people who don’t like CSS. I’m one of them, sadly :D I come from CS background and I’ve always found CSS and everything about UI’s repelling. I don’t know if it’s my fault, but that’s the way it is. Now I see that I won’t be able to avoid learning it, especially because I got intrested into frontend stuff - React &amp;amp; Redux ecosystem… I know everything about what it’s for and how it works, but every time I need to do a little tweak I bang my head to the wall and search all over the internet. The components from Bootstrap, Semantic UI etc. have been helping me so far, but not everything can be achieved using them.  I would like to be able one day to at least get an idea when I see a specific web page design, how would i go about turning it into a functional site. Any advice about finding the motivation, learning path and resources is appreciated :) Cheers!&lt;/p&gt;

&lt;h2 id=&quot;me&quot;&gt;Me:&lt;/h2&gt;

&lt;p&gt;Hi!  Thanks, I’m glad you liked the article 😁 Yeah, CSS is hard for a lot of people.  One problem is that there are often many different ways to do the same thing that all have varying pros and cons, and different options are coming in and out of fashion.  I would say that the best things you can do are:&lt;/p&gt;

&lt;h3 id=&quot;surround-yourself-with-greatness&quot;&gt;Surround Yourself with Greatness&lt;/h3&gt;

&lt;p&gt;Immerse yourself in content and code from people who are really good at CSS.  Wes Bos has a couple free courses.  Look up &lt;a href=&quot;https://javascript30.com/&quot;&gt;JavaScript 30&lt;/a&gt; and his &lt;a href=&quot;https://cssgrid.io/&quot;&gt;CSS Grid course&lt;/a&gt;.  As you go through those, you’ll see a bunch of best practices that are really helpful.  Get on Codepen and look around and follow people doing cool things with CSS.  &lt;a href=&quot;https://codepen.io/sdras/&quot;&gt;Sarah Drasner&lt;/a&gt; is one that comes to mind.  Look at their code.  The articles by &lt;a href=&quot;https://css-tricks.com/author/chriscoyier/&quot;&gt;Chris Coyier&lt;/a&gt; and others on &lt;a href=&quot;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&quot;&gt;CSS Tricks&lt;/a&gt; are almost always excellent.  Take a look through the actuall CSS files in &lt;a href=&quot;https://getbootstrap.com/docs/3.3/css/&quot;&gt;Bootstrap&lt;/a&gt; and others.  See the CSS behind the &lt;code&gt;.text-center&lt;/code&gt; or &lt;code&gt;.btn btn-primary&lt;/code&gt; classes to see how they work.&lt;/p&gt;

&lt;h3 id=&quot;practice&quot;&gt;Practice&lt;/h3&gt;

&lt;p&gt;Build things.  Build a million little projects (again, Codepen is good for this) that are all using CSS and HTML – and JavaScript if you’re up for it!  The more you practice, the more you’ll begin to develop an eye for the issues and how to fix them, as well as good design!&lt;/p&gt;

&lt;h3 id=&quot;get-help&quot;&gt;Get Help&lt;/h3&gt;

&lt;p&gt;Ask for help!  If you’re stuck on a specific question or problem, don’t be afraid to ask for help (like you’re doing right now 🙂).  I’m always happy to take a look at some HTML/CSS and try to explain what the problem is and a couple good ways to fix it.  Anyways, hopefully this helps.  Let me know if you have more questions.&lt;/p&gt;

&lt;p&gt;P.S. This actually turned out to be more typing than I thought it would be.  Would you mind if I used your question and my answer in a blog post?  I can leave your name/handle out if you prefer.&lt;/p&gt;

&lt;h2 id=&quot;milos-1&quot;&gt;Milos:&lt;/h2&gt;

&lt;p&gt;Woah, that’s very helpful 😀 Thanks for your time. I bookmarked Wes Bos a month ago and I never find the time to sit down and do the course. I will take your advices and try to beat that CSS beast 🙂 For me it’s harder than some deep functional programming concepts I’m learning atm…&lt;/p&gt;

&lt;p&gt;Yeah, definitely use it for a blog post if you want. I have no problem people knowing I’m bad at CSS 😂 Maybe someone else will find that helpful also.
My nickname is ljuba95 on http://dev.to  and GitHub if you wanna mention me somewhere.&lt;/p&gt;

&lt;p&gt;Will get back to you if I hit a wall during the learning, but it’s harder not to lose motivation than to actually understand CSS. There are too many properties, ways to accomplish something…&lt;/p&gt;

&lt;p&gt;Thanks again, cheers!&lt;/p&gt;

&lt;h2 id=&quot;me-1&quot;&gt;Me:&lt;/h2&gt;

&lt;p&gt;No problem!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The important thing is to not even try to memorize all of the properties and tags.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Understand the fundamental concepts of how the browser lays things out, in-line vs block elements, the box model, and how selectors and specificity work. Look at best practices like BEM (just a way to lay out your CSS). Once you start to get the fundamentals, you’ll get a feel for “I think there’s a property that does what I want, but I don’t know what it’s called. Box-border-something maybe? I’ll look it up on Google.” I do that all the time. W3Schools FTW! 😁&lt;/p&gt;

&lt;h2 id=&quot;milos-2&quot;&gt;Milos:&lt;/h2&gt;

&lt;p&gt;Yep, that’s how I learn everything. I get that feel for programming language concepts because I did a language design course.  And for some common programming problems, but I accept that I don’t clearly get how browser does it’s work concerning CSS. I’ve heard of all the concepts you mentioned but I still don’t have deep understanding.  I hope Wes Bos will help 😀&lt;/p&gt;

&lt;h2 id=&quot;me-2&quot;&gt;Me:&lt;/h2&gt;

&lt;p&gt;Another good quick overview is this article: &lt;a href=&quot;http://www.aimeemarieknight.com/It's-Not-Dark-Magic-Pulling-Back-the-Curtains-From-Your-Stylesheets/&quot;&gt;It’s Not Dark Magic: Pulling Back the Curtains from your Stylesheets&lt;/a&gt; by Aimee Knight.  It gives a 10 minute (or so) read into the guts of how browsers deal with your style sheets, which might appeal a little more to your “nuts and bolts” side, maybe.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you have any other good advice or resources, be sure to share it with Milos (and me!).  There’s so much good content and so many smart, great teachers out there.  Hopefully we can get more people to experience the fun side of CSS!&lt;/p&gt;

&lt;p&gt;Happy styling!&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Oct 2018 09:21:26 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/10/25/tips-for-taming-the-css-beast/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/10/25/tips-for-taming-the-css-beast/</guid>
        
        <category>css</category>
        
        <category>learning</category>
        
        
      </item>
    
      <item>
        <title>Uncomfortable Situations Don't Go Away</title>
        <description>&lt;p&gt;&lt;em&gt;Cover Image by Stephen Philpott on Unsplash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hi!  I’m using this post to blow off some steam after a stressful week at work.  If you want to skip over the back story and get to the lesson, you can skip down to the &lt;a href=&quot;#the-lesson&quot;&gt;Lesson&lt;/a&gt; section.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This week at work &lt;em&gt;sucked.&lt;/em&gt;  I mean, &lt;strong&gt;a lot.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I work at a machine shop/injection molding house, where we do a lot of prototypes for people, and then help them move into production quantities.  It’s mostly medical devices, but there are some consumer products and stuff for other industries too.  I’m the mechanical engineer, so I do most of the mold and part designs.&lt;/p&gt;

&lt;p&gt;I also am a programmer and a millenial, so I help out with IT issues.  In addition, I’m in front of a computer most of the day, so I end up handling much of the customer-facing stuff like quotes, orders, quality issues, purchasing, and scheduling/project management.  Lots of scheduling and project management.&lt;/p&gt;

&lt;p&gt;But more on that in a second.&lt;/p&gt;

&lt;p&gt;I like my job!  It’s pretty flexible and a very relaxed atmosphere.  Loud machines and guys joking and yelling a lot.  People whooping and clapping when somebody else blows up a part or runs their tool into a vise.  It’s good!&lt;/p&gt;

&lt;p&gt;In the last few months, we’ve gotten &lt;em&gt;super&lt;/em&gt; busy.  I don’t know what’s causing it, but our schedule went from a consistent three-weeks-out queue to an eight-week queue in just a couple of months.  But we are managing, and, all things considered, I’ve been doing a pretty decent job at estimating and scheduling the jobs so that we hit most of our due dates and make the customers happy.&lt;/p&gt;

&lt;p&gt;Until.&lt;/p&gt;

&lt;p&gt;On Monday this week, one of our top guys had a family emergency.  Sudden, unavoidable, and catastrophic.  Unfortunately, he’s a vital and irreplaceable part of our production process, and he needed to be out all this week and half of next week.&lt;/p&gt;

&lt;p&gt;Obviously, family stuff is way more important than work stuff, so I don’t fault him for leaving as quick as he did or being gone for that long.  You have to do what you have to do.  That being said, there were side-effects.&lt;/p&gt;

&lt;p&gt;Boom goes the schedule.&lt;/p&gt;

&lt;p&gt;Those eight weeks of scheduled jobs that I had in queue?  Every one of them – some of which with hard, fixed deadlines – had lost a critical week and a half of man-hours required to complete them.&lt;/p&gt;

&lt;p&gt;The phone calls began on Tuesday.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hi!  How are you doing?  I’m just calling to check on my parts.  I think they were supposed to be done yesterday?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And the fun part?  I didn’t find out until today (Friday) &lt;em&gt;when&lt;/em&gt; he was going to be coming back.  So I was attempting to shuffle and reschedule around a mystery date.  Guess how many customers like to hear, “I’m sorry, I’m not sure when your items will be complete.  Try back later.”  If you said “none,” you are right!  Most of them say something like, “Well, you &lt;em&gt;have&lt;/em&gt; to give me &lt;em&gt;some&lt;/em&gt; kind of date.”&lt;/p&gt;

&lt;p&gt;Boom goes the pressure.  Wham! goes my blood pressure.  KAPLOWEY goes my anxiety.&lt;/p&gt;

&lt;p&gt;Any normal introvert’s instinct would be to unplug the phone and the router and hope the customers give up and go away.  But I’ve been in situations like this before, and there’s one thing that I’ve learned.&lt;/p&gt;

&lt;h2 id=&quot;the-lesson&quot;&gt;The Lesson&lt;/h2&gt;

&lt;p&gt;Uncomfortable situations &lt;em&gt;never&lt;/em&gt; go away on their own.  And &lt;em&gt;almost always&lt;/em&gt;, if you ignore them, they just fester and get immeasurably worse.  This has happened to me multiple times.  The first few times, I didn’t learn.  I just ignored it.  It invariably came back to bite me.  Library fines, spoiled food in the fridge, serious conversations with friends: left unaddressed, all end in misery (and possibly bad smells).&lt;/p&gt;

&lt;p&gt;It’s always a good idea to confront the unpleasant situation, address it, handle it, and move on.  You’ll feel better.  Everyone else involved will feel better.  You won’t miss out on any chances that you might have missed by doing nothing.&lt;/p&gt;

&lt;p&gt;I’ve noticed that there always seems to be some sort of unforseen benefit to addressing these issues.  Somebody ends up being unexpectedly thankful for your up-front-ness.  You have extra options to deal with the issue that wouldn’t be there later.  People are generally more forgiving if they haven’t been stewing over this issue for a while.  It’s always something nice.&lt;/p&gt;

&lt;h2 id=&quot;just-handle-it-and-then-reward-yourself-with-beer-or-cake&quot;&gt;Just Handle It (and then reward yourself with beer or cake)&lt;/h2&gt;

&lt;p&gt;So, at the end of the day today, I sat down, and I planned out our work schedule for the next eight weeks, working around the missing guy, doing my best to make every customer as happy as possible, given the situation.  Then, I wrote each and every one of them an email, laying out the situation and our plan to deal with it, and what they could expect.  I grovelled a little bit (not excessively), and told them I would keep them updated as things progressed.&lt;/p&gt;

&lt;p&gt;So far, all of the responses I’ve gotten back have been really nice!  One guy offered to come in and run the machine for us!  &lt;a href=&quot;https://amzn.to/2CFRqlZ&quot;&gt;P.S. You should go buy their cake frosters.  I helped design them, they’re cool, and they were created by really nice people.&lt;/a&gt; #AfilliateLink #ShamelessPlug #DontCare.  Do me a favor and &lt;em&gt;don’t&lt;/em&gt; buy the knock-offs from the companies in China.  They’re stealing sales from this small, family-owned (patent-holding!) business, and it sucks.&lt;/p&gt;

&lt;p&gt;Anyways, all this to say that it usually feels bad to face an uncomfortable situation head-on, but it is almost always better than how it will feel to deal with it after it has festered and boiled over later.&lt;/p&gt;

&lt;p&gt;Let me know if you’ve got a situation like that where you wish you would have handled it earlier rather than avoiding it (if it’s not too personal).  I want to hear about it!&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Oct 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/10/12/uncomfortable-things/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/10/12/uncomfortable-things/</guid>
        
        <category>soft-skills</category>
        
        <category>reflection</category>
        
        
      </item>
    
      <item>
        <title>File-Specific Vim Configuration</title>
        <description>&lt;p&gt;It seems like an indicator of a powerful application if you can use it for a long time without any problems and then suddenly discover useful features that add to your enjoyment or productivity that you didn’t even know existed.  This happens to me a lot with the Microsoft Office suite (imagine the look of boyish glee on my face as I discovered conditional formatting in Excel).  This also happens to me in Vim all. the. time.  Granted, this may be more because of a more specialized interface and low discoverability.  But, it’s still like an Easter egg hunt that you come across that you weren’t expecting because it’s the middle of October!&lt;/p&gt;

&lt;p&gt;So here’s the #spoopy Halloween egg for today: &lt;strong&gt;Language-Specific Vim Configuration&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-tip&quot;&gt;The Tip&lt;/h2&gt;

&lt;p&gt;Have you ever wanted to have some custom functions, settings, or key-bindings, but only for a specific language, without losing the ability to use those keybindings when working on other languages?  Or (like in my case), multiple languages have a “build” command, but the command is different for each language, and it would be nice to have &lt;code&gt;&amp;lt;leader&amp;gt;b&lt;/code&gt; do the building for each language so I don’t have to learn a million different muscle memories.&lt;/p&gt;

&lt;h2 id=&quot;introducing-the-ftplugin-directory&quot;&gt;Introducing the &lt;code&gt;ftplugin&lt;/code&gt; Directory&lt;/h2&gt;

&lt;p&gt;Inside your home directory, there is a &lt;code&gt;.vim&lt;/code&gt; directory.  Inside this &lt;code&gt;.vim&lt;/code&gt; directory, you can put a directory called &lt;code&gt;ftplugin&lt;/code&gt; (short for “file-type plugin”).  Inside &lt;em&gt;this&lt;/em&gt; directory, you can put &lt;code&gt;&amp;lt;language&amp;gt;.vim&lt;/code&gt; files for each language you’d like to configure for.  For instance, the plugin for the Rust language  provides the commands &lt;code&gt;:CBuild&lt;/code&gt; and &lt;code&gt;CRun&lt;/code&gt;, but no keymappings.  (I’m learning Rust, my first compiled language – pray for me)  So, I created a &lt;code&gt;~/.vim/ftplugin/rust.vim&lt;/code&gt; file, and right now, all it has are these contents:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-viml&quot;&gt;nnoremap &amp;lt;Leader&amp;gt;b :CBuild&amp;lt;Enter&amp;gt;
nnoremap &amp;lt;Leader&amp;gt;r :CRun&amp;lt;Enter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’m sure I’ll add more to it as I come up with more shortcuts and handy little settings, but that’s all I really wanted right now.&lt;/p&gt;

&lt;h2 id=&quot;clutter-free-configuration&quot;&gt;Clutter-Free Configuration&lt;/h2&gt;

&lt;p&gt;That’s the whole tip!  I thought it was neat and wanted to share it.  I like that you can separate things out into different files so that you don’t end up with one long convoluted &lt;code&gt;.vimrc&lt;/code&gt; file.  If you have any cool language-specific customizations or key-mappings that save you time, share them with me!&lt;/p&gt;

&lt;p&gt;Happy configuring!&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Oct 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/10/06/file-specific-vim-config/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/10/06/file-specific-vim-config/</guid>
        
        <category>vim</category>
        
        <category>tools</category>
        
        
      </item>
    
      <item>
        <title>Binary and Hexadecimal: Part 2 - Conversions</title>
        <description>&lt;p&gt;In the last artical, we discovered the sheer joy of counting in &lt;em&gt;two&lt;/em&gt; – count ‘em, two! – new number systems: Binary and Hexadecimal.&lt;/p&gt;

&lt;p&gt;But just being able to count is only the first step.  To truly unlock the power of these number systems, you’ve got to be able to convert between them.  In the event that you know how to use a search engine, then you already know how to type ‘convert 11001 to decimal.’  But, for quick conversions (and for the fun of it), it’s good to know how it all fits together.&lt;/p&gt;

&lt;h2 id=&quot;a-note-on-notation&quot;&gt;A Note on Notation&lt;/h2&gt;

&lt;p&gt;Sometimes you might see people denote binary numbers starting with &lt;code&gt;0b&lt;/code&gt;, as in &lt;code&gt;0b11011101&lt;/code&gt;.  This is just to clue you in to what kind of number you’re looking at.  If you’re looking at a hex number, it might start with &lt;code&gt;0x&lt;/code&gt; as in &lt;code&gt;0xFCDE23&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;binary---decimal&quot;&gt;Binary -&amp;gt; Decimal&lt;/h2&gt;

&lt;p&gt;If you remember, in the last article, we talked about how the digits in binary represent &lt;strong&gt;powers of two&lt;/strong&gt;.  Here’s a nice table to remind you:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Digit (Power of 2)&lt;/th&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;0&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Decimal Value&lt;/td&gt;
      &lt;td&gt;128&lt;/td&gt;
      &lt;td&gt;64&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;So, when you come across a binary number, all you have to do is figure out the decimal value of each digit and add up the total!  Let’s say you were converting the binary number &lt;code&gt;1101 0011&lt;/code&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Binary Digit&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;TOTAL&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Decimal Value&lt;/td&gt;
      &lt;td&gt;128&lt;/td&gt;
      &lt;td&gt;64&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;211&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;That’s right!  &lt;code&gt;1101 0011&lt;/code&gt; in binary is equal to &lt;code&gt;211&lt;/code&gt; in decimal.  If you get confused about the value of a particular digit, one way to figure it out is to lay out a list of numbers on a piece of paper, starting from the right and going left.  Start with 1, and double each next digit.  One doubled is two, two doubled is four, four doubled is 8, etc.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;128 &amp;lt;- 64 &amp;lt;- 32 &amp;lt;- 16 &amp;lt;- 8 &amp;lt;- 4 &amp;lt;- 2 &amp;lt;- 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then take a look at the binary number you have.  Anywhere there’s a zero, cross that number out!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;128 &amp;lt;- 64 &amp;lt;- XX &amp;lt;- 16 &amp;lt;- XX &amp;lt;- XX &amp;lt;- 2 &amp;lt;- 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can add up whatever’s left.&lt;/p&gt;

&lt;h2 id=&quot;decimal-to-binary&quot;&gt;Decimal to Binary&lt;/h2&gt;

&lt;p&gt;To go from decimal to binary is a little harder to do.  There are a couple of different ways to do it.  I’ll give you both ways, and you can decide if there’s one that you like better.&lt;/p&gt;

&lt;h3 id=&quot;the-subtraction-method&quot;&gt;The Subtraction Method&lt;/h3&gt;

&lt;p&gt;I personally like this method better.  It fits better with my brain.  This version works well if you can remember the powers of two pretty well.  Keep in mind that we’ll be filling in the binary digits from left (biggest) to right (smallest).  I’ll give you a step-by-step guide, and pair it with an example.  It works like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start with the number you want to convert.  We’ll use the same 211 that we used in the last section so we can check our work.&lt;/li&gt;
  &lt;li&gt;Find the &lt;strong&gt;biggest&lt;/strong&gt; power of two that is &lt;strong&gt;less than&lt;/strong&gt; the number to convert.  In this case, 256 (2^8) is too big.  128 (2^7), though, is less than 211, so that’s just right.&lt;/li&gt;
  &lt;li&gt;Mark a 1 on the piece of paper (or screen) for that power of two.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Subtract&lt;/strong&gt; that power of two (128) from your main number.  In this case the result is 211 - 128 = 83.&lt;/li&gt;
  &lt;li&gt;Step down by one power of two.  2^6 is 64.  If 64 &lt;strong&gt;is less than&lt;/strong&gt; the current value (it is), mark a 1 for that power of two and subtract again.  For the example, we’ll mark 1 and get 83 - 64 =  19.&lt;/li&gt;
  &lt;li&gt;Carry on down the powers of two.  For any powers, if the power is &lt;strong&gt;greater than&lt;/strong&gt; your current number (so that you can’t subtract and get a positive result), mark a zero for that power and don’t subtract anything.  Move on to the next power of two.  In our example, 32 is the next power of two, and it’s bigger than 19.  So, mark a zero and move on.&lt;/li&gt;
  &lt;li&gt;The next power of two is 16, which is smaller than 19.  So mark a 1 and do 19 - 16 = 3.&lt;/li&gt;
  &lt;li&gt;Next is 8.  8 is bigger than 3, so mark a zero and don’t subtract.&lt;/li&gt;
  &lt;li&gt;Next is 4.  4 is bigger than 3, so mark a zero and don’t subtract.&lt;/li&gt;
  &lt;li&gt;Next is 2.  2 is less than 3, so mark a 1 and subtract: 3 - 2 = 1.&lt;/li&gt;
  &lt;li&gt;Next is 1.  1 is equal to 1, so mark a 1 and subtract: 1 - 1 = 0.&lt;/li&gt;
  &lt;li&gt;Once you get to zero, stop!  You’re done.  Take a look at your marks.  You should have:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;1 1 0 1 0 0 1 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Does this match what we had in the section above?  Yes!  Success!&lt;/p&gt;

&lt;p&gt;If this way doesn’t seem like it makes much sense, that’s totally fine.  There’s one more way that doesn’t require you to remember the powers of 2.&lt;/p&gt;

&lt;h3 id=&quot;the-other-way-division&quot;&gt;The Other Way: Division&lt;/h3&gt;

&lt;p&gt;For this method, we’re filling in binary digits from &lt;strong&gt;right (smallest) to left (biggest)&lt;/strong&gt;.  We’ll use 211 again.  For each of these calculations, we’ll be dividing by 2 (floor division with a remainder).  Be sure to keep track of the result value &lt;em&gt;and&lt;/em&gt; the remainder for each one.  The remainder represents the binary digit, and the result value is what we’ll use for the next round of calculations.  Here we go:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start with your number.  Divide by 2.  Is there a remainder of 1?  If so, mark 1.  Otherwise, mark 0.  In our case, 211 / 2 = 105, remainder 1.  So, we remember 105, and we mark a 1.&lt;/li&gt;
  &lt;li&gt;Repeat.  105 / 2 = 52, remainder 1.  Remember 52, mark a 1.&lt;/li&gt;
  &lt;li&gt;52 / 2 = 26, remainder 0.  Remember 26, mark a 0.&lt;/li&gt;
  &lt;li&gt;26 / 2 = 13, remainder 0.  Remember 13, mark a 0.&lt;/li&gt;
  &lt;li&gt;13 / 2 = 6, remainder 1.  Remember 6, mark a 1.&lt;/li&gt;
  &lt;li&gt;6 / 2 = 3, remainder 0.  Remember 3, mark a 0.&lt;/li&gt;
  &lt;li&gt;3 / 2 = 1, remainder 1.  Remember 1, mark a 1.&lt;/li&gt;
  &lt;li&gt;1 / 2 = 0, remainder 1.  Mark a 1, and we’re done!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All together (again, from &lt;strong&gt;right to left this time&lt;/strong&gt;), our binary digits are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1 1 0 1 0 0 1 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And again we have &lt;strong&gt;SWEET SWEET VICTORY!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;hexadecimal-to-decimal&quot;&gt;Hexadecimal to Decimal&lt;/h2&gt;

&lt;p&gt;The really cool thing about this is that you &lt;em&gt;already know how to do this one&lt;/em&gt; – you just don’t know it yet.  It’s the same as the binary-to-decimal conversion.  Each place has a value, and you add up all the digits!  This time, though, each place is a power of 16.  Honestly, for hexadecimal values longer than two digits, I always use a calculator or some other tool.  I only remember the first three powers of 2: 16^0 = 1, 16^1 = 16, and 16^2 = 256.  &lt;em&gt;256, you say!  That&lt;/em&gt; is &lt;em&gt;an easy number to remember.  I’ll remember that for all time!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s do a short example and then a long one.  First, let’s try converting &lt;code&gt;6C&lt;/code&gt; to decimal.  We have 6 in the “16’s” place and &lt;code&gt;C&lt;/code&gt; (or 12) in the “1’s” place.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Hex Digit&lt;/th&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;TOTAL&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Decimal Value&lt;/td&gt;
      &lt;td&gt;6 * 16^1 = 96&lt;/td&gt;
      &lt;td&gt;12 * 16^0 = 12&lt;/td&gt;
      &lt;td&gt;108&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;That’s right!  &lt;code&gt;6C&lt;/code&gt; in binary is equal to 108.&lt;/p&gt;

&lt;p&gt;You’ll notice that two hex digits can include all of the values between 0 and 255.  For those paying attention, you might recognize that 0 - 255 are also the values that can be shown in 8 binary digits – or one byte!  This is useful because things like CSS commonly use hex digits when referring to values in that range.  And now you have the power to convert &lt;code&gt;#BADA55&lt;/code&gt; as a hex color into RGB values:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;R: BA = &lt;code&gt;11*16 + 10*1&lt;/code&gt; = 186&lt;/li&gt;
  &lt;li&gt;G: DA = &lt;code&gt;13*16 + 10*1&lt;/code&gt; = 218&lt;/li&gt;
  &lt;li&gt;B: 55 = &lt;code&gt;5*16 + 5&lt;/code&gt; = 85&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So we know that &lt;code&gt;#BADA55&lt;/code&gt; is a color with quite a bit of green, medium-high amounts of red, and not a whole lot of blue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bada55.jpeg&quot; alt=&quot;The #BADA55 color&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VINDICATION!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;decimal-to-hexadecial&quot;&gt;Decimal to Hexadecial&lt;/h2&gt;

&lt;p&gt;Similarly, the process for converting decimal numbers to hexadecimal is the same as converting binary to decimal.  Either of the binary methods can be used (subtraction or division).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Once we go over how to convert binary to hex and back, you might decide it’s easier to convert hex to binary first and then convert binary to decimal.  However you want to do it!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We’ll do a division example just to confirm.  Let’s convert 108 to hexadecimal to check our answer.  Remember again that, since we’re doing the division method, we’ll have to write down the hex digits from &lt;strong&gt;right to left&lt;/strong&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start with 108.  Divide by 16.  108 / 16 = 6, remainder 12.  The right-most digit is 12, or &lt;code&gt;C&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;6 / 16 = 0, remainder 6.  The next digit is 6.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Altogether, 108 in hex is &lt;code&gt;6C&lt;/code&gt;!  Success again!&lt;/p&gt;

&lt;h2 id=&quot;hexadecimal-to-binary&quot;&gt;Hexadecimal to Binary&lt;/h2&gt;

&lt;p&gt;The nice thing about hexadecimal and binary is that 16 is a multiple of 2.  In fact, 16 = 2^4.  When converting hex to binary, you can essentially interchange each hex digit for 4 digits of binary and vice versa.  &lt;em&gt;How&lt;/em&gt; you convert that single digit of hex to 4 digits of binary is kind of up to you.  When I do it, it comes down to a combination of a little memorization and converting through to decimal.&lt;/p&gt;

&lt;p&gt;Let’s take a look.  Let’s convert &lt;code&gt;DB&lt;/code&gt; from hex to binary.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;D&lt;/code&gt; in hex is 13 in decimal.&lt;/li&gt;
  &lt;li&gt;Next we figure out which 4 binary digits we need to make 13.  13 is 8 + 4 + 1.  Those places in binary are: &lt;code&gt;1101&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Thus, the binary conversion for the first digit, &lt;code&gt;D&lt;/code&gt;, is &lt;code&gt;1101&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Next digit is &lt;code&gt;B&lt;/code&gt;.  Same process.  &lt;code&gt;B&lt;/code&gt; is 11 in decimal.&lt;/li&gt;
  &lt;li&gt;Making 11 in binary: 8 + 2 + 1, or &lt;code&gt;1011&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Thus, B = &lt;code&gt;1011&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Soooo, combining everything, &lt;code&gt;DB&lt;/code&gt; in hex is the same as &lt;code&gt;1101 1011&lt;/code&gt;.  Did I plan for the binary number to be so symmetric?  No.  Will I claim credit for it?  Absolutely.&lt;/p&gt;

&lt;h2 id=&quot;binary-to-hexadecimal&quot;&gt;Binary to Hexadecimal&lt;/h2&gt;

&lt;p&gt;Going the other way is exactly the opposite process.  Once again, we’ll be converting &lt;code&gt;1101 1011&lt;/code&gt; from binary to hex to check our work.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Let’s break our binary number into chunks of 4 (like I’ve been doing): &lt;code&gt;1101   |    1011&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;And now we convert the first chunk to decimal: &lt;code&gt;1101 = 8*1 + 4*1 + 2*0 + 1*1 = 13&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;13 in decimal converts to &lt;code&gt;D&lt;/code&gt; in hex.  Our first digit is &lt;code&gt;D&lt;/code&gt;!  (As expected.)&lt;/li&gt;
  &lt;li&gt;The next chunk of binary: &lt;code&gt;1011 = 8*1 + 4*0 + 2*1 + 1*1&lt;/code&gt; = 11.&lt;/li&gt;
  &lt;li&gt;11 in decimal converts to &lt;code&gt;B&lt;/code&gt; in hex.  Our second digit is &lt;code&gt;B&lt;/code&gt;!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the end, our final hex number ends up being &lt;code&gt;DB&lt;/code&gt;.  Just like we thought.&lt;/p&gt;

&lt;h2 id=&quot;the-true-power-of-powers&quot;&gt;The True Power… of Powers&lt;/h2&gt;

&lt;p&gt;And that’s it!  Go forth and conquer numbers everywhere.  Amaze your friends by speaking to them in binary (or, possibly, get mocked for being a GIANT NERD 😁), streamline your CSS coding by eyeballing hex codes, and feel great about understanding how computers and math work just a little better.  A lot of these conversion skills will carry over to other number systems: try looking up Octal and doing some conversions to and from that!&lt;/p&gt;

&lt;p&gt;As always, the math can be a bit intimidating, so if you have any questions or don’t feel 100% confident in your number-fu, feel free to reach out to me and I’d be happy to show some more examples and help you get up to speed.&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Sep 2018 11:22:19 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/09/16/binary-and-hexadecimal-part-2-conversions/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/09/16/binary-and-hexadecimal-part-2-conversions/</guid>
        
        <category>computer-science</category>
        
        <category>basics</category>
        
        <category>beginner</category>
        
        
      </item>
    
      <item>
        <title>Binary and Hexadecimal: Part 1</title>
        <description>&lt;p&gt;There are two reasons why I’ve seen people avoid learning how binary and hexadecimal number systems work: either they’re intimidated because they don’t consider themselves “math people,” or they think it’s a waste because “why am I ever going to need this?”  I really think there are some neat uses to these alternative numbering systems… and they’re fun!&lt;/p&gt;

&lt;p&gt;I’m definitely going to try to make them as accessible as I can in this post and take all of the intimidation out of them.  You don’t need to be a “math person.”  As long as you’re a “person who can count on their fingers,” you’ll be OK.  If you don’t have fingers, find a friend and use their fingers.  If you don’t have fingers and don’t have a friend, then today is your lucky day!  Now you’ve got three friends: Binary, Hexadecimal, and me!  And you can count them on &lt;em&gt;my&lt;/em&gt; fingers if you want.&lt;/p&gt;

&lt;h2 id=&quot;starting-from-the-beginning-decimal&quot;&gt;Starting from the Beginning: Decimal&lt;/h2&gt;

&lt;p&gt;Let’s go back to elementary school for a second.  How does counting work?  Well, we have ten shapes we can use to represent values: numbers!&lt;/p&gt;

&lt;p&gt;0	1	2	3	4	5	6	7	8	9&lt;/p&gt;

&lt;p&gt;Zero through nine is ten digits.  These are the &lt;em&gt;only&lt;/em&gt; digits we count with – at least if we’re using &lt;a href=&quot;https://en.wikipedia.org/wiki/Arabic_numerals&quot;&gt;Arabic Numerals&lt;/a&gt;.  If you’re not using Arabic Numerals but still using the decimal system, you’ll still have ten digits available to you.  They might just look a little different.&lt;/p&gt;

&lt;p&gt;So how do we count?  We start with the first digit available to us: 0.  Let’s count our first time, adding one to our total.  We still have 8 numerals we haven’t seen yet, so we move to the next one: 1.  Then 2.  Then 3.  And so on, until we get to 9.&lt;/p&gt;

&lt;p&gt;At that point, we’ve hit a snag.  We’ve run out of numerals!  So, what do we do?  We tally that round of counting 10 times by &lt;strong&gt;incrementing a new digit by one&lt;/strong&gt; and &lt;strong&gt;resetting that digit to 0.&lt;/strong&gt;  Now we’re at 10.  And we can start again, stepping through the numerals available to us: 11, 12, 13, 14, 15, 16, 17, 18, 19… Uh oh.  We’ve completed another round through all of the numerals.  So again, we increment our tally and increment the &lt;em&gt;second digit&lt;/em&gt;, the one on the left, to mark that fact.  And we reset our right-most digit to zero.&lt;/p&gt;

&lt;p&gt;What happens when our &lt;em&gt;second digit&lt;/em&gt; runs through all of the available numerals: 97, 98, 99… we’re getting ready to increment the right-most digit, which means we should be resetting it to zero and incrementing the second digit, but we’re out of numerals to use in the second spot.  No problem here either, we’ll just add another digit to celebrate that fact!  Now we have a 1 &lt;em&gt;in the third digit location&lt;/em&gt;: 100.  And so it goes.  Congratulations, you still know how to count.&lt;/p&gt;

&lt;p&gt;But, do you see the idea?  We have 10 different numerals the show, and as each digit exhausts the numerals available to it, it increments the digit to the left of it and resets.  That’s how the rest of the number systems work – they just have different amounts of numerals!  With 10 digits, we’re using something called the &lt;strong&gt;“Decimal”&lt;/strong&gt; (deci- means 10) system.&lt;/p&gt;

&lt;h2 id=&quot;so-what-is-binary-then&quot;&gt;So What is Binary Then?&lt;/h2&gt;

&lt;p&gt;Well, you &lt;em&gt;might&lt;/em&gt; guess from the name “BI-nary” (bi- meaning two) that there are two available numerals.  And you’re right!  You may have even heard before what the two numerals are.  0 and 1.  That’s right!  As you can imagine, with significantly fewer numerals, we’re going to rack up digits pretty quickly.  Let’s try counting in binary now.  I think you’re ready.&lt;/p&gt;

&lt;p&gt;Don’t forget that the same basic rules of counting apply.  We’ll start with zero.&lt;/p&gt;

&lt;p&gt;0&lt;/p&gt;

&lt;p&gt;And then we’ll increment to the next available numeral.&lt;/p&gt;

&lt;p&gt;1&lt;/p&gt;

&lt;p&gt;And then we’ll increment to the next available numeral again– wait.  We’re already out of numerals!  What gives!?  That’s OK, we follow our counting rules and increment the next digit and reset our current digit.&lt;/p&gt;

&lt;p&gt;10&lt;/p&gt;

&lt;p&gt;And then we start again.&lt;/p&gt;

&lt;p&gt;11&lt;/p&gt;

&lt;p&gt;Oop!  Now we go to increment our right-most digit, but we’re out of numerals.  So we go to increment our &lt;em&gt;second&lt;/em&gt; right-most digit, but we’re out of numerals there too!  So we continue on to add a new digit and reset our other digits.&lt;/p&gt;

&lt;p&gt;100&lt;/p&gt;

&lt;p&gt;101&lt;/p&gt;

&lt;p&gt;110&lt;/p&gt;

&lt;p&gt;111&lt;/p&gt;

&lt;p&gt;Can you guess what happens next?&lt;/p&gt;

&lt;p&gt;1000!&lt;/p&gt;

&lt;p&gt;Now, have you been keeping track of our count?  How many times have we incremented?  I’m going to make a table, and, to make the ones and zeroes easier to see, I’m going to add some zeroes out in front of the number as placeholders.  It’s OK, though.  They don’t change anything.  The number 000000048 is still 48, right?&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Decimal Number&lt;/th&gt;
      &lt;th&gt;Increment Number&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0001&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0010&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0011&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0100&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0101&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0110&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0111&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1000&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/mechanical_gifs/comments/9cto4l/how_simple_pieces_of_wood_and_hinges_makes_a/&quot;&gt;This is a neat demonstration.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How does that feel?  You’re counting in binary!  You’re practically a computer!  Quietly, to yourself, say “bleep bloop.”  No one will know.  But we will know.  And it’ll make you feel accomplished.  :)&lt;/p&gt;

&lt;p&gt;Now, there’s one more pattern that you may not have noticed, that makes binary even more magical.  Check out the values of the increment number when there is only &lt;em&gt;one 1&lt;/em&gt; and everything else is zero:&lt;/p&gt;

&lt;p&gt;1, 2, 4, and 8.&lt;/p&gt;

&lt;p&gt;Do you see a pattern?  Let me show you some other binary numbers and their decimal equivalents.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Binary&lt;/th&gt;
      &lt;th&gt;Decimal&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0000 0001&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0000 0010&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0000 0100&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0000 1000&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0001 0000&lt;/td&gt;
      &lt;td&gt;16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0010 0000&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0100 0000&lt;/td&gt;
      &lt;td&gt;64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1000 0000&lt;/td&gt;
      &lt;td&gt;128&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Don’t worry about the space in between the binary digits.  I added it in there to make things easier to read.  Otherwise, if you read binary too long, your eyeballs start to fall out.  The important thing is the &lt;em&gt;pattern&lt;/em&gt;.  Do you see it?  Every binary number that’s just one 1 and the rest 0’s is a power of 2.  Or, put another way, the decimal numbers are doubling each time!  That’s right, everytime you go up a digit (i.e. shifting things left one place) in binary, you double!&lt;/p&gt;

&lt;p&gt;But, when you think about it, it makes sense right?  Let’s look at the decimal numbers that are one 1 followed by zeroes.&lt;/p&gt;

&lt;p&gt;1
10
100
1000
10000&lt;/p&gt;

&lt;p&gt;Each one is the previous one, multiplied by 10, in the &lt;strong&gt;deci-&lt;/strong&gt; mal system.  In the &lt;strong&gt;bi-&lt;/strong&gt; nary system, every one is the previous one multipled by 2.  Do you see?  Don’t worry if not.  We’ll do more with that later, and we’ll get more practice.&lt;/p&gt;

&lt;h2 id=&quot;hexadecimal-too&quot;&gt;Hexadecimal Too?&lt;/h2&gt;

&lt;p&gt;Don’t worry.  Now that you’ve got binary nailed down, &lt;strong&gt;hexa-&lt;/strong&gt; (meaning 6) &lt;strong&gt;-deci-&lt;/strong&gt; (meaning 10) &lt;strong&gt;mal&lt;/strong&gt; should be a snap.  Hexadecimal has a &lt;strong&gt;base&lt;/strong&gt; of 16.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Wait, wait, wait.  There’s only 10 numerals.  How are we going to show 16 different “shapes?”  Are we just going to make up new numbers?  I thought you said there wasn’t going to be hard math!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Don’t worry.  We’re not making up any new shapes, and chances are, you’ve probably seen hexadecimal out in the wild somewhere.  You’re right about one thing, though: we need more “numerals” to get our 16 “shapes.”  But, luckily you know these shapes: letters!  That’s right, the numerals in hexadecimal are:&lt;/p&gt;

&lt;p&gt;0 1 2 3 4 5 6 7 8 9 A B C D E F&lt;/p&gt;

&lt;p&gt;(I’ll pause while the skeptical among you take the time to count.  There’s 16.  I’ll wait.)&lt;/p&gt;

&lt;p&gt;Satisfied?  Good.  Now let’s start counting.&lt;/p&gt;

&lt;p&gt;0
1
2
3
4
5
6
7
8
9&lt;/p&gt;

&lt;p&gt;What do we do?  Well, we’ve got more “numerals,” right?  We keep going!&lt;/p&gt;

&lt;p&gt;A
B
C
D
E
F&lt;/p&gt;

&lt;p&gt;Aaaaand now we’re out of numerals.  Increment the next digit and reset!&lt;/p&gt;

&lt;p&gt;10
11
12
13&lt;/p&gt;

&lt;p&gt;And so on.  And when that second digit gets up there after much more counting?&lt;/p&gt;

&lt;p&gt;F8
F9
FA
FB
FC
FD
FE
FF…
…
100!&lt;/p&gt;

&lt;h2 id=&quot;intermission&quot;&gt;Intermission&lt;/h2&gt;

&lt;p&gt;See?  Hopefully that wasn’t so terrible.  And you counted in both binary and hexadecimal!  Congratulations!  I now confer upon you the title of budding computer scientist.  We can’t really do much useful with this new knowledge yet, though.  In the next post, I’ll show you how to convert back and forth, and what cool things that enables us to do.&lt;/p&gt;

&lt;p&gt;This can be a tough topic, and I don’t want it to be intimidating or scary at all.  If I missed something or it’s not quite clicking, my DM’s are open!  Shoot me a message and we’ll talk about what’s bugging you.&lt;/p&gt;

&lt;p&gt;Happy counting!&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Sep 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/09/10/binary-hexadecimal-part-1/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/09/10/binary-hexadecimal-part-1/</guid>
        
        <category>computer-science</category>
        
        <category>basics</category>
        
        <category>beginner</category>
        
        
      </item>
    
      <item>
        <title>Personal Update: Back At It</title>
        <description>&lt;p&gt;&lt;em&gt;Cover image by Feliphe Schiarolli on Unsplash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hi!  I haven’t written a blog post in a while.  In fact, I’m way behind my pace for the last two months.  I wanted to bang at least 200 words out to keep my writing muscle in shape and get things going again.  I’ve got a couple of posts planned, but I’m sure more inspiration will come.&lt;/p&gt;

&lt;h2 id=&quot;back-to-school&quot;&gt;Back to School!&lt;/h2&gt;

&lt;p&gt;On a personal note, part of why I’ve been busy &lt;em&gt;not&lt;/em&gt; writing blog posts is because last week I had my first lecture of my Master’s in Computer Science (focus on Intelligent Systems, Robotics, Systems Administration, and a bit of Security/Forensics)!  I’m super excited, because, honestly, I really like school.  I’m going to take a bunch of classes over the next two years, learn a lot, get a whole bunch of fodder for more blog posts, graduate (God willing!), and once I get my Master’s, hopefully somebody somewhere will let me teach classes on something.  That’s about as far as I got on the plan.  Anyways, wish me luck, and enjoy the deluge of CS-powered blog posts that are coming your way.&lt;/p&gt;

&lt;h2 id=&quot;punch-cards&quot;&gt;Punch Cards&lt;/h2&gt;

&lt;p&gt;Last week, I didn’t have much time to write a post because I was writing a research paper on the early punch cards used to program computers.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It was pretty punchy, but it had a few holes in it. HA!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As it turns out, the reason why you probably limit your code lines to 80 characters wide is because of how long U.S. money was in the 1880’s.  A guy named &lt;a href=&quot;https://en.wikipedia.org/wiki/Herman_Hollerith&quot;&gt;Herman Hollerith&lt;/a&gt; created punch cards for the U.S. Census Bureau to help speed up processing the census data, and he had a bunch of U.S. Treasury money boxes laying around, so he cut his punch cards to fit in those boxes.  With the spacing of the holes on the card, it left him with 80 columns.  Today, 80 columns is the preferred max line length of the Linux kernel.  Python says try to keep most lines under 72 (to have a nice margin), but definitely limit to 79 columns.  Does every team work like this?  No.  But it’s neat that we work on a standard that programmers have been adhering to one way or another since 1880.  Feels pretty cool, right?&lt;/p&gt;

&lt;p&gt;This week we learned about Binary and Hexadecimal.  I knew about it already thanks to &lt;a href=&quot;https://dev.to/vaidehijoshi/hexes-and-other-magical-numbers&quot;&gt;Vaidehi Joshi’s awesome series&lt;/a&gt;.  I get the feeling I’ll be referring to that series more and more as I go through more classes.  But, expect a post from me on Binary, Hex, and Decimal numbers in the next little while.&lt;/p&gt;

&lt;p&gt;More posts soon!&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Sep 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/09/06/back-at-it/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/09/06/back-at-it/</guid>
        
        <category>update</category>
        
        
      </item>
    
  </channel>
</rss>
