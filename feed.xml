<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>assert_not magic?</title>
    <description>Programming blog by Ryan Palo.  Code is not magic, and anyone can do it.  Python, Ruby, JavaScript, shell scripting, systems, the web, and more!
</description>
    <link>https://assertnotmagic.com</link>
    <atom:link href="https://assertnotmagic.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 04 Jul 2018 08:35:53 -0700</pubDate>
    <lastBuildDate>Wed, 04 Jul 2018 08:35:53 -0700</lastBuildDate>
    <generator>Jekyll v3.5.0</generator>
    
      <item>
        <title>Python Has a Startup File!</title>
        <description>&lt;p&gt;&lt;em&gt;Cover Photo by Uriel Soberanes on Unsplash&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, I want to be clear.  &lt;em&gt;I&lt;/em&gt; knew that Python has a startup customization file this whole time I’ve been using Python.  &lt;em&gt;I&lt;/em&gt; didn’t just find out about it this week.  I mean, of &lt;em&gt;course&lt;/em&gt; Python has a startup file.  Everything has a startup file!  I just want to make sure &lt;em&gt;you&lt;/em&gt; know about it.  &lt;em&gt;(Only joking, I had no idea this was a thing.)&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Before you bring it up, I already know about &lt;a href=&quot;https://bpython-interpreter.org/screenshots.html&quot;&gt;bPython&lt;/a&gt;, the awesome, syntax-highlighty, tab-completey, auto-indenty, wonderful drop in replacement for the regular Python interpreter.  I use it all the time.  But that’s not what this blog post is about.  P.S. if you didn’t know about bPython, I highly recommend it (Windows users’ mileage may vary).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;pythonstartup&quot;&gt;$PYTHONSTARTUP&lt;/h2&gt;

&lt;p&gt;If you have the environment variable &lt;code&gt;$PYTHONSTARTUP&lt;/code&gt; set to a valid Python file, that file will get run when starting up the Python interpreter.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ export PYTHONSTARTUP=&quot;~/.config/pythonrc.py&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don’t worry about the name of the file.  Name it whatever you want!  &lt;code&gt;python_startup.py&lt;/code&gt;, or just &lt;code&gt;pythonrc&lt;/code&gt;.  You can also put it in whatever directory you want.  Just make sure your &lt;code&gt;$PYTHONSTARTUP&lt;/code&gt; environment variable matches.  Then, you can put anything you want into that file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# ~/.config/pythonrc.py
a = &quot;Wahoo!&quot;
print(&quot;Soup&quot;)
try:
    import numpy as np
except ImportError:
    print(&quot;Could not import numpy.&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Try running your Python interpreter.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python  # or python3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you should see something similar to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;Python 3.7.0 (default, Jun 29 2018, 20:14:27)
[Clang 9.0.0 (clang-900.0.39.2)] on darwin
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
Soup
&amp;gt;&amp;gt;&amp;gt; np
&amp;lt;module 'numpy' from '/usr/local/lib/python3.7/site-packages/numpy/__init__.py'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; np.zeros((3, 2))
array([[0., 0.],
       [0., 0.],
       [0., 0.]])
&amp;gt;&amp;gt;&amp;gt; a
'Wahoo!'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can import commonly used libraries, create variables for yourself, and more.&lt;/p&gt;

&lt;h2 id=&quot;sysps1-and-sysps2&quot;&gt;sys.ps1 and sys.ps2&lt;/h2&gt;

&lt;p&gt;One neat thing to do is to set the &lt;code&gt;sys.ps1&lt;/code&gt; and &lt;code&gt;sys.ps2&lt;/code&gt; variables, which control your Python prompts.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# ~/.config/pythonrc.py

import sys

sys.ps1 = &quot;🌮&quot;
sys.ps2 = &quot;💩&quot;

# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, back in the interactive REPL:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;🌮 for i in range(10):
💩     print(&quot;I am a mature adult.&quot;)
💩
I am a mature adult.
I am a mature adult.
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In fact, you can even set &lt;code&gt;sys.ps1&lt;/code&gt; and &lt;code&gt;sys.ps2&lt;/code&gt; to objects that aren’t even strings!  If they’re not strings, Python will call &lt;code&gt;str(obj)&lt;/code&gt; on them.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# ~/.config/pythonrc.py

import sys
from datetime import datetime

class CustomPS1:
    def __init__(self):
        self.count = 0

    def __str__(self):
        self.count += 1
        return f&quot;({self.count}) {datetime.now().strftime('%H:%m %p')} &amp;gt; &quot;

sys.ps1 = CustomPS1()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And in the interpreter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;(1) 10:06 AM &amp;gt; for i in range(10):
...     print(&quot;Am I cool now?&quot;)
...
Am I cool now?
Am I cool now?
# ...
(2) 11:06 AM &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;the--i-flag&quot;&gt;The -i Flag&lt;/h2&gt;

&lt;p&gt;In addition to these new superpowers, you can temporarily make &lt;em&gt;any&lt;/em&gt; Python script your startup script.  This could come in really handy for some interactive debugging.  Let’s say you’re working on a project and you have a script that defines some functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# cool_script.py

def what_time_is_it():
    return &quot;Party Time&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use the &lt;code&gt;-i&lt;/code&gt; flag when you run the Python interpreter to use &lt;code&gt;cool_script.py&lt;/code&gt; as your startup file instead of your usual one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;$ python -i cool_script.py
&amp;gt;&amp;gt;&amp;gt; what_time_is_it()
'Party Time'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you do some cool things with your startup file, share it with me!  I want to know about it!  Happy coding!&lt;/p&gt;
</description>
        <pubDate>Sat, 30 Jun 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/06/30/python-startup-file/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/06/30/python-startup-file/</guid>
        
        <category>python</category>
        
        <category>tricks</category>
        
        
      </item>
    
      <item>
        <title>Ascii Wall-E for Your Terminal</title>
        <description>&lt;p&gt;Two things.  1. I’m trying out the &lt;a href=&quot;https://fishshell.com/&quot;&gt;fish shell&lt;/a&gt;.  So far I like it!  2. I made Wall-E!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/wall-e.jpg&quot; alt=&quot;Wall-E in my terminal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On their website, the fish shell has a neat ascii picture of a fish.  I saw examples of people putting that in their initial greeting when the terminal opens up.  I thought that was neat, but I wanted something more my style.  So I spent a few &lt;em&gt;cough&lt;/em&gt; &lt;small&gt;hours&lt;/small&gt; &lt;em&gt;cough&lt;/em&gt; making Wall-E, and now he says hello to me whenever I open up my terminal!&lt;/p&gt;

&lt;p&gt;In case you’re curious, I put the code &lt;a href=&quot;https://gist.github.com/rpalo/cd77a94616b0a30d1c2a2f18d6bc7581&quot;&gt;into a gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Challenge!  Make your own ASCII art and share it.&lt;/p&gt;

&lt;p&gt;Happy Saturday!&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Jun 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/06/23/ascii-wall-e/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/06/23/ascii-wall-e/</guid>
        
        <category>showdev</category>
        
        <category>fish</category>
        
        <category>art</category>
        
        
      </item>
    
      <item>
        <title>Bash Brackets Quick Reference</title>
        <description>&lt;p&gt;&lt;em&gt;Cover image credit: &lt;a href=&quot;https://www.fonts.com/content/learning/fontology/level-4/fine-typography/braces-and-brackets&quot;&gt;Fonts.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Bash has lots of different kinds of brackets.  Like, many much lots.  It adds meaning to doubling up different brackets, and a dollar sign in front means something even more different.  &lt;em&gt;And&lt;/em&gt;, the brackets are used differently than many other languages.  I constantly find myself doing a 5-second search for which one is the right one to do since I’m not writing Bash scripts all the time.  So here, I’m going to lay them all out and then print this article out and staple it to the wall by my desk.  Possibly with a decorative frame.  So here we go.&lt;/p&gt;

&lt;p&gt;A tiny note on all of these is that Bash generally likes to see a space between round or square brackets and whatever’s inside.  It doesn’t like space where curly braces are concerned.  We’ll go through in order of net total squigglyness (NTS score).&lt;/p&gt;

&lt;h2 id=&quot;-single-parentheses-&quot;&gt;( Single Parentheses )&lt;/h2&gt;

&lt;p&gt;Single parenthesis will run the commands inside in a &lt;strong&gt;subshell&lt;/strong&gt;.  This means that they run through all of the commands inside, and then return a single exit code.  Any variables declared or environment changes will get cleaned up and disappeared.  Because it’s within a subshell, if you have it inside a loop, it will run a little slower than if you called the commands &lt;em&gt;without&lt;/em&gt; the parentheses.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;a='This string'
( a=banana; mkdir $a )
echo $a
# =&amp;gt; 'This string'
ls
# =&amp;gt; ...
# =&amp;gt; banana/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;-double-parentheses-&quot;&gt;(( Double Parentheses ))&lt;/h2&gt;

&lt;p&gt;This is for use in integer arithmetic.  You can perform assignments, logical operations, and mathematic operations like multiplication or modulo inside these parentheses.  However, do note that there is no output.  Any variable changes that happen inside them will stick, but don’t expect to be able to assign the result to anything.  If the result inside is &lt;strong&gt;non-zero&lt;/strong&gt;, it returns a &lt;strong&gt;zero&lt;/strong&gt; (success) exit code.  If the result inside is &lt;strong&gt;zero&lt;/strong&gt;, it returns an exit code of &lt;strong&gt;1&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;i=4
(( i += 3 ))
echo $i
# =&amp;gt; 7
(( 4 + 8 ))
# =&amp;gt; No Output
echo $?  # Check the exit code of the last command
# =&amp;gt; 0
(( 5 - 5 ))
echo $?
# =&amp;gt; 1

# Strings inside get considered 'zero'.
(( i += POO ))
echo $i
# =&amp;gt; 7

# You can't use it in an expression
a=(( 4 + 1 ))
# =&amp;gt; bash: syntax error near unexpected token '('
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;-angle-parentheses-&quot;&gt;&amp;lt;( Angle Parentheses )&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Thank you to &lt;a href=&quot;https://dev.to/ferricoxide&quot;&gt;Thomas H Jones II&lt;/a&gt; for &lt;a href=&quot;https://dev.to/ferricoxide/comment/3pdn&quot;&gt;this comment&lt;/a&gt; that inspired this section on Process Substitution&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is known as a &lt;em&gt;process substitution&lt;/em&gt;.  It’s a lot like a pipe, except you can use it anywhere a command expects a file argument.  And you can use multiple at once!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sort -nr -k 5 &amp;lt;( ls -l /bin ) &amp;lt;( ls -l /usr/bin ) &amp;lt;( ls -l /sbin )

# =&amp;gt; Like a billion lines of output that contain many of the
# =&amp;gt; executables on your computer, sorted in order of descending size.

# Just in case you don't magically remember all bash flags,
# -nr  means sort numerically in reverse (descending) order
# -k 5 means sort by Kolumn 5.  In this case, for `ls -l`, that is the &quot;file size&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works because the sort command expects one or many filenames as arguments.  Behind the scenes, the &lt;code&gt;&amp;lt;( stuff )&lt;/code&gt; actually outputs the name of a temporary file (unnamed pipe file) for the &lt;code&gt;sort&lt;/code&gt; command to use.&lt;/p&gt;

&lt;p&gt;Another example of where this comes in handy is the use of the &lt;code&gt;comm&lt;/code&gt; command, which spits out the lines that the files have in common.  Because &lt;code&gt;comm&lt;/code&gt; needs its input files to be sorted, you could either do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# The lame way
sort file1 &amp;gt; file1.sorted
sort file2 &amp;gt; file2.sorted
comm -12 file1.sorted file2.sorted
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ooooor, you can be a total BAshMF and do it this way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# The baller way
comm -12 &amp;lt;( sort file1 ) &amp;lt;( sort file2 )
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;-dollar-single-parentheses-&quot;&gt;$( Dollar Single Parentheses )&lt;/h2&gt;

&lt;p&gt;This is for interpolating a subshell command output into a string.  The command inside gets run inside a subshell, and then any output gets placed into whatever string you’re building.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;intro=&quot;My name is $( whoami )&quot;
echo $intro
# =&amp;gt; My name is ryan

# And just to prove that it's a subshell...
a=5
b=$( a=1000; echo $a )
echo $b
# =&amp;gt; 1000
echo $a
# =&amp;gt; 5
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;-dollar-single-parentheses-dollar-q-&quot;&gt;$( Dollar Single Parentheses Dollar Q )$?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Shoutout again to &lt;a href=&quot;https://dev.to/ferricoxide/comment/3pdn&quot;&gt;Thomas&lt;/a&gt; for the tip!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you want to interpolate a command, but only the exit code and not the value, this is what you use.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;if [[ $( grep -q PATTERN FILE )$? ]]
then
  echo &quot;Dat pattern was totally in dat file!&quot;
else
  echo &quot;NOPE.&quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although, really, this isn’t so much a special bracket pattern as it is an interesting use of &lt;code&gt;$?&lt;/code&gt;, since the above works even if there is a space between the &lt;code&gt;$( stuff )&lt;/code&gt; and the &lt;code&gt;$?&lt;/code&gt;.  But a neat tip, nonetheless.&lt;/p&gt;

&lt;h2 id=&quot;-dollar-double-parentheses-&quot;&gt;$(( Dollar Double Parentheses ))&lt;/h2&gt;

&lt;p&gt;Remember how regular &lt;strong&gt;(( Double Parentheses ))&lt;/strong&gt; don’t output anything?  Remember how that is kind of annoying?  Well, you can use &lt;strong&gt;$(( Dollar Double Parentheses ))&lt;/strong&gt; to perform an &lt;strong&gt;Arithmetic Interpolation&lt;/strong&gt;, which is just a fancy way of saying, “Place the output result into this string.”&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;a=$(( 16 + 2 ))
message=&quot;I don't want to brag, but I have like $(( a / 2 )) friends.&quot;
echo $message
# =&amp;gt; I don't want to brag, but I have like 9 friends.&quot;

b=$(( a *= 2 ))			# You can even do assignments.  The last value calculated will be the output.
echo $b
# =&amp;gt; 36
echo $a
# =&amp;gt; 36
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing to remember is that this is strictly integer arithmetic.  No decimals.  Look into &lt;a href=&quot;https://www.lifewire.com/use-the-bc-calculator-in-scripts-2200588&quot;&gt;&lt;code&gt;bc&lt;/code&gt;&lt;/a&gt; for floating point calculations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;echo $(( 9 / 2 ))  # You might expect 4.5
# =&amp;gt; 4

echo $(( 9 / 2.5 ))
# =&amp;gt; bash: 9 / 2.5 : syntax error: invalid arithmetic operator (error token is &quot;.5 &quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;-single-square-brackets-&quot;&gt;[ Single Square Brackets ]&lt;/h2&gt;

&lt;p&gt;This is an alternate version of the built-in &lt;code&gt;test&lt;/code&gt;.  The commands inside are run and checked for “truthiness.”  Strings of zero length are false.  Strings of length one or more (even if those characters are whitespace) are true.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tldp.org/LDP/abs/html/fto.html&quot;&gt;Here are a list of all of the file-related tests you could do&lt;/a&gt;, like checking if a file exists or if it’s a directory.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.tldp.org/LDP/abs/html/comparison-ops.html&quot;&gt;Here are a list of all of the string-related and integer-related tests you could do&lt;/a&gt;, like checking if two strings are equal or if one is zero-length, or if one number is bigger than another.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;if [ -f my_friends.txt ]
then
	echo &quot;I'm so loved!&quot;
else
	echo &quot;I'm so alone.&quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One last thing that’s important to note is that &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;[&lt;/code&gt; are actually shell commands.  &lt;code&gt;[[ ]]&lt;/code&gt; is actually &lt;em&gt;part of the shell language itself&lt;/em&gt;.  What this means is that the stuff inside of Double Square Brackets isn’t treated like arguments.  The reason you would use Single Square Brackets is if you need to do &lt;em&gt;word splitting&lt;/em&gt; or &lt;em&gt;filename expansion&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Here’s an illustration of the difference.  Let’s say you used Double Square Brackets in the following way.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[[ -f *.txt ]]
echo $?
# =&amp;gt; 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;False, there is no file explicitly named “[asterisk].txt”.  Let’s assume there are currently no &lt;code&gt;.txt&lt;/code&gt; files in our directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# If there's no files .txt files:
[ -f *.txt ]; echo $?
# =&amp;gt; 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;*.txt&lt;/code&gt; gets expanded to a blank string, which is not  a file, and &lt;em&gt;then&lt;/em&gt; the test gets evaluated.  Let’s create a txt file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;touch cool_beans.txt
# Now there's exactly one .txt file
[ -f *.txt ]; echo $?
# =&amp;gt; 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;*.txt&lt;/code&gt; gets expanded to a space-separated list of matching filenames: “cool_beans.txt”, and then the test gets evaluated with that one argument.  Since the file exists, the test passes.  But what if there’s two files?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;touch i_smell_trouble.txt  # bean pun.  #sorrynotsorry
# Now there's two files
[ -f *.txt ]
# =&amp;gt; bash: [: too many arguments.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;*.txt&lt;/code&gt; gets expanded to “cool_beans.txt i_smell_trouble.txt”, and then the test is evaluated.  Bash counts each of the filenames as an argument, receives 3 arguments instead of the two it was expecting, and blurffs.&lt;/p&gt;

&lt;p&gt;Just to hammer my point home: even though there are currently two &lt;code&gt;.txt&lt;/code&gt; files, this next test still fails.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[[ -f *.txt ]]; echo $?
# =&amp;gt; 1.  There is still no file called *.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I tried to come up with some examples of why you would want this, but I couldn’t come up with realistic ones.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the most part, it seems like, a good rule of thumb is: if you need to use &lt;code&gt;test&lt;/code&gt; or &lt;code&gt;[ ]&lt;/code&gt;, you’ll know it.  If you’re not sure if you need it, you probably don’t need it and  you should probably use &lt;strong&gt;[[ double square brackets ]]&lt;/strong&gt; to avoid a lot of the tricky gotchas of the &lt;code&gt;test&lt;/code&gt; command.  If your shell is modern enough to have them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;-double-square-brackets-&quot;&gt;[[ Double Square Brackets ]]&lt;/h2&gt;

&lt;p&gt;True/false testing.  Read through the section above for an explanation of the differences between single and double square brackets.  Additionally, double square brackets support extended regular expression matching.  Use quotes around the second argument to force a raw match instead of a regex match.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;pie=good
[[ $pie =~ d ]]; echo $?
# =&amp;gt; 0, it matches the regex!

[[ $pie =~ [aeiou]d ]]; echo $?
# =&amp;gt; 0, still matches

[[ $pie =~ [aei]d ]]; echo $?
# =&amp;gt; 1, no match

[[ $pie =~ &quot;[aeiou]d&quot; ]]; echo $?
# =&amp;gt; 1, no match because there's no literal '[aeoiu]d' inside the word &quot;good&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, inside double square brackets, &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; sort by your locale.  Inside single square brackets, it’s by your machine’s sorting order, which is usually ASCII.&lt;/p&gt;

&lt;h2 id=&quot;-single-curly-braces-&quot;&gt;{ Single Curly Braces }&lt;/h2&gt;

&lt;p&gt;Single curly braces are used for expansion.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;echo h{a,e,i,o,u}p
# =&amp;gt; hap hep hip hop hup
echo &quot;I am &quot;{cool,great,awesome}
# =&amp;gt; I am cool I am great I am awesome

mv friends.txt{,.bak}
# =&amp;gt; braces are expanded first, so the command is `mv friends.txt friends.txt.bak`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The cool thing is that you can make ranges as well!  With leading zeros!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;echo {01..10}
01 02 03 04 05 06 07 08 09 10
echo {01..10..3}
01 04 07 10
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;dollar-braces&quot;&gt;${dollar braces}&lt;/h2&gt;

&lt;p&gt;Note that there are no spaces around the contents.  This is for variable interpolation.  You use it when normal string interpolation could get weird&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# I want to say 'bananaification'
fruit=banana
echo $fruitification
# =&amp;gt; &quot;&quot; No output, because $fruitification is not a variable.
echo ${fruit}ification
# =&amp;gt; bananaification
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The other thing you can use &lt;strong&gt;${Dollar Braces}&lt;/strong&gt; for is variable manipulation.  Here are a few common uses.&lt;/p&gt;

&lt;p&gt;Using a default value if the variable isn’t defined.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;function hello() {
  echo &quot;Hello, ${1:-World}!&quot;
}
hello Ryan
# =&amp;gt; Hello Ryan!
hello
# =&amp;gt; Hello World!

function sign_in() {
	name=$1
  echo &quot;Signing in as ${name:-$( whoami )}&quot;
}
sign_in
# =&amp;gt; Signing in as ryan
sign_in coolguy
# =&amp;gt; Signing in as coolguy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Getting the length of a variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;name=&quot;Ryan&quot;
echo &quot;Your name is ${#name} letters long!&quot;
# =&amp;gt; Your name is 4 letters long!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Chopping off pieces that match a pattern.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;url=https://assertnotmagic.com/about
echo ${url#*/}     # Remove from the front, matching the pattern */, non-greedy
# =&amp;gt; /assertnotmagic.com/about
echo ${url##*/}    # Same, but greedy
# =&amp;gt; about
echo ${url%/*}     # Remove from the back, matching the pattern /*, non-greedy
# =&amp;gt; https://assertnotmagic.com
echo ${url%%/*}    # Same, but greedy
# =&amp;gt; https:/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can uppercase matching letters!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;echo ${url^^a}
# =&amp;gt; https://AssertnotmAgic.com/About
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can get slices of strings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;echo ${url:2:5}  # the pattern is ${var:start:len}.  Start is zero-based.
# =&amp;gt; tps://
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can replace patterns.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;echo ${url/https/ftp}
# =&amp;gt; ftp://assertnotmagic.com

# Use a double slash for the first slash to do a global replace
echo ${url//[aeiou]/X}
# =&amp;gt; https://XssXrtnXtmXgXc.cXm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, you can use variables indirectly &lt;em&gt;as the name of other variables&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;function grades() {
  name=$1
  alice=A
  beth=B
  charles=C
  doofus=D
  echo ${!name}
}

grades alice
# =&amp;gt; A
grades doofus
# =&amp;gt; D
grades &quot;Valoth the Unforgiving&quot;
# =&amp;gt; bash: : bad substitution.   
# There is no variable called Valoth the Unforgiving,
# so it defaults to a blank value.  
# Then, bash looks for a variable with a name of &quot;&quot; and errors out.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;double-angle-heredocs&quot;&gt;«Double Angle Heredocs&lt;/h2&gt;

&lt;p&gt;This is how you make multiline strings in Bash (one method).  Two arrows and then a word – any word that you choose – to signal the start of the string.  The string doesn’t end until you repeat your magic word.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;nice_message=&amp;lt;&amp;lt;MESSAGE
Hi there!  I really like the way you look
when you are teaching newbies things
with empathy and compassion!
You rock!
MESSAGE

echo $nice_message
# =&amp;gt; Hi there!  I really like the way you look
# =&amp;gt; when you are teaching newbies things
# =&amp;gt; with empathy and compassion!
# =&amp;gt; You rock!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The word can be whatever you want.  I generally end up using “HEREDOC” to make it easier for future me.&lt;/p&gt;

&lt;p&gt;One final trick is that, if you add a dash after the arrows, it suppresses any leading tabs (&lt;em&gt;but not spaces&lt;/em&gt;) in your heredoc.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cat &amp;lt;&amp;lt;-HEREDOC
        two leading tabs
    one leading tab
  two spaces here
HEREDOC

# =&amp;gt; two leading tabs
# =&amp;gt; one leading tab
# =&amp;gt;   two spaces here
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;punctuations-a-killer&quot;&gt;Punctuation’s a Killer&lt;/h2&gt;

&lt;p&gt;Hopefully this is helpful.  If you see something I missed or have another cool use for one of these variants, be sure to let me know, and I’ll update it and publicly praise your genius.  Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Jun 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/06/20/bash-brackets-quick-reference/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/06/20/bash-brackets-quick-reference/</guid>
        
        <category>bash</category>
        
        <category>shell</category>
        
        <category>cheatsheet</category>
        
        
      </item>
    
      <item>
        <title>Python Scripting Toolbox: Part 2 - String Templates and `argparse`</title>
        <description>&lt;p&gt;&lt;em&gt;Cover photo by Philip Swinburn on Unsplash&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is Part 2 in the Python Scripting Toolbox series.  It’s a three-part survey of the tools available to us for Python scripting.  I’m showing off the functionality by creating three scripts that show off different parts of the standard library.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In &lt;a href=&quot;/2018/06/05/python-toolbox-shout/&quot;&gt;Part 1&lt;/a&gt;, we built &lt;code&gt;shout.py&lt;/code&gt;: a script that shouts everything you pass into it.&lt;/li&gt;
  &lt;li&gt;In Part 2, we’ll create &lt;code&gt;make_script.py&lt;/code&gt;: a script that generates a starter script from a template, for use in things like &lt;a href=&quot;https://projecteuler.net/&quot;&gt;Project Euler&lt;/a&gt; or &lt;a href=&quot;http://rosalind.info/problems/locations/&quot;&gt;Rosalind&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Next time, Part 3 will feature &lt;code&gt;project_setup.py&lt;/code&gt;: a script that creates a basic project skeleton&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, let’s get started.&lt;/p&gt;

&lt;h2 id=&quot;script-2-make_scriptpy&quot;&gt;Script 2: &lt;code&gt;make_script.py&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;When doing coding challenges where you are supposed to write the code on your local machine and then just submit the answer once you find it, you find yourself rewriting a lot of the same boiler plate over and over for reading in command line arguments, parsing things, and outputting results, when the real meat and potatoes of your work is in the main function of the script.  Handling input and output is just a side task.  Wouldn’t it be nice if we could just script away this grunt work and get started on the coding problem sooner?  That’s what we’re doing today.&lt;/p&gt;

&lt;p&gt;Here are our requirements.  We’re creating a Python script called &lt;code&gt;make_script.py&lt;/code&gt;.  We want it to create a Python script from a template, filling in some variable names, docstrings, or other small variations based on our user inputs.  If it could have sensible defaults, that would be a plus.  Let’s get started.&lt;/p&gt;

&lt;h3 id=&quot;step-1-the-template&quot;&gt;Step 1: The Template&lt;/h3&gt;

&lt;p&gt;First, I want to come up with what our template should look like.  Open a file named &lt;code&gt;script.py.template&lt;/code&gt;.  That’s not a convention, it’s a file ending I made up.  You can call it whatever you want.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&quot;&quot;&quot;$docstring&quot;&quot;&quot;

import sys


def main($input):
    $output = &quot;&quot;
    return $output
  

if __name__ == &quot;__main__&quot;:
    $input = sys.argv[1]
    $output = main($input)
    print($output)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not a whole lot there, not super fancy, but it should save us some typing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But, Ryan!  What’s with all of those dollar signs?  I thought this was Python, not PHP!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You are correct.  We’re going to be using the &lt;code&gt;template&lt;/code&gt; class in Python’s &lt;code&gt;string&lt;/code&gt; module of the standard library.  It’s good to note that there are several very good templating libraries that aren’t in the standard library but have quite a bit more power.  &lt;a href=&quot;http://jinja.pocoo.org/docs/2.10/&quot;&gt;Jinja2&lt;/a&gt; and &lt;a href=&quot;https://docs.djangoproject.com/en/2.0/ref/templates/api/&quot;&gt;Django Templates&lt;/a&gt; come to mind right away.  But this will get us where we need to go.&lt;/p&gt;

&lt;p&gt;With this templating language, we simply specify a variable with a dollar sign in front of it.  If you want to show an &lt;em&gt;actual&lt;/em&gt; dollar sign, simply use 2 dollar signs in a row (&lt;code&gt;$$&lt;/code&gt;).  This will render out as a single dollar sign.  Now, on to our actual code.&lt;/p&gt;

&lt;h3 id=&quot;step-2-filling-in-the-template&quot;&gt;Step 2: Filling In the Template&lt;/h3&gt;

&lt;p&gt;The code to actually fill in this template is not very many lines.  Create a new file called &lt;code&gt;make_script.py&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&quot;&quot;&quot;Creates a script from a basic template.&quot;&quot;&quot;

import string

with open(&quot;script.py.template&quot;, &quot;r&quot;) as f:
    template_text = f.read()

data = {
    &quot;docstring&quot;: &quot;Hey look at this cool script.&quot;,
    &quot;input&quot;: &quot;dat_arg&quot;,
    &quot;output&quot;: &quot;awesome_result&quot;
}

template = string.Template(template_text)
result = template.substitute(data)

with open(&quot;new_script.py&quot;, &quot;w&quot;) as f:
    f.write(result)

print(result)
print(&quot;----&quot;)
print(&quot;Script created!&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are essentially four steps to this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Read the template into a string.&lt;/li&gt;
  &lt;li&gt;Create a Template object from this string (provided by the Standard Libary’s &lt;code&gt;string&lt;/code&gt; module).&lt;/li&gt;
  &lt;li&gt;Substitute in data.  This can be done as keyword arguments to the &lt;code&gt;substitute&lt;/code&gt; method, or (like we did it) as a dictionary.  Either way, the keys should be the names of variables defined in the template, and the values should be what you want to substitute in.&lt;/li&gt;
  &lt;li&gt;Write the newly processed result to a new file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you try running &lt;code&gt;python make_script.py&lt;/code&gt;, you should see the results of the substitution in your terminal as well as in a new file called &lt;code&gt;new_script.py&lt;/code&gt;.  Pretty cool, ja?&lt;/p&gt;

&lt;p&gt;This is great, but we don’t want to have to go in and change the values in &lt;code&gt;make_script.py&lt;/code&gt; any time we want to create a new script.  We’d like our script to be a little more dynamic and maybe have a little better user interface.  Looks like it’s time for…&lt;/p&gt;

&lt;h3 id=&quot;step-3-argparseing-our-way-to-cli-greatness&quot;&gt;Step 3: &lt;code&gt;argparse&lt;/code&gt;ing Our Way to CLI Greatness&lt;/h3&gt;

&lt;p&gt;We’d like our script to take some arguments, some options, and maybe show a help message.  Once again, I’d like to note that there are some excellent CLI libraries out there if you want a little more power.  I think &lt;a href=&quot;http://click.pocoo.org/5/&quot;&gt;Click&lt;/a&gt; is probably my favorite.  I wrote an article a while ago about &lt;a href=&quot;https://assertnotmagic.com/2016/11/27/discovering-click/&quot;&gt;using Click&lt;/a&gt;.  Be gentle — it was one of my first blog posts!&lt;/p&gt;

&lt;p&gt;Anyways, we’ve committed to using &lt;em&gt;only&lt;/em&gt; the Standard Library in these guides, so we’ll soldier on with our friend &lt;code&gt;argparse&lt;/code&gt;.  For more examples and information, you can take a look at the &lt;a href=&quot;https://docs.python.org/3/library/argparse.html&quot;&gt;&lt;code&gt;argparse&lt;/code&gt; documentation&lt;/a&gt;.  For now, I think it’s best to just show you the new, shiny version of &lt;code&gt;make_script.py&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&quot;&quot;&quot;Creates a script from a basic template.&quot;&quot;&quot;

import argparse
import string

parser = argparse.ArgumentParser(description=&quot;Create new Python scripts from a template.&quot;)
parser.add_argument(&quot;scriptname&quot;, help=&quot;The name of the new script to create&quot;)
parser.add_argument(
    &quot;-d&quot;, 
    &quot;--docstring&quot;,
    help=&quot;The docstring to be placed at the top of the script&quot;,
    default=&quot;Placeholder docstring&quot;
)
parser.add_argument(
    &quot;-i&quot;,
    &quot;--input&quot;,
    help=&quot;The name of the variable used as the input parameter&quot;,
    default=&quot;inval&quot;
)
parser.add_argument(
    &quot;-r&quot;,
    &quot;--result&quot;,
    help=&quot;The name of the variable used as the result/output&quot;,
    default=&quot;result&quot;
)

args = parser.parse_args()

# ...  You'll see how we use these args in a minute
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we’ve imported the &lt;code&gt;argparse&lt;/code&gt; module, we can create our argument parser.  We’ll tell this argument parser about all of the arguments and options that we’re expecting.  By default, any argument that starts with a &lt;code&gt;-&lt;/code&gt; is considered an optional… um… option, while everything else is considered a required argument.&lt;/p&gt;

&lt;p&gt;If you provide each argument with a &lt;code&gt;help&lt;/code&gt; value, it will make your help text really look shiny.  At the end, you process the arguments provided by the user with the &lt;code&gt;parse_args&lt;/code&gt; method.  Let’s take a look at how to use them.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# ... Everything in the previous code block

with open(&quot;script.py.template&quot;, &quot;r&quot;) as f:
    template_text = f.read()

data = {
    &quot;docstring&quot;: args.docstring,
    &quot;input&quot;: args.input,
    &quot;output&quot;: args.result
}

template = string.Template(template_text)
result = template.substitute(data)

with open(args.scriptname, &quot;w&quot;) as f:
    f.write(result)
    
print(result)
print(&quot;----&quot;)
print(&quot;Script created!&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of the arguments are available under the &lt;code&gt;args&lt;/code&gt; &lt;em&gt;namespace&lt;/em&gt;, which basically just means that you can access them via &lt;code&gt;args.whatever_your_variable_is&lt;/code&gt;.  The variable name will be whatever name you passed into the &lt;code&gt;add_argument&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Now, if you run your script, it will complain if the right things aren’t passed in, &lt;em&gt;and&lt;/em&gt; if you run &lt;code&gt;python make_script.py —help&lt;/code&gt;, it prints out a pretty little help message.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python make_script.py --help
usage: make_script.py [-h] [-d DOCSTRING] [-i INPUT] [-r RESULT] scriptname

Create new Python scripts from a template.

positional arguments:
  scriptname            The name of the new script to create

optional arguments:
  -h, --help            show this help message and exit
  -d DOCSTRING, --docstring DOCSTRING
                        The docstring to be placed at the top of the script
  -i INPUT, --input INPUT
                        The name of the variable used as the input parameter
  -r RESULT, --result RESULT
                        The name of the variable used as the result/output
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next time, we’ll work on a script that will build a project directory for us.  Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Sat, 16 Jun 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/06/16/python-toolbox-make-script/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/06/16/python-toolbox-make-script/</guid>
        
        <category>python</category>
        
        <category>scripting</category>
        
        <category>tutorial</category>
        
        
      </item>
    
      <item>
        <title>Command Not Found... Dum Dum</title>
        <description>&lt;p&gt;Do you know what time it is?  That’s right.  It’s time for a&lt;/p&gt;

&lt;h2 id=&quot;quiiiiick-tip&quot;&gt;QUIIIIICK TIP&lt;/h2&gt;

&lt;p&gt;This tip comes from the &lt;a href=&quot;https://amzn.to/2t7Fp1i&quot;&gt;Bash Pocket Reference, 2nd Ed.&lt;/a&gt; by Arnold Robbins.&lt;/p&gt;

&lt;p&gt;Do you know how Bash (and similar shells) look for commands when you give it a command?  Here’s the list:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First, it checks to see if what you’ve typed is a language keyword like &lt;code&gt;for&lt;/code&gt; or &lt;code&gt;while&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, it checks your aliases.  Interestingly, the book above states (and cites other sources that agree) that you should basically never use aliases!  It says writing a function should almost always be preferred – contrary to a lot of StackOverflow answers I’ve seen.  I think I agree, actually.  Writing functions seems much cleaner and easier to come back to and modify later.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Then, it checks for special built-in functions like &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;exit&lt;/code&gt;, or &lt;code&gt;export&lt;/code&gt;.  These aren’t needed for the internals of the Bash language, necessarily, but they’re needed for scripting and interactive shells.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After that, it looks at any functions you have defined.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next are non-special built-ins.  These are commands like &lt;code&gt;cd&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt;.  Since functions are checked before these, you could feasibly override &lt;code&gt;cd&lt;/code&gt; with your own function!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;function cd() {
  echo &quot;You're the best!&quot;
  command cd &quot;$@&quot;  # Actually calls the real `cd`
}

$ cd ~/code
# =&amp;gt; You're the best!
# Now in ~/code
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly, it hunts through the &lt;code&gt;$PATH&lt;/code&gt; to try to find scripts that match.&lt;/p&gt;

&lt;p&gt;Here’s the tip: if Bash can’t find the command you typed in any of these places, it runs a function called &lt;code&gt;command_not_found_handle&lt;/code&gt;.  Aaaaand, if you so happen to override this function, it will call &lt;em&gt;your&lt;/em&gt; version instead!&lt;/p&gt;

&lt;p&gt;Sooooo, if your terminal experience is just not quite hostile enough, you could feasibly put the following into your &lt;code&gt;.bash_profile&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;function command_not_found_handle() {
  options=(
    &quot;no.&quot;
    &quot;No!&quot;
    &quot;NO.&quot;
    &quot;OMG NO.&quot;
    &quot;Mother ****!&quot;
    &quot;WHAT ARE YOU DOING?&quot;
    &quot;Success!  JK, you're still a dum dum.&quot;
  )
  option_choice=$(( $RANDOM % 7 ))
  echo &quot;${options[$option_choice]} '$*' command not found.&quot;
  # The command that you tried is passed into
  # this function as arguments, so $* will contain
  # the entire command + arguments and options
  
  return 127   # 127 is the canonical exit code for
  						# &quot;command not found&quot; 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, when you open up your terminal, you should see this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ hwaaaa
# =&amp;gt; NO. 'hwaaaa' command not found.
$ but why not tho
# =&amp;gt; Success!  JK, you're a dum dum.  'but why not tho' command not found.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All kidding aside, hopefully, you start to see how you could write some scripts to provide slightly more helpful/friendly error messages that maybe even show some possible options that were close to what you typed?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick Tip Over.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 16 Jun 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/06/16/command-not-found/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/06/16/command-not-found/</guid>
        
        <category>bash</category>
        
        <category>shell</category>
        
        <category>quicktip</category>
        
        
      </item>
    
      <item>
        <title>Each Pair with Itertools</title>
        <description>&lt;p&gt;&lt;em&gt;Cover Photo by &lt;a href=&quot;https://unsplash.com/photos/hXaHghBkEMQ?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Dan Gold&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/search/photos/pears?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Quick Tip Time!&lt;/p&gt;

&lt;p&gt;This week I was working on some coding challenges on &lt;a href=&quot;http://rosalind.info&quot;&gt;Rosalind&lt;/a&gt; in Python.  For one of the problems, I needed to run through consecutive groups of characters in a string and do something with them.  For example, if the string was “ACGTACAGTACTGACAGATCA”, I wanted to operate on the following substrings:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&quot;ACGT&quot;
&quot;CGTA&quot;
&quot;GTAC&quot;
&quot;TACA&quot;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I was writing in Ruby, this would be a perfect use case for the &lt;a href=&quot;https://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-each_cons&quot;&gt;each_cons&lt;/a&gt; method!  Unfortunately, no such luck with a similar function built-in to Python.  I ended up going with the slightly less pretty:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def each_cons(n, iterable):
    &quot;&quot;&quot;Returns every n consecutive items in an iterable.
    Example: each_cons(4, range(10)) =&amp;gt; [0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5]...
    &quot;&quot;&quot;
    return (iterable[i: i + n] for i in range(len(iterable) - n + 1))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Anytime you write &lt;code&gt;range(len(...&lt;/code&gt;, there’s probably a better way you could have done things.  &lt;strong&gt;If you know a slicker, less indexy way to do this, please share it, because there’s got to be a better way.  I can’t be indexing into things manually like a barbarian.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;However, that’s not what this post is about.  In my search for a better way, I came across a clever use of the &lt;code&gt;itertools&lt;/code&gt; module that was too good not to share.&lt;/p&gt;

&lt;h2 id=&quot;each-pair-with-itertools&quot;&gt;Each Pair with Itertools&lt;/h2&gt;

&lt;p&gt;This method only really works cleanly if you need only two consecutive items, but it feels &lt;em&gt;very&lt;/em&gt; Pythonic to me.  I’ll show you the code and then point out the key parts.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from itertools import tee

def each_pair(iterable):
    &quot;&quot;&quot;Returns each consecutive pair of items in an iterable&quot;&quot;&quot;
    first, second = tee(iterable)
    next(second, None)
    return zip(first, second)

each_pair(range(10))
# =&amp;gt; [0, 1], [1, 2], [2, 3], [3, 4], [4, 5]...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahhhh &lt;em&gt;SO GOOD.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-magic-explained&quot;&gt;The Magic Explained&lt;/h2&gt;

&lt;p&gt;So, how does it work?&lt;/p&gt;

&lt;p&gt;First, we use &lt;code&gt;itertools.tee&lt;/code&gt;, which returns two copies of the original iterable (a fancy word for anything you can iterate through: strings, lists, generators, etc.).  It also takes an optional argument for &lt;code&gt;n&lt;/code&gt; if you want to make &lt;code&gt;n&lt;/code&gt; copies instead of just 2.&lt;/p&gt;

&lt;p&gt;Now we have two identical copies of the original iterable.  We then call &lt;code&gt;next&lt;/code&gt; on the second one in order to step it one item forward.  Notice the second argument to &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;None&lt;/code&gt;.  The &lt;code&gt;next&lt;/code&gt; function returns (and uses up) the next item in an iterable, and if you provide it a &lt;em&gt;default&lt;/em&gt; and it can’t return another item because that iterable is empty, it just returns the default.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# next only works on Iterator objects
a = iter([1, 2, 3])
next(a, &quot;EMPTY&quot;)
# =&amp;gt; 1
next(a, &quot;EMPTY&quot;)
# =&amp;gt; 2
next(a, &quot;EMPTY&quot;)
# =&amp;gt; 3
next(a, &quot;EMPTY&quot;)
# =&amp;gt; &quot;EMPTY&quot;
next(a)
# =&amp;gt; Error!  StopIteration!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is just a neat way of saying “cycle the &lt;code&gt;second&lt;/code&gt; iterable one item forward, but if you’re already empty, don’t worry about it.  Just don’t throw an error.”  You probably also noticed that we don’t do anything with the result of this call to &lt;code&gt;next&lt;/code&gt;.  We’re just throwing an item away, if it exists.&lt;/p&gt;

&lt;p&gt;The last part is zipping the two iterables together.  &lt;code&gt;zip&lt;/code&gt; is a tricky function that seems simple, but often the results can be hard to wrap your head around.  It makes each n-th item of each iterator it is passed into one single list.&lt;/p&gt;

&lt;p&gt;It’s  easier to see in an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = [1, 2, 3, 4]
b = [&quot;Apple&quot;, &quot;Banana&quot;, &quot;Pear&quot;, &quot;Soup&quot;]
c = [True, False, True, False]

zip(a, b, c)
# =&amp;gt; [
#       [1, &quot;Apple&quot;, True],
#       [2, &quot;Banana&quot;, False],
#       [3, &quot;Pear&quot;, True],
#       [4, &quot;Soup&quot;, False],
#	]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The trick is that, if our lists have different lengths, it will only use up to the shortest one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = [1, 2, 3, 4, 5, 6, 7, 8]
b = [1, 2, 3]
zip(a, b)
# =&amp;gt; [[1, 1], [2, 2], [3, 3]]  See how it drops the last 5 elements of 'a'?
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;The &lt;code&gt;itertools&lt;/code&gt; module also has a &lt;code&gt;zip_longest&lt;/code&gt; function that takes a default value to fill in if some of the arguments to zip are too short.&lt;/p&gt;

  &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;a = [1, 2, 3, 4, 5, 6]
b = [1, 2]
itertools.zip_longest(a, b, fillvalue=&quot;:)&quot;)
# =&amp;gt; [
#	    [1, 1],
#	    [2, 2],
#	    [3, &quot;:)&quot;]
#	    [4, &quot;:)&quot;]
#	    [5, &quot;:)&quot;]
#	    [6, &quot;:)&quot;]
# ]
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap Up&lt;/h2&gt;

&lt;p&gt;Anyways, I thought this was neat.  I like it anytime I can get what I want out of an iterable without actually using any brute force indices.  It seems like it cuts down on &lt;a href=&quot;https://twitter.com/codinghorror/status/506010907021828096?lang=en&quot;&gt;off-by-one&lt;/a&gt; errors.&lt;/p&gt;

&lt;p&gt;Like I said before, if you’ve got a better way to make the &lt;code&gt;each_cons&lt;/code&gt; function above, I want to see it.  Be sure to comment or &lt;a href=&quot;https://twitter.com/paytastic/&quot;&gt;tweet it at me&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 09 Jun 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/06/09/itertools-each-pair/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/06/09/itertools-each-pair/</guid>
        
        <category>python</category>
        
        <category>tricks</category>
        
        <category>itertools</category>
        
        
      </item>
    
      <item>
        <title>Python Scripting Toolbox: sys and fileinput</title>
        <description>&lt;p&gt;&lt;em&gt;Cover Photo by Fleur Treurniet on Unsplash&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Python is an extremely flexible language with uses in tons of different applications and fields: web apps, automation, sciences, and data analysis, to name a few.  However, my &lt;em&gt;favorite&lt;/em&gt; thing to use it for is scripting.  Scripting can be as simple as writing a quick little one-off script to do something faster than you would want to do by hand, or it can more complex, a recurring task that you polish up – something with options, and flags, and a bit of a user interface.&lt;/p&gt;

&lt;p&gt;Lucky for us, Python already has many of the essentials for scripting built into its standard library!  I’m going to show you a few of the features I like best and how they are used.  I’ll be using Python 3.6 for all of these examples.  Most things should work in any Python 3.  Your mileage may vary if you use legacy Python (Python 2).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I know that there are libraries and frameworks out there for creating command line interfaces.  They are awesome.  In this article, I’m going to focus on Python’s “Batteries Included”: the standard library.  I’ll show you how much you can accomplish without installing a single external dependency.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-setup&quot;&gt;The Setup&lt;/h2&gt;

&lt;p&gt;This will be a three-part survey of the tools available to us for Python scripting.  I’ll show off the functionality by creating three scripts that show off different parts of the standard library.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;shout.py&lt;/code&gt;: a script that shouts everything you pass into it.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;make_script.py&lt;/code&gt;: a script that generates a starter script from a template, for use in things like &lt;a href=&quot;https://projecteuler.net/&quot;&gt;Project Euler&lt;/a&gt; or &lt;a href=&quot;http://rosalind.info/problems/locations/&quot;&gt;Rosalind&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;project_setup.py&lt;/code&gt;: a script that creates a basic project skeleton&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This here is part one.  Now, let’s get started.&lt;/p&gt;

&lt;h2 id=&quot;script-1-shout&quot;&gt;Script 1: shout&lt;/h2&gt;

&lt;p&gt;Did you ever wish that your computer would yell at you more?  Or that you computer was more abraisive?  You’re in luck then, because we’re about to fix all of that.  Create a new file called &lt;code&gt;shout.py&lt;/code&gt;.  We’re going to first just fill in the basic functionality, and then build out the interface from there.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python
&quot;&quot;&quot;Takes in input and returns that same input, but uppercase.&quot;&quot;&quot;

def shout(text):
    return text.upper()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Good so far!  I wanted to keep it simple to start with so we can focus mainly on our toolbox.  Right now, if you run &lt;code&gt;python shout.py&lt;/code&gt;, it doesn’t do anything.  Let’s fix that.  But how do we get access to the arguments provided to our scripts?  Our first tool: &lt;code&gt;sys&lt;/code&gt;.  &lt;code&gt;sys&lt;/code&gt; is a module that handles a lot of different system-level, system-specific, or python-install-specific options and values.  You can use it to check what version of Python someone’s using, what operating system the script is running on, or (what we’re using it for) get access to &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt;, and command line arguments.&lt;/p&gt;

&lt;h3 id=&quot;using-sysargv&quot;&gt;Using &lt;code&gt;sys.argv&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Let’s look at one way we could use this script, which might be a good option if we have a set or specific number of arguments we expect.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python3
&quot;&quot;&quot;Takes in input and returns that same input, but uppercase.&quot;&quot;&quot;

import sys

def shout(text):
    return text.upper()
  
if __name__ == &quot;__main__&quot;:
    text = sys.argv[1]
    print(shout(text))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;argv&lt;/code&gt; is the array of arguments (space-separated) that were passed to our script.  Note that &lt;code&gt;argv[0]&lt;/code&gt; is the name of the script that was run.  Running this, the result would be:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python3 shout.py banana
BANANA
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That works OK for some things.  If we had a script that calculated the area of a polygon based on the number of sides and side length (&lt;code&gt;e.g. python polygonArea.py 5 20&lt;/code&gt;), &lt;code&gt;argv&lt;/code&gt; would be just what the doctor ordered.  But, in this case, it might be useful to be able to pass things into our script via &lt;code&gt;stdin&lt;/code&gt;, like any other shell command.  Luckily, &lt;code&gt;sys&lt;/code&gt; has our back once again!&lt;/p&gt;

&lt;h3 id=&quot;using-sysstdin-and-sysstdout&quot;&gt;Using &lt;code&gt;sys.stdin&lt;/code&gt; and &lt;code&gt;sys.stdout&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python3
&quot;&quot;&quot;Takes in input and returns that same input, but uppercase.&quot;&quot;&quot;

import sys

def shout(text):
    return text.upper()
  
if __name__ == &quot;__main__&quot;:
    text = sys.stdin.read()
    sys.stdout.write(shout(text))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;sys&lt;/code&gt; module provides handles to &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt;, and &lt;code&gt;stderr&lt;/code&gt;, which you can read and write to, respectively, just like any other file-type object.  Now find a text file or create one with multiple lines, and run your code like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ cat test.txt | python3 shout.py
BANANA OONANA
I GAVE MY HEART TO A BANANA
MY HEART TO A BANANA.
BANANA OONANA!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’m sorry for all of the “banana” stuff.  I’ve got &lt;a href=&quot;https://www.youtube.com/watch?v=BQ0mxQXmLsk&quot;&gt;that song&lt;/a&gt; stuck in my head.  But the Python stuff is cool, right?  There’s one more improvement we can make here.  What if our text that we want shouted was really, &lt;em&gt;really&lt;/em&gt; long?  It would be better for it to be processed line by line, right?  That way, we could see partial outputs as it processes, and we don’t have to worry about reading the whole file into memory.  That’s what’s so great about &lt;code&gt;stdin&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt; being “File-like objects.”  They’ve got the same methods that regular files do.  That means we can iterate over the lines of &lt;code&gt;stdin&lt;/code&gt; in a &lt;code&gt;for&lt;/code&gt; loop!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# ...
if __name__ == &quot;__main__&quot;:
    for line in sys.stdin:
        sys.stdout.write(shout(line))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This time, when you run it, you won’t notice any difference.  Let’s put a delay in between each line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python3
&quot;&quot;&quot;Takes in input and returns that same input, but uppercase.&quot;&quot;&quot;

import sys
from time import sleep

def shout(text):
    return text.upper()
  
if __name__ == &quot;__main__&quot;:
    for line in sys.stdin:
        sys.stdout.write(shout(line))
        sleep(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you run it this time, the lines should come out slowly, whereas the old version would happen all at once no matter what!&lt;/p&gt;

&lt;h3 id=&quot;using-fileinput&quot;&gt;Using &lt;code&gt;fileinput&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;What if you wanted to go really over the top with this shouting tool?  You wanted to be able to shout a whole bunch of files at once, along with piping from &lt;code&gt;stdin&lt;/code&gt;?  You’d want &lt;code&gt;fileinput&lt;/code&gt;.  Check it out.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python3
&quot;&quot;&quot;Takes many inputs and returns that same input, but uppercase.&quot;&quot;&quot;

import fileinput
import sys

def shout(text):
    return text.upper()
  
if __name__ == &quot;__main__&quot;:
    for line in fileinput.input():
        sys.stdout.write(f&quot;({ fileinput.filename() }) - { shout(line) }&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, create a second file (&lt;code&gt;test2.txt&lt;/code&gt;) .  Run the script like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python3 shout.py test.txt test2.txt
(test.txt) - BANANA OONANA
(test.txt) - I LEFT MY HEART INSIDE BANANAS
(test.txt) - INSIDE BANANAS.
(test.txt) - BANANAS OONANANA!
(test2.txt) - THIS IS THE SECOND FILE.
(test2.txt) - IT IS LAMER.
(test2.txt) - NOT AS CATCHY OF TEXT.
(test2.txt) - HELLO.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/fileinput.html&quot;&gt;&lt;code&gt;fileinput&lt;/code&gt;&lt;/a&gt; uses the &lt;code&gt;input&lt;/code&gt; function to combine all of the filename arguments and read them in as a single line-by-line stream.  It has additional useful functions that you can call while reading to add additional information, as well.  We used it to provide the filename of the file being processed, but there are more, like &lt;code&gt;lineno&lt;/code&gt;, &lt;code&gt;filelineno&lt;/code&gt;, &lt;code&gt;isfirstline&lt;/code&gt;, and &lt;code&gt;isstdin&lt;/code&gt;.  You can even add extra options to change the input files in-place, create backups of in-place modified files, decompress compressed files, and more!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But wait a minute.  That’s really cool, but you promised that we could still use &lt;code&gt;stdin&lt;/code&gt; with this method.  How does that work?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can include &lt;code&gt;stdin&lt;/code&gt; in your list of files by using a single dash (&lt;code&gt;-&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;echo &quot;whaddup from stdin&quot; | python3 shout.py test.txt - test2.txt
(test.txt) - BANANA OONANA
(test.txt) - I LEFT MY HEART INSIDE BANANAS
(test.txt) - INSIDE BANANAS.
(test.txt) - BANANAS OONANANA!
(&amp;lt;stdin&amp;gt;) - WHADDUP FROM STDIN
(test2.txt) - THIS IS THE SECOND FILE.
(test2.txt) - IT IS LAMER.
(test2.txt) - NOT AS CATCHY OF TEXT.
(test2.txt) - HELLO.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;all-shouted-out&quot;&gt;All Shouted Out&lt;/h2&gt;

&lt;p&gt;That’s it for &lt;code&gt;sys&lt;/code&gt;, &lt;code&gt;fileinput&lt;/code&gt;, and our &lt;code&gt;shout.py&lt;/code&gt; script.  Stay tuned for the next part, where we’ll build &lt;code&gt;make_script.py&lt;/code&gt; — we’ll write a script that writes scripts so we can script while our scripts script.  See you next time!&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Jun 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/06/05/python-toolbox-shout/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/06/05/python-toolbox-shout/</guid>
        
        <category>python</category>
        
        <category>scripting</category>
        
        <category>tutorial</category>
        
        
      </item>
    
      <item>
        <title>Setting Up a CentOS Server</title>
        <description>&lt;p&gt;I’m slowly discovering that I &lt;em&gt;love&lt;/em&gt; systems stuff.  I’ve always used Ubuntu as the flavor of Linux on my servers, but I was curious about the differences between Ubuntu and CentOS, so I looked up a few guides and tutorials and spun up a new &lt;a href=&quot;https://m.do.co/c/2e87eb578ad9&quot;&gt;Digital Ocean droplet&lt;/a&gt; with a fresh install of CentOS.  I wanted to share what I learned, and all of the things to think about when first getting things set up.  I’m also writing this for when future me forgets a step and can’t remember the commands.&lt;/p&gt;

&lt;p&gt;I’m going to assume that you have working knowledge of the command line for now: changing directories, editing files, and setting file permissions.  I’ll try to explain anything more exotic than that.  If you’re not quite there, but you still want to learn, please &lt;a href=&quot;https://assertnotmagic.com/about/&quot;&gt;get in touch&lt;/a&gt;, and I’d be happy to walk you through it (and/or write another post for that).  This is also a guide for CentOS because that’s what I was doing.  For that reason, all of the commands are Centos (and probably RHEL) specific.  The process and theory should be much the same for other flavors of Linux, though.&lt;/p&gt;

&lt;h2 id=&quot;first-contact&quot;&gt;First Contact&lt;/h2&gt;

&lt;p&gt;I’m not sure how other providers do it, but once you create a droplet on Digital Ocean and your new server is all turned on, they send you an email with the &lt;code&gt;root&lt;/code&gt; password.  You’ll be able to &lt;code&gt;ssh&lt;/code&gt; into your server using these credentials.  If you’re on a Mac, you already have &lt;code&gt;ssh&lt;/code&gt; installed and accessible via your terminal app of choice.  If you’re on Windows, you should look into an &lt;code&gt;ssh&lt;/code&gt; client.  I use &lt;a href=&quot;https://www.chiark.greenend.org.uk/~sgtatham/putty/&quot;&gt;PuTTY&lt;/a&gt; when I need to.  Your hosting provider will provide you with an IP address as well.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;ssh root@&amp;lt;your_server_ip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From now on, if you see something in angle brackets like that, just assume that I mean, “Fill in the placeholder in angle brackets with your own preferred value.”  It will ask you for your password.  Paste it in and hit Enter, and you should be ready to rock!&lt;/p&gt;

&lt;h2 id=&quot;check-your-privilege&quot;&gt;Check Your Privilege&lt;/h2&gt;

&lt;p&gt;Right now you’re logged in as &lt;code&gt;root&lt;/code&gt;.  This is great!  It is also bad.  When you are logged in as root, typos and little mistakes can cause big problems.  It’s generally better to sign in and go about your life in a less privileged account, only invoking &lt;code&gt;sudo&lt;/code&gt; to do privilege-y things when you need to.  That way, if you accidently try to delete yourself out of existence, you’ll have to work a little harder before you succeed.  So, we’ll need to create this everyday user.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;adduser &amp;lt;username&amp;gt; &amp;amp;&amp;amp; passwd &amp;lt;username&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will ask you for a new password for your new user.  Make it a good one.&lt;/p&gt;

&lt;p&gt;Next, let’s make sure that your new user can actually &lt;code&gt;sudo&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;usermod -aG wheel &amp;lt;username&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’re adding our new user to the &lt;code&gt;wheel&lt;/code&gt; group, which (as long as you’re on CentOS 7 or better) means that we’ll be able to &lt;code&gt;sudo&lt;/code&gt; without trouble.&lt;/p&gt;

&lt;p&gt;Lastly, sometimes there’s a default user created: &lt;code&gt;centos&lt;/code&gt;.  I don’t think we need this user for anything.  Remove it with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;deluser centos
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;transferring-keys&quot;&gt;Transferring Keys&lt;/h2&gt;

&lt;p&gt;Next, we’re going to strengthen security by setting up private/public key authentication.  A side benefit of this is that you won’t need to remember a password if you don’t want to anymore.  Temporarily switch users so that you’re operating as your new user.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;su &amp;lt;username&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to authenticate with keys, you’ll need a spot to put your public key.  Let’s create the &lt;code&gt;.ssh&lt;/code&gt; directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mkdir ~/.ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also don’t want anyone but us to be able to fiddle around in this directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo chmod 700 ~/.ssh/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great!  Let’s transfer a key.  Exit &lt;code&gt;ssh&lt;/code&gt; or open up a new terminal on your local machine.  If you don’t yet have a private/public key pair, generate one now.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;ssh-keygen

# Generating public/private rsa key pair.
# Enter file in which to save the key (/Users/localuser/.ssh/id_rsa):
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just hit Enter to accept the default file location for your keys.  This will create two files.  &lt;code&gt;id_rsa&lt;/code&gt; is your private key.  This is &lt;em&gt;Very Secret&lt;/em&gt;™.  Never share this with anyone unless you trust them with your life.  Or, at least, your servers.  I’d go so far as to say don’t put this out on a cloud service or flash drive where it might get hacked, stolen, lost, or blown up.  &lt;code&gt;id_rsa.pub&lt;/code&gt; is your public key, and this is the one you can share with people to prove you are who you say you are.  This is the file that we want to share with our new server’s new user.  There are a couple ways to do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Via ssh-copy-id
ssh-copy-id &amp;lt;username&amp;gt;@&amp;lt;server-ip&amp;gt;

# Via scp
scp ~/.ssh/id_rsa.pub &amp;lt;username&amp;gt;@&amp;lt;server-ip&amp;gt;:~/.ssh/authorized_keys

# Manually via good ole' fashioned copy/paste
cat ~/.ssh/id_rsa.pub

# You'll see something like:
# ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAmLmwkzQDjEOW1Rj3TP5NldVDqUODVH9xuYrkeaSkxtdP

# Copy the whole thing.  Then ssh back into your server like normal and create a new file at ~/.ssh/authorized_keys and paste in in.
nano ~/.ssh/authorized_keys

# Or use emacs or vim or whatever editor you like best.  Whatever.  Shut up.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, the next time you log in as your user, it shouldn’t ask you for a password.&lt;/p&gt;

&lt;p&gt;And once again, make sure the permissions are as restrictive as possible for this file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Once again logged into your server
sudo chmod 600 ~/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;but-we-can-go-even-more-secure&quot;&gt;But We Can Go Even More Secure&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;“But wait, shouldn’t we do a public key for our &lt;code&gt;root&lt;/code&gt; user as well, so we don’t have to type that password either?”&lt;/em&gt; you ask.  The answer is no.  Actually, the most secure way is if your &lt;code&gt;root&lt;/code&gt; user can’t even log in from the outside at all!  We’re now going to edit the configuration for our &lt;code&gt;ssh&lt;/code&gt; daemon (or, &lt;code&gt;sshd&lt;/code&gt; for short) that controls how our server accepts &lt;code&gt;ssh&lt;/code&gt; connections.  Most configuration lives in the &lt;code&gt;/etc&lt;/code&gt; directory, and this is no exception.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo nano /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Look for the line that says:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;#PermitRootLogin yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You’ll want to uncomment it and set that to “no.”&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;PermitRootLogin no
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Side note: I always think it’s funny to add an additional line.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;# PermitKennyLogin DANGER ZONE!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;My wife, a teacher and not an avid sshd configurer, disagrees.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As extra steps, also change the following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;PasswordAuthentication no

# If you connect via IPv4:
AddressFamily inet
# If you connect via IPv6:
AddressFamily inet6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first line turns off all password logins.  Without this, your user account is still open to password login, which somebody can do even without your private key.  The other lines shrink the amount of shenanigans you have to deal with by refusing to serve people who aren’t connecting like you.  If you’re not going to ever connect via IPv6, why leave that open for some botnet to sniff around?&lt;/p&gt;

&lt;p&gt;Lastly, once we’ve reconfigured a service, we need to reload it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo systemctl reload sshd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we should be good to go!&lt;/p&gt;

&lt;h2 id=&quot;moving-in-and-settling-down&quot;&gt;Moving In and Settling Down&lt;/h2&gt;

&lt;p&gt;We’re pretty much done with the security stuff.  By now, you should be pretty much secure and feeling safe.  Now we’re going to focus on turning this server into a pleasant place to work.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;yum update &amp;amp;&amp;amp; sudo yum upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Watch as your server brings itself up to current.&lt;/p&gt;

&lt;h3 id=&quot;protip-yum-errors&quot;&gt;ProTip: Yum Errors&lt;/h3&gt;

&lt;p&gt;If you get interrupted or, hypothetically, your dog jumps into your lap while this is happening and just manages to mash the correct keys to abort the upgrade without cleaning up, and you start seeing errors like “yum lock” or “sqlite3 database lock”, don’t panic.&lt;/p&gt;

&lt;p&gt;Check to see if there’s still a &lt;code&gt;yum&lt;/code&gt; process active.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;ps aux | grep yum
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you see one that shouldn’t be active, try to kill it (take note of the process ID (PID) in the second column of the output from the above command).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;kill &amp;lt;pid&amp;gt;
# Or, if you're feeling feisty and it's not working:
kill -9 &amp;lt;pid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Willy is sorry he caused 90 minutes of frantically Googling error messages.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sad-willy.jpg&quot; alt=&quot;Sad Willy&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;back-to-it&quot;&gt;Back To It&lt;/h3&gt;

&lt;p&gt;Now is a good time to install any packages you couldn’t be without: Zsh, oh-my-zsh, Ruby, Vim, and git are the first ones that come to mind.  I’m going to show you just the first one, because there is one hiccup you might encounter.  If you prefer Fish or some other shell, it should most likely be similar.&lt;/p&gt;

&lt;h2 id=&quot;installing-zsh&quot;&gt;Installing Zsh&lt;/h2&gt;

&lt;p&gt;The first part should make sense.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo yum install zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check to see where your executable lives.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;where zsh
# /usr/bin/zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The important thing here is to make sure that this location is in your &lt;code&gt;/etc/shells&lt;/code&gt; file, which is a list of the approved shells.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo nano /etc/shells
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;# List of acceptable shells for chpass(1).
# Ftpd will not allow users to connect who are not using
# one of these shells.

/bin/bash
/bin/csh
/bin/ksh
/bin/sh
/bin/tcsh
/bin/zsh
/usr/local/bin/pwsh
/usr/bin/zsh # &amp;lt;&amp;lt; Here's the one we're adding.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the zsh executable is approved, you can set your own default shell to zsh.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;chsh -s $(where zsh)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;bonus-bringing-in-dot-files&quot;&gt;Bonus: Bringing in Dot Files&lt;/h2&gt;

&lt;p&gt;If you’re like me, you’re probably reasonably proud of your slowly growing collection of “dot files.”  But how do you get them from your computer onto the server, quickly, sanely, and repeatably?  With Git.  I found &lt;a href=&quot;https://developer.atlassian.com/blog/2016/02/best-way-to-store-dotfiles-git-bare-repo/&quot;&gt;this article by Nicola Paolucci&lt;/a&gt; that I think is brilliant.  We’re going to use a modified bare Git repository in our local home directory!&lt;/p&gt;

&lt;h3 id=&quot;setting-up&quot;&gt;Setting Up&lt;/h3&gt;

&lt;p&gt;On your local machine:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git init --bare $HOME/.dotfiles
alias dot='/usr/bin/git --git-dir=$HOME/.dotfiles --work-tree=$HOME'
dot config --local status.showUntrackedFiles no
echo alias dot='/usr/bin/git --git-dir=$HOME/.dotfiles --work-tree=$HOME' &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We create a bare repo in our home directory to track our dot files, we create the &lt;code&gt;dot&lt;/code&gt; command (or whatever you want to call it) which will function just like the &lt;code&gt;git&lt;/code&gt; command, but just for our dotfiles.  We configure it to only show us if our tracked files change, and then we save the &lt;code&gt;dot&lt;/code&gt; command for later.&lt;/p&gt;

&lt;p&gt;Now, all we have to do is start tracking some dot files!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;dot status
dot add .zshrc
dot commit -m &quot;Add zshrc&quot;
dot remote add origin https://github.com/&amp;lt;you&amp;gt;/dotfiles.git
dot push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You get all the benefits of Git!  You can branch, edit, roll back, diff changes, and more.&lt;/p&gt;

&lt;h3 id=&quot;installing-onto-our-server&quot;&gt;Installing Onto Our Server&lt;/h3&gt;

&lt;p&gt;On the server, add your same &lt;code&gt;dot&lt;/code&gt; command to your &lt;code&gt;.zshrc&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;echo alias dot='/usr/bin/git --git-dir=$HOME/.dotfiles --work-tree=$HOME' &amp;gt;&amp;gt; ~/.zshrc
. ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If there are any stock files that might conflict with the dotfiles you’re about to pull in, either delete them or (better), copy them to a backup directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mkdir .dotfile-backup
mv .bashrc .dotfile-backup
mv .zshrc .dotfile-backup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we’re ready:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git clone --bare &amp;lt;dotfile repo url&amp;gt; $HOME/.dotfiles
echo &quot;.dotfiles/&quot; &amp;gt;&amp;gt; .gitignore
dot checkout
# Just in case:
dot config status.showUntrackedFiles no
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now your server should be on its way to being comfy, cozy, and functional!&lt;/p&gt;

&lt;h2 id=&quot;bonus-bonus-message-of-the-day&quot;&gt;Bonus Bonus: Message of the Day&lt;/h2&gt;

&lt;p&gt;I don’t know about you, but I believe that 98% of the reasons why I learned how to program were to make computers print out funny messages.  To that end, I set up my Message of the Day accordingly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo vim /etc/motd
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;==================================
You are a gentleman and a scholar.
==================================
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you can’t think of any one-liner affirmations to put in your MOTD, check out this &lt;a href=&quot;https://github.com/rpalo/fanbot/blob/master/fanbot/compliments.py&quot;&gt;list of compliments I curated for a twitter bot to pepper my brother with&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, whenever you log in, your server will greet you with an uplifting message!  😁&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap Up&lt;/h2&gt;

&lt;p&gt;I know there’s a lot more for me to learn in the system administration realm.  I’m starting to stock up on books to read and videos to watch.  Did I miss anything important?  Do you have any extra protips?  Any great resources for learning?  Let me know about them!  Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Mon, 14 May 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/05/14/setting-up-centos/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/05/14/setting-up-centos/</guid>
        
        <category>linux</category>
        
        <category>sysadmin</category>
        
        <category>security</category>
        
        
      </item>
    
      <item>
        <title>PowerShell Tutorial (Especially for People Who Hate PowerShell)</title>
        <description>&lt;h2 id=&quot;preface&quot;&gt;Preface&lt;/h2&gt;

&lt;p&gt;This is a long article.  I’m putting a table of contents up here for the impatient, so you can find the specific section you’re looking for.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-started-with-powershell&quot;&gt;Getting Started with PowerShell&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#some-useful-commands-to-get-started&quot;&gt;Some Useful Commands to Get Started&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#just-tell-me-how-to-do-the-thing&quot;&gt;Just Tell Me How to Do the Thing!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#learning-to-love-powershell&quot;&gt;Learning to Love PowerShell&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;My relationship with the terminal – especially Windows PowerShell – has been a bit of a roller coaster.&lt;/p&gt;

&lt;p&gt;I first discovered the terminal when I heard about Python and didn’t know anything about anything.  Like the average person who uses computers for games and applications like Excel and PowerPoint, I went to the &lt;a href=&quot;https://www.python.org/&quot;&gt;Python Site&lt;/a&gt;, downloaded the installer, installed it, and clicked the icon.  Imagine my horror when something like this popped up:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/python-repl.png&quot; alt=&quot;The Python REPL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Where are the buttons?  What’s with the old-timey font?  What do I do with my mouse?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After beginning to program more and more and learning about the terminal, I began to love Bash.  Is it archaic?  Yes.  Are the commands nonintuitive and difficult to remember? Heck, yes.  For some reason, this just made me love it more.&lt;/p&gt;

&lt;p&gt;I had to work hard at it, and typing a bunch of what appears to be gobbledygook that had powerful results made me feel like a wizard.  For instance, typing &lt;code&gt;du -sk * | sort -n | tail&lt;/code&gt; (See?  Gobbledygook!) is a really fast way to see the top largest directories in your current directory.&lt;/p&gt;

&lt;p&gt;As I learned more, I was able to customize how it looked and get fonts, colors, and promts that made the terminal that much more inviting.&lt;/p&gt;

&lt;p&gt;So I decided to take my newfound programming powers to work.  Except that I work as a mechanical engineer, and that typically means SolidWorks and Windows.  So I opened up the recommended terminal, PowerShell.  And again, to my horror:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/powershell-1.png&quot; alt=&quot;The PowerShell terminal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;No problem,&lt;/em&gt; I thought.  I’ll just go to the preferences screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/powershell-customize.png&quot; alt=&quot;PowerShell preferences&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Oh, no.  We’re not in Kansas anymore.  Not exactly what I was used to.  So I went into PowerShell and tried to do some simple things.  Some things worked fine!  &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;cd&lt;/code&gt;, and &lt;code&gt;mkdir&lt;/code&gt; all worked like I was used to.  But I couldn’t figure out why setting the &lt;code&gt;$PATH&lt;/code&gt; was so hard.  Adn what was with all of these backslashes?  How come I couldn’t &lt;code&gt;sudo&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;More and more little irritations that kept reminding me I &lt;em&gt;wasn’t using Bash&lt;/em&gt; kept cropping up.  I gave up and installed &lt;a href=&quot;https://www.cygwin.com/&quot;&gt;Cygwin&lt;/a&gt;, which allowed me to have a Bash experience on my Windows 7 computer.  Except not quote.  Everything I tried to do to get Bash on my Windows machine was just … not quite right.&lt;/p&gt;

&lt;p&gt;Finally, I tried another approach and began working on learning PowerShell the right way, from the beginning, as another language.  As I learned, I found myself buying into the whole PowerShell philosophy and noticing things that were a little nicer than when I was using Bash.  Keep in mind, like everything, PowerShell is just another tool in the toolbox, and whether or not it’s the best tool really depends on the situation.&lt;/p&gt;

&lt;p&gt;I’m not going to give you a complete lesson on the basics of the PowerShell language.  I’m also not going to spend a lot of time telling you how to install it.  &lt;a href=&quot;https://github.com/PowerShell/PowerShell/tree/master/docs/learning-powershell&quot;&gt;This set of docs&lt;/a&gt; is fairly comprehensive, and it’s also a good cheat sheet for reference later.&lt;/p&gt;

&lt;p&gt;My goal here is to show you how things translate from other shells and get you started on your own PowerShell journey, so I’ll assume that you have at least a little bit of experience with a shell language like Bash.&lt;/p&gt;

&lt;h2 id=&quot;getting-started-with-powershell&quot;&gt;Getting Started with PowerShell&lt;/h2&gt;

&lt;p&gt;There are mental shifts away from how Bash-like shells do things that you need to make when you’re starting to learn PowerShell.  If you can get past your initial gut reaction of disgust when you see these differences, you might start to see that they actually make you more productive.&lt;/p&gt;

&lt;h3 id=&quot;everything-is-an-object&quot;&gt;Everything is an Object&lt;/h3&gt;

&lt;p&gt;This is probably the biggest difference that you have to get through your head.  In Unix shells, everything is plain text.  This makes things nice because you can expect text input into all your scripts and you know that if you output text, everything will probably be OK.&lt;/p&gt;

&lt;p&gt;However, the downside is that this makes inspecting specific data a nightmare of text parsing, and it makes working with anything other than text (floating point numbers, anyone?) a real pain.&lt;/p&gt;

&lt;p&gt;In PowerShell, which is actually built on top of &lt;a href=&quot;https://en.wikipedia.org/wiki/.NET_Framework&quot;&gt;.NET&lt;/a&gt;, everything is an object.  This will feel very comforting if you’re coming from Python, Ruby, JavaScript, or a similar language background.  Let’s see some examples and get our hands dirty.  Open up your PowerShell interpreter.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Side note: I put a PowerShell prompt (&lt;code&gt;PS&amp;gt;&lt;/code&gt;) in front of each command so you can tell what is output.  Every line that starts with &lt;code&gt;PS&amp;gt;&lt;/code&gt; is something for you to type.  Everything else is output.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-Process
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see a pretty long string of text.  We don’t have to stand for that!  We are terminal folk.  Code flows through our veins!  Try this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-Process | Sort-Object CPU -descending | Select-Object -first 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you should see a shorter list, reverse sorted by CPU time.  If you’re already getting itchy because all of these commands and options are so long, I address that in a couple sections.  Stay with me.&lt;/p&gt;

&lt;p&gt;The important thing to pay attention to here is the headers at the top of each column.  Each row of this table is actually a &lt;code&gt;System.Diagnostics.Process&lt;/code&gt; &lt;em&gt;object&lt;/em&gt;, not just a row of a table.  Don’t believe me?  Just check!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; (Get-Process)[0] | Get-TypeData
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See there?  The &lt;code&gt;Get-Process&lt;/code&gt; command returned a list of &lt;code&gt;Process&lt;/code&gt; objects, and we were able to select the first one through indexing (without splitting the output by \n!) and shuffle that through the &lt;code&gt;Get-TypeData&lt;/code&gt; command.  These items being objects gives us some power.  What if we only wanted their &lt;code&gt;ProcessName&lt;/code&gt;?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-Process | Sort-Object CPU -descending | Select Object ProcessName -first 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See how easy it was to access that?  We didn’t have to cut the fields delimited by tabs or colons and count which field we wanted (1…2…3…4…5!).  We just told it that we wanted the &lt;code&gt;ProcessName&lt;/code&gt; attribute.  No more parsing, splitting, joining, formatting output, etc.&lt;/p&gt;

&lt;h3 id=&quot;objects-have-types&quot;&gt;Objects Have Types&lt;/h3&gt;

&lt;p&gt;Another side effect of being on top of .NET and having everything be an object is that everything must have a type.  This may be confusing coming from a Bash shell that only has strings and strings that might get interpreted as commands.  Here’s what it does for us.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; 2 + 2
4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ah!  Are you amazed?  That would take way more work in Bash!  And don’t even get me started on:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; 4.2 / 3
1.4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PowerShell usually does a pretty good job of trying to figure out the types that you mean so you can feel as dynamic as with other shells and scripting languages and not have to strictly have types on everything.  But, if you really want to enforce a type, you can do so by prepending the object with its type in square brackets.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; &quot;2&quot; + 2
22  # A string
PS&amp;gt; [Int]&quot;2&quot; + 2
4  # An integer.  The conversion only applies to the &quot;2&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;predictable-command-structure&quot;&gt;Predictable Command Structure&lt;/h3&gt;

&lt;p&gt;This was one of the first things I noticed when I started using PowerShell.  I was looking at example commands on StackOverflow and I kept getting mad at how long the PowerShell commands were in comparison to the Bash commands.  For example, to list the contents of your current directory in Bash:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ls -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Powershell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-ChildItem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s so long!  And capital letters?  Come on.  The good news is that you don’t have to type the whole thing out if you don’t want to.  But, before I get to that, let me explain the rationale behind it.&lt;/p&gt;

&lt;h3 id=&quot;why-so-long&quot;&gt;Why So Long?&lt;/h3&gt;

&lt;p&gt;The creators of PowerShell wanted the commands to be extremely intuitive, such that you could almost guess the command that you needed.  This would be basically impossible with Bash.  There’s no way that you could guess that &lt;code&gt;cat&lt;/code&gt; is the common command to read a file to the terminal.  Once you learn it, it makes sense that it’s short for “concatenate,” but it’s not intuitive by itself.&lt;/p&gt;

&lt;p&gt;PowerShell commands were designed after a simple pattern: “Verb-Noun.”  The creators of PowerShell tried to keep the number of verbs to a minimum.  Common ones you’ll see are &lt;code&gt;Get, New, Add, Clear, Export, Remove, Set, Update, and Write&lt;/code&gt;.  The nouns are also usually pretty intuitive: &lt;code&gt;Process, Item, Object, Date, Job, and Command&lt;/code&gt; are a few.&lt;/p&gt;

&lt;p&gt;This consistent pattern allows someone to look at a script that has commands in it that they’ve never used and still have some idea about what the script is doing.&lt;/p&gt;

&lt;p&gt;The other benefit of keeping a consistent pattern is that PowerShell can detect the “verb” and “noun” sections of commands.  For example, do you want to see all of the commands with the verb “New?”&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-Command -verb New
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In fact, if you know what you want to do, but you can’t remember the command for it, Get-Command is one of a few commands that will be your friend.  What if you wanted to see what kinds of things you could do to “Job” objects?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-Command -noun Job
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes, the commands are longer to type than their equivalent, typically terse Bash commands, but with this additional verbosity comes ease of use, less memorizing of commands, and helpful tooling to keep you productive.&lt;/p&gt;

&lt;h4 id=&quot;aliases-make-your-life-easy&quot;&gt;Aliases Make Your Life Easy&lt;/h4&gt;

&lt;p&gt;Even though the commands are long and verbose, PowerShell knows that people using the terminal are lazy (in a good way!), and it doesn’t want to get in your way.  It has a ton of built-in aliases to make your life easier and make you feel more comfortable, and it can actually do some aliasing on the fly.&lt;/p&gt;

&lt;p&gt;Remember that command we ran earlier to see all of the files in our directory?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-ChildItem

# You can also do:
PS&amp;gt; gci
PS&amp;gt; dir

# And just to make you feel a little bit more at home...
PS&amp;gt; ls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Want to see all of the available aliases?  By this point, you shouldn’t be surprised that the command is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-Alias
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using these aliases during shell sessions can keep you productive and save your fingers from wearing out without giving up the functionality and readability of the longer commands they stand for.&lt;/p&gt;

&lt;h4 id=&quot;best-practice-for-scripting&quot;&gt;Best Practice for Scripting&lt;/h4&gt;

&lt;p&gt;Just a word on best practice: when you’re doing command-line work by yourself, feel free to use as many aliases as you want.  Alias it up.  Get your productivity on.&lt;/p&gt;

&lt;p&gt;However, if you’re writing a script or sharing code with someone, it’s probably best to type the whole command and whole flag names out.  Trust me, your future self and coworkers will thank you.&lt;/p&gt;

&lt;h2 id=&quot;some-useful-commands-to-get-started&quot;&gt;Some Useful Commands to Get Started&lt;/h2&gt;

&lt;p&gt;While the best way to learn PowerShell is to dive in and practice, I’m going to share some commands with you here that are really helpful when you’re a little stuck.&lt;/p&gt;

&lt;h3 id=&quot;when-youre-not-sure-which-command-to-use&quot;&gt;When You’re Not Sure Which Command to Use&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-Command
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will provide you with more information about available commands.  You can zero in on what you want by specifying -verb or -noun parameters.  In order to get more information about one or two particular commands, pipe the output into &lt;code&gt;Format-List&lt;/code&gt;.  This will give you the options, location, and some other useful features.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-Command Get-Alias | Format-List
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;when-youre-not-sure-what-a-command-does&quot;&gt;When You’re Not Sure What a Command Does&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-Help command

# You can also get help by adding the ? parameter
PS&amp;gt; command -?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Get-Help&lt;/code&gt; is roughly the &lt;code&gt;man&lt;/code&gt; of the PowerShell world.  Are you starting to see the benefits of intuitive commands yet?  Actually, &lt;code&gt;Get-Help&lt;/code&gt; has quite a few useful flags as well.  It’s probably a good idea to take a look at them using the method we discussed above:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-Command Get-Help | Format-List

# Or, if you're feeling cheeky:

PS&amp;gt; Get-Help Get-Help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My favorite is that you can ask it specifically for example usage only.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-Help Get-Alias -examples
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;when-youre-not-sure-what-properties-your-object-has&quot;&gt;When You’re Not Sure What Properties Your Object Has&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-Process | Get-Member

# Another similar command:

PS&amp;gt; (Get-Process)[0] | Format-List
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you know what data you want, but you just don’t know what it’s called, &lt;em&gt;or&lt;/em&gt; if you aren’t even sure what data is available to you, these commands will help you “see” your objects a little better.&lt;/p&gt;

&lt;h3 id=&quot;when-you-want-to-get-a-portion-of-the-data&quot;&gt;When You Want to Get a Portion of the Data&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-Process | Select-Object Id, ProcessName -last 20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Select-Object&lt;/code&gt; is your general purpose stuff-whittler.  You can specify particular attributes you want and how many you want.&lt;/p&gt;

&lt;h3 id=&quot;when-you-want-to-filter-your-data&quot;&gt;When You Want to Filter Your Data&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-Process | Where-Object WS -gt 150MB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a few ways to use the &lt;code&gt;Where-Object&lt;/code&gt; command, but this is the simplest one.  In the example above, I selected only the processes whose working set (memory usage) was greater than 150MB.  (Also, can we gush a little about how PowerShell can do KB/MB/GB math?)&lt;/p&gt;

&lt;h2 id=&quot;just-tell-me-how-to-do-the-thing&quot;&gt;Just Tell Me How to Do the Thing!&lt;/h2&gt;

&lt;p&gt;This last section will be just a few snippets for the impatient among you.  If you’re just trying to get one darn thing done in PowerShell and you can’t make it work, these tips should hopefully help.&lt;/p&gt;

&lt;h3 id=&quot;basic-unix-commands-translated&quot;&gt;Basic Unix Commands Translated&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;# pwd
PS&amp;gt; Get-Location  # or gl or pwd

# ls
PS&amp;gt; Get-ChildItem  # or gci or dir or ls

# cd
PS&amp;gt; Set-Location  # or sl or chdir or cd

# cp
PS&amp;gt; Copy-Item  # or copy or cpi or cp

# mv
PS&amp;gt; Move-Item  # or move or mi or mv

# cat
PS&amp;gt; Get-Content  # or gc or type

# mkdir
PS&amp;gt; New-Item -ItemType Directory  # or ni -ItemType Directory or mkdir

# touch
PS&amp;gt; New-Item -ItemType File  # or ni

# rm
PS&amp;gt; Remove-Item  # or del or erase or ri or rm

# rm -rf
PS&amp;gt; Remove-Item -Recurse -Force  # or rm -recurse -force

# head or tail
PS&amp;gt; Select-Object -first # or -last
# usage: Get-Process | Select-Object -first 10

# find
PS&amp;gt; Get-ChildItem -filter *.rb -recurse .
# but, for a slightly easier to read version:
PS&amp;gt; Get-ChildItem -filter *.rb -recurse . | Select-Object FullName
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;access-the-path-and-other-environment-variables&quot;&gt;Access the Path (and Other Environment Variables)&lt;/h3&gt;

&lt;p&gt;In PowerShell, a lot of things get treated like file locations – and environment variables are no exception.  These special groups of file-like variables are called PSDrives.  In the same way you can ask the C: drive what file is at “\Users\ryan\desktop” with a &lt;code&gt;Get-ChildItem C:\Users\ryan\Desktop&lt;/code&gt;, you can do the same thing with &lt;code&gt;env:&lt;/code&gt;, the environment PSDrive.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Get-ChildItem env:

# and to get a specific one
PS&amp;gt; Get-Content env:PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One super neat thing about these PSDrives is that you can actually read a file location like it’s a variable.  So you can also get to an environment variable this way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; $env:PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This second way is probably the most popular way to get the PATH variable.&lt;/p&gt;

&lt;h3 id=&quot;customize-your-profile&quot;&gt;Customize Your Profile&lt;/h3&gt;

&lt;p&gt;If you’re into command lines and you’re anything like me, you’re probably wondering how to customize them.  The answer lies in &lt;code&gt;$profile&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;finding-the-profile&quot;&gt;Finding the Profile&lt;/h4&gt;

&lt;p&gt;There are actually several profiles, depending on which “Host” you’re using to interface with PowerShell.  For instance, if you’re just using the regular PowerShell command line, the name of your profile will be Microsoft.PowerShell_profile.ps1.  However, if you are working in the PowerShell Integrated Scripting Environment (ISE), your profile will be Microsoft.PowerShellISE_profile.ps1.  You can mostly ignore this, because if you ever want to know, just ask:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; $profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, there are additional options.  If you want to create a profile that will work for the ISE or the regular command line, you’ll want &lt;code&gt;$profile.CurrentUserAllHosts&lt;/code&gt;.  Or, if you want to configure a profile for all users on your computer, you’ll want &lt;code&gt;$profile.AllUsersCurrentHost&lt;/code&gt;.  There are a few options, and you can see them all with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; $profile | Get-Member -type NoteProperty
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;creating-customizations&quot;&gt;Creating Customizations&lt;/h4&gt;

&lt;p&gt;Your profile works just like &lt;code&gt;.bash_profile&lt;/code&gt; does in Bash.  It’s just a script that gets run before you start working in PowerShell.  You can add aliases (although see the note below), functions, variables, and set custom settings.  The simplest way to check if you already have a profile is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PS&amp;gt; Test-Path $profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And to start creating your profile:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;# Use whichever editor you love best
PS&amp;gt; code $profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are a couple of useful settings you might like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;# Microsoft.PowerShell_profile.ps1

# You can customize the window itself by accessing $Host.UI.RawUI
$window = $Host.UI.RawUI
$window.WindowTitle = &quot;Pa-pa-pa-pa-pa-pa-POWERSHELL&quot;
$window.BackgroundColor = &quot;Black&quot;
$window.ForegroundColor = &quot;Gray&quot;

# You can define functions (remember to follow the Verb-Noun convention!)
function Count-History {
  (Get-History | Measure-Object).count
}

function beep {
  echo `a
}

function Edit-Profile {
  [CmdletBinding()]
  [Alias(&quot;ep&quot;)]
  PARAM()

  vim $profile
}

# You can set aliases.
# NOTE: In PowerShell, you can only alias simple commands.
# Unlike Bash, you can't alias commands with arguments flags.
# If you want to do that, you should define a function instead.
Set-Alias touch New-Item  # old habits die hard, amirite?

# You can customize your prompt!
function prompt {
  # ... see the next section for details
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;customize-your-prompt&quot;&gt;Customize Your Prompt&lt;/h3&gt;

&lt;p&gt;There are two ways to do this: the simple way and the complicated way.&lt;/p&gt;

&lt;h4 id=&quot;the-simple-prompt&quot;&gt;The Simple Prompt&lt;/h4&gt;

&lt;p&gt;The simplest way to customize your prompt is by defining the &lt;code&gt;prompt&lt;/code&gt; function, either manually or in your profile.  For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;function prompt {
  $histCount = (Get-History | Measure-Object).count
  return &quot;POWERSHELL LEVEL OVER $histCount THOUSAND! &amp;gt;&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is an amusing way to print the number of inputs that you’ve already typed inside your prompt.  Whatever string you return is what gets set as the prompt.&lt;/p&gt;

&lt;h4 id=&quot;the-complicated-prompt&quot;&gt;The Complicated Prompt&lt;/h4&gt;

&lt;p&gt;Basically, you can do whatever you want in your prompt function, as long as it returns a string at the end.  For example, here’s a more complicated prompt.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;function prompt {
  $loc = (Get-Location).Path.Replace(&quot;$HOME&quot;, &quot;~&quot;)
  $gitBranch = git branch | Select-String &quot;\*&quot;
  if (!$gitBranch) {
    $gitBranch = &quot;&quot;
  } else {
    $gitBranch = $gitBranch.ToString().Replace(&quot;`* &quot;, &quot;&quot;)
  }
  $hisCount = (Get-History | Measure-Object).count
  WriteHost -ForegroundColor yellow &quot;`n $loc&quot;
  WriteHost -NoNewLine &quot;PS [$histCount] $gitBranch -&amp;gt;&quot;
  return &quot; &quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see that I achieve a multi-line prompt by using &lt;code&gt;Write-Host&lt;/code&gt; a number of times.  Lastly, I simply return a space.  My prompt ends up coming out like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;~/Documents/blog
PS [102] master -&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;get-it-to-not-look-ugly&quot;&gt;Get It to Not Look Ugly&lt;/h3&gt;

&lt;p&gt;This is a tough one.  Like I mentioned above, on Windows, PowerShell runs in a window with not very many customization options.  Especially for someone who is used to being able to tweedle every knob of their text editor to their liking, it’s almost painful.  There are two pretty good alternatives, though.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://cmder.net/&quot;&gt;Cmder&lt;/a&gt;: This one is built on top of ConEmu, which is a pretty popular terminal emulator for Windows.  If you like Notepad++, I think you’ll really like this, because it feels similar.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://hyper.is/&quot;&gt;Hyper&lt;/a&gt;: This one is nice for those of you that don’t have a vendetta against Electron applications and are more front-end-edly minded.  The customization and settings are all done in JavaScript and CSS, which makes searching for help really nice.  As might be expected from the JavaScript crowd, there are about a gazillion plugins, some of which are stable and quite good.  There’s a lot of work being done on Hyper right now, so you may have some stability issues, but over the last few months, it’s really gotten quite a bit faster and hiccup-less.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;find-more-resources&quot;&gt;Find More Resources&lt;/h3&gt;

&lt;p&gt;The best place to go is definitely the &lt;a href=&quot;https://docs.microsoft.com/en-us/powershell/&quot;&gt;official docs&lt;/a&gt;.  There’s so much content there that they should have the answers you need.  Since PowerShell is now open-source, you can also check out their &lt;a href=&quot;https://github.com/PowerShell&quot;&gt;GitHub repositories&lt;/a&gt;.  There are some great docs and getting started guides there as well.&lt;/p&gt;

&lt;p&gt;For those who like to learn from books, I would recommend the &lt;a href=&quot;https://amzn.to/2r72pxp&quot;&gt;Windows PowerShell Cookbook&lt;/a&gt; by Lee Holmes, as well as &lt;a href=&quot;https://amzn.to/2r5V7Jm&quot;&gt;Windows PowerShell in Action&lt;/a&gt; by Bruce Payette and Richard Siddaway.  There is a &lt;em&gt;lot&lt;/em&gt; of knowledge in those two books.&lt;/p&gt;

&lt;h2 id=&quot;learning-to-love-powershell&quot;&gt;Learning to Love PowerShell&lt;/h2&gt;

&lt;p&gt;The goal of this article is to show that just because PowerShell is different from what you are used to, it’s not necessarily bad.&lt;/p&gt;

&lt;p&gt;If you take the time to really dig into the differences and learn the reasoning and design decisions behind them, you’ll start to see their strengths and value.  You might actually miss dealing with typed objects in your command line when you go back to other shells.&lt;/p&gt;

&lt;p&gt;Having to parse text streams might start to feel archaic.  You might find yourself using longer, more consistent function names everywhere as you realize how nice it is to be able to read and understand your scripts six months after you write them.&lt;/p&gt;

&lt;p&gt;Or, you might simply stop telling people how much you hate PowerShell whenever they mention it.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Originally posted on &lt;a href=&quot;https://simpleprogrammer.com/powershell-tutorial/&quot;&gt;Simple Programmer&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 28 Apr 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/04/28/powershell-tutorial/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/04/28/powershell-tutorial/</guid>
        
        <category>powershell</category>
        
        <category>tutorial</category>
        
        <category>bash</category>
        
        <category>terminal</category>
        
        
      </item>
    
      <item>
        <title>Keep VS Code from Becoming an IDE</title>
        <description>&lt;p&gt;Some people like a big, heavy, comfy IDE.  Some people like a light, zippy, relatively simple text editor and a terminal window.  And some people like Emacs.  We don’t talk about them.  (I’m joking, I’m sorry, I couldn’t resist.)  I’m part of the zippy editor/terminal group.  This is a tip to help keep the VS Code editor lightweight, like you’ve come to know and love.&lt;/p&gt;

&lt;p&gt;I was using &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VS Code&lt;/a&gt; last week, and it was starting to feel really sluggish.  It seemed like it was eating a lot of memory up (relatively) and I wasn’t sure what was happening.&lt;/p&gt;

&lt;p&gt;And then it hit me:&lt;/p&gt;

&lt;h2 id=&quot;i-had-too-many-extensions-running&quot;&gt;I Had Too Many Extensions Running&lt;/h2&gt;

&lt;p&gt;I love tools.  Especially new shiny ones.  I don’t think I’m alone on this.  Because of this, I frequently install new extensions just to try them out and kick the tires a little bit.  I then promptly forget about them, and leave them not only installed but also activated.&lt;/p&gt;

&lt;p&gt;Each one of these extensions takes up memory, and uses battery, and slows you down.  They can add time to startup speed, too.  Keep in mind, my laptop isn’t all that burly, and a new computer or more memory isn’t in the cards for a little while, so every little bit of memory I can conserve is worth it.&lt;/p&gt;

&lt;h2 id=&quot;heres-the-fix&quot;&gt;Here’s the Fix&lt;/h2&gt;

&lt;p&gt;Turn them all off.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You heard me.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ok, maybe not all of them.  But you don’t need the entire Go-lang support system when you’re working on a Ruby project do you?  You probably don’t need all the Python support either.  Or the C# snippets.&lt;/p&gt;

&lt;p&gt;Go through each of your extensions in the extensions bar and disable them.  You don’t have to reload until you’ve done them all.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/extensions-disable.gif&quot; alt=&quot;Disabling an extension&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you are fast.  You are sleek.  &lt;em&gt;You.  Are.  Speed.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/extensions-installed.gif&quot; alt=&quot;Look at all those disabled extensions&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ok-ok-not-all-of-them&quot;&gt;OK, OK, Not All of Them&lt;/h2&gt;

&lt;p&gt;In my opinion, there are two kinds of extensions.  The first are language support extensions.  As I pick up a new language, I discover there’s an extension that makes writing it better.  Python, Go, Ruby, language-specific linting, prettifying, snippets, and intellisense.&lt;/p&gt;

&lt;p&gt;Apparently, a good portion of these are set to only activate when you’re working on a file with that particular language.  (Thanks! &lt;a href=&quot;https://dev.to/sirwindfield&quot;&gt;@SirWindfield&lt;/a&gt;!)  However, some less well behaved ones aren’t set up this way.  You can check when an extension is set to activate by looking in your extensions directory.  On my system, it’s at &lt;code&gt;~/.vscode/extensions/&lt;/code&gt;.  You’ll see a directory for each extension.  If you look into an extension’s &lt;code&gt;package.json&lt;/code&gt;, you’ll likely see a key for &lt;code&gt;activationEvents&lt;/code&gt;.  Well-behaved extensions will only activate on certain filetypes, commands, and terminal activities.  Troublemakers will simply have an innocuous little “*”.  These are the ones you want to disable.&lt;/p&gt;

&lt;p&gt;If this seems like too much work, just do what I do and disable all of these language-specific ones.&lt;/p&gt;

&lt;p&gt;The other kind of extensions are the general developer happiness extensions.  Things like &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=pajoma.vscode-journal&quot;&gt;journaling support&lt;/a&gt;, &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=2gua.rainbow-brackets&quot;&gt;colored bracket matchers&lt;/a&gt;, &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=dustinsanders.an-old-hope-theme-vscode&quot;&gt;Star Wars-based themes&lt;/a&gt;, and, of course, &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Perkovec.emoji&quot;&gt;emoji support&lt;/a&gt;.  Feel free to leave these enabled all the time.  You deserve to be happy.&lt;/p&gt;

&lt;h2 id=&quot;but-what-if-i-want-my-extensions&quot;&gt;But What if I Want My Extensions?&lt;/h2&gt;

&lt;p&gt;Don’t panic.  If you go to work on a project that needs those language-specific ones, you can enable them &lt;em&gt;just in your workspace&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/extensions-enable-workspace.gif&quot; alt=&quot;Enabling within a workspace&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you get the full power of your development environment, and your computer loves you.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Do you have some favorite extensions?  Any that are a little obscure or don’t get a lot of love?  Let me know about them.  I’m always looking for another extension to add to my list.  I might even leave it enabled.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Edit 4/28/18: Updated some info on when extensions activate themselves, thanks to &lt;a href=&quot;https://dev.to/sirwindfield&quot;&gt;@SirWindfield&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Apr 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/04/26/keep-vs-code-light/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/04/26/keep-vs-code-light/</guid>
        
        <category>editors</category>
        
        <category>vscode</category>
        
        
      </item>
    
  </channel>
</rss>
