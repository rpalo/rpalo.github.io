<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>assert_not magic?</title>
    <description>Programming blog by Ryan Palo.  Code is not magic, and anyone can do it.  Python, Ruby, JavaScript, shell scripting, systems, the web, and more!
</description>
    <link>https://assertnotmagic.com</link>
    <atom:link href="https://assertnotmagic.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 22 Apr 2018 14:59:47 -0700</pubDate>
    <lastBuildDate>Sun, 22 Apr 2018 14:59:47 -0700</lastBuildDate>
    <generator>Jekyll v3.5.0</generator>
    
      <item>
        <title>Ruby Concepts - Singleton Classes</title>
        <description>&lt;p&gt;&lt;em&gt;Cover Image credit: &lt;a href=&quot;https://www.sitepoint.com/author/ssaeed/&quot;&gt;Samier Saeed&lt;/a&gt; and &lt;a href=&quot;https://www.sitepoint.com/javascript-design-patterns-singleton/&quot;&gt;SitePoint&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Have you ever wondered what a “singleton class” is?  Have you ever been talking to someone or reading a blog post and “singleton class” or “singleton method” got used, and you just smile and nod, making a mental note to look it up later?  Now is your time.  Now is your moment.  I’m hoping to explain this concept in more intuitive language and show you how handy it can be.&lt;/p&gt;

&lt;p&gt;Side note: a lot of this information came from reading &lt;a href=&quot;https://amzn.to/2K7hneD&quot;&gt;The Well-Grounded Rubyist&lt;/a&gt; by &lt;a href=&quot;http://www.davidablack.net/&quot;&gt;David A. Black&lt;/a&gt;.  This book has a ton of great information and is currently one of my favorite books on Ruby.&lt;/p&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;/h2&gt;

&lt;p&gt;If you’ve written much Ruby, you’ve used these “singleton classes” already without knowing it!  First, I’ll show you the code that you’ve probably already written, so you have some context.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class Config
  def self.from_file(filename)
    Config.new(YAML.load_file(filename))
  end
end

dev_config = Config.from_file(&quot;config.dev.yaml&quot;)
# =&amp;gt; Config object with dev settings
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may have also seen it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;module Geometry
  class &amp;lt;&amp;lt; self
    def rect_area(length, width)
      length * width
    end
  end
end

Geometry.rect_area(4, 5)
# =&amp;gt; 20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Up until now, you’ve probably referred to these as “class methods.”  You are mostly right.  But why do they work?  What’s happening here?&lt;/p&gt;

&lt;h2 id=&quot;individualization&quot;&gt;Individualization&lt;/h2&gt;

&lt;p&gt;This is a concept that is central to what makes Ruby so awesome.  Individual objects, even of the same class, are different from each other, and they can have different methods defined on them.  I’m going to shamelessly use our pets to aid in this example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class Pet
  def smolder
    &quot;Generic cute pet smolder&quot;
  end
end

succulent = Pet.new
momo = Pet.new
willy = Pet.new

def momo.smolder
  &quot;sassy cat smolder&quot;
end

def willy.smolder
  &quot;well-meaning dingus smolder&quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, when we call &lt;code&gt;smolder&lt;/code&gt; on &lt;code&gt;succulent&lt;/code&gt;, which we haven’t changed, things go as planned.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;succulent.smolder
# =&amp;gt; Generic cute pet smolder&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/singleton-succulent.jpg&quot; alt=&quot;Our succulent&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But when we call &lt;code&gt;smolder&lt;/code&gt; on &lt;code&gt;willy&lt;/code&gt; or &lt;code&gt;momo&lt;/code&gt;, something different happens!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;momo.smolder
# =&amp;gt; &quot;sassy cat smolder&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/singleton-momo.jpg&quot; alt=&quot;Momo is our cat&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;willy.smolder
# =&amp;gt; &quot;well-meaning dingus smolder&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/singleton-willy.jpg&quot; alt=&quot;Willy is our dog&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, how does this work?  Did we re-define &lt;code&gt;smolder&lt;/code&gt; for each pet?  Do me a favor and check out the output of the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;succulent.singleton_methods
# =&amp;gt; []
momo.singleton_methods
# =&amp;gt; [:smolder]
willy.singleton_methods
# =&amp;gt; [:smolder]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s right!  You’re using a &lt;strong&gt;singleton method&lt;/strong&gt;!  Now, I think, we’re ready to talk about what a &lt;strong&gt;singleton class&lt;/strong&gt; is.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-singleton-class&quot;&gt;What is a Singleton Class?&lt;/h2&gt;

&lt;p&gt;First, a more general programming, less Ruby-specific question: what is a singleton?  While there are various definitions that might be more specific for different cases, at its core, a &lt;strong&gt;singleton&lt;/strong&gt; is just something that there is only one of.  It is the only one of its kind.&lt;/p&gt;

&lt;p&gt;What does that mean in the context of Ruby?  Here it is: when you instantiate an object from a class in Ruby, it knows about the methods that its class gives it.  It also knows how to look up all of the ancestors to its class.  That’s why inheritance works.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Oh, my class doesn’t have that method?  Let’s check its parent class.  And that class’s parent class.  Etc.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the cool things about Ruby is that the ancestry chain is very unambiguous by design.  There is a specific set of rules by which objects search their ancestors, such that there is never any doubt which method gets called.&lt;/p&gt;

&lt;p&gt;In addition to knowing about its class, each object is created with a &lt;strong&gt;singleton class&lt;/strong&gt; that it knows about.  All the singleton class is is a kind of “ghost class” or, more simply, a bag to hold any methods that are defined &lt;em&gt;only for this particular object&lt;/em&gt;.  Try this out:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;momo.singleton_class
# =&amp;gt; #&amp;lt;Class:#&amp;lt;Pet:0x00007fea40060220&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the inheritance hierarchy, it sits invisibly, just before the objects actual class.  However, you can’t see it by looking at the object’s ancestors.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;momo.class.ancestors
# =&amp;gt; [Pet, Object, Kernel, BasicObject]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But if we look at the ancestry tree for the &lt;em&gt;singleton class itself&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;momo.singleton_class.ancestors
# =&amp;gt; [#&amp;lt;Class:#&amp;lt;Pet:0x00007fea40060220&amp;gt;&amp;gt;, Pet, Object, Kernel, BasicObject]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see that it comes in right at the beginning.  Thus, when &lt;code&gt;momo&lt;/code&gt; goes to look for the &lt;code&gt;smolder&lt;/code&gt; method, it looks &lt;em&gt;first&lt;/em&gt; in its singleton class.  Since there is a &lt;code&gt;smolder&lt;/code&gt; method there, it calls that one, instead of looking further up the tree to the one defined in the &lt;code&gt;Pet&lt;/code&gt; class.&lt;/p&gt;

&lt;h2 id=&quot;what-does-this-have-to-do-with-class-methods&quot;&gt;What Does This Have to Do with Class Methods?&lt;/h2&gt;

&lt;p&gt;Now is when we start to see the power of the singleton class.  Don’t forget that every class is just an object of the class &lt;code&gt;Class&lt;/code&gt;.  If that sentence made you start to hyperventilate, don’t worry.  I’ll explain.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;Pet.class
# =&amp;gt; Class
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And &lt;code&gt;Class&lt;/code&gt; is just a class that provides some methods to every instance of it (classes) you create, just like any other class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;Class.instance_methods(false)
# =&amp;gt; [:new, :allocate, :superclass]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, really, when you’re defining “class methods” that you plan to call directly on the class, what you’re actually doing is defining methods on that particular Class object — in its singleton class!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class Pet
  def self.random
    %w{cat dog bird fish banana}.sample
  end
end

Pet.singleton_methods
# =&amp;gt; [:random]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;And…&lt;/em&gt; if the singleton class exists, it becomes the parent class to singleton_classes of classes that inherit from the main class.  An example should help.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class Pet
  def self.random
    %w{cat dog bird fish banana}.sample
  end
end

class Reptile &amp;lt; Pet
  def self.types
    %w{lizard snake other}
  end
end

Reptile.singleton_methods
# =&amp;gt; [:types, :random]
Reptile.singleton_class.ancestors
# =&amp;gt; [#&amp;lt;Class:Reptile&amp;gt;, #&amp;lt;Class:Pet&amp;gt;, #&amp;lt;Class:Object&amp;gt;, #&amp;lt;Class:BasicObject&amp;gt;, Class, Module, Object, Kernel, BasicObject]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See how &lt;code&gt;Reptile&lt;/code&gt;’s singleton class inherits from &lt;code&gt;Pet&lt;/code&gt;’s singleton class, and thus the “class methods” available to &lt;code&gt;Pet&lt;/code&gt; are also available to &lt;code&gt;Reptile&lt;/code&gt;?&lt;/p&gt;

&lt;h2 id=&quot;other-tidbits&quot;&gt;Other Tidbits&lt;/h2&gt;

&lt;p&gt;I think so far, we’ve pretty much covered all of the important bits.  There are, however, a couple more interesting details that I thought were cool that are sort of tangentially related: the somewhat hard to decipher &lt;code&gt;class &amp;lt;&amp;lt; self&lt;/code&gt; syntax, the different ways of creating class methods, and the use of &lt;code&gt;extend&lt;/code&gt;.  Feel free to read on if you’re interested.&lt;/p&gt;

&lt;h3 id=&quot;class--self&quot;&gt;&lt;code&gt;Class &amp;lt;&amp;lt; self&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;There are actually two ways to use the &lt;code&gt;class&lt;/code&gt; keyword: directly followed by a constant (a la &lt;code&gt;class Gelato&lt;/code&gt;), or followed by the “shovel operator” and an object (a la &lt;code&gt;class &amp;lt;&amp;lt; momo&lt;/code&gt;).  You already know about the first one — it’s the way you usually declare a class!  Let’s focus on the second one, which is the syntax to directly open up an object’s singleton class.  You can think about it as essentially the same as defining methods like we were doing above.&lt;/p&gt;

&lt;p&gt;What I mean is this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# This:
def momo.snug
  &quot;*snug*&quot;
end

# is the same (pretty much) as this:
class &amp;lt;&amp;lt; momo
  def snug
    &quot;*snug*&quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You do this all the time when you re-open regular classes to add more functionality.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class Gelato
  attr_reader :solidity

  def initialize
    @solidity = 100
  end

  def melt
    @solidity -= 10
  end
end

# And re-open it to add one more method

class Gelato
  def refreeze
    @solidity = 100
  end
end

dessert = Gelato.new
5.times { dessert.melt }
dessert.solidity
# =&amp;gt; 50
dessert.refreeze
# =&amp;gt; 100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The syntax &lt;code&gt;class &amp;lt;&amp;lt; object; end&lt;/code&gt; is just another way of re-opening the object’s singleton class.  The benefit here is that you can define constants and multiple methods all at once instead of one at a time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# Instead of:
def momo.pounce
  &quot;pounce!&quot;
end

def momo.hiss
  &quot;HISS&quot;
end

def momo.lives
  9
end

# We can do
class &amp;lt;&amp;lt; momo
  def pounce
    &quot;pounce!&quot;
  end

  def hiss
    &quot;HISS&quot;
  end

  def lives
    9
  end
end

momo.singleton_methods
# =&amp;gt; [:pounce, :hiss, :lives, :smolder]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s a common pattern when adding multiple class methods to a class to see the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class Pet
  class &amp;lt;&amp;lt; self
    def random
      %w{cat dog bird fish banana}.sample
    end
  end
end

# Which, since &quot;self&quot; is inside of the class
# declaration, means that 'self == Pet', so you could
# also do this:

class Pet
  class &amp;lt;&amp;lt; Pet
    def random
      # ...
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Maybe you’ve seen this pattern and not known what it is, or maybe you knew it adds class methods but didn’t know what why.  Now you know!  It’s all thanks to the singleton class!&lt;/p&gt;

&lt;h2 id=&quot;class--self-vs-def-selfmethod-vs-def-petmethod&quot;&gt;&lt;code&gt;class &amp;lt;&amp;lt; self&lt;/code&gt; vs &lt;code&gt;def self.method&lt;/code&gt; vs &lt;code&gt;def Pet.method&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;There are a few different ways to declare class methods.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# 1. In global scope
def Pet.random
  %w{cat dog bird fish banana}.sample
end

# 2. Inside the class definition, using 'self'
class Pet
  def self.random
    %w{cat dog bird fish banana}.sample
  end
end

# 3. Inside the class definition, using the shovel
class Pet
  class &amp;lt;&amp;lt; self
    def random
      %w{cat dog bird fish banana}.sample
    end
  end
end

# 4. Outside the class definition, using the shovel
class &amp;lt;&amp;lt; Pet
  def random
    %w{cat dog bird fish banana}.sample
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So what’s the difference??  When do you use one or the other?&lt;/p&gt;

&lt;p&gt;The good news is that they’re all basically the same.  You can use whichever one makes you the happiest and matches the style of your codebase.  The only difference is with #3, and how it deals with constants and scope.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;MAX_PETS = 3

def Pet.outer_max_pets
  MAX_PETS
end

class Pet
  MAX_PETS = 1000

  class &amp;lt;&amp;lt; self
    def inner_max_pets
      MAX_PETS
    end
  end
end

Pet.outer_max_pets
# =&amp;gt; 3
Pet.inner_max_pets
# =&amp;gt; 1000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See that the &lt;code&gt;inner_max_pets&lt;/code&gt; function has access to the scope inside the &lt;code&gt;Pet&lt;/code&gt; class and the constants there?  That’s really the only difference.  Feel free to carry on using your favorite syntax with confidence.&lt;/p&gt;

&lt;h2 id=&quot;using-extend-to-safely-modify-built-in-classes&quot;&gt;Using Extend to Safely Modify Built-In Classes&lt;/h2&gt;

&lt;p&gt;Hopefully, at some point, you’ve read a blog post or had someone warn you about the dangers of re-opening built-in Ruby classes.  Doing something like the following should be done veeeery carefully.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class String
  def verbify
    self + &quot;ify&quot;
  end
end

&quot;banana&quot;.verbify
# =&amp;gt; &quot;bananaify&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The dangers include accidentally overwriting built-in methods, having methods clash with other libraries in the same project, and generally making things not behave as expected.  The &lt;code&gt;extend&lt;/code&gt; keyword can help with all of that!&lt;/p&gt;

&lt;h3 id=&quot;what-is-extend&quot;&gt;What is Extend?&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;extend&lt;/code&gt; keyword is a lot like &lt;code&gt;include&lt;/code&gt; in that it allows you to load functionality into your class/module from other classes/modules.  The difference, however, is that &lt;code&gt;extend&lt;/code&gt; puts these methods onto the target object’s singleton class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;module Wigglable
  def wiggle
    &quot;*shimmy*&quot;
  end
end

willy.extend(Wiggleable)
willy.singleton_methods
# =&amp;gt; [:wiggle, :smolder]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thus, if you use &lt;code&gt;extend&lt;/code&gt; inside a class definition instead of &lt;code&gt;include&lt;/code&gt;, the methods will get added to the class’s singleton class as class methods instead of being added to the class itself as instance methods.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;module Hissy
  def hiss
    &quot;HISS&quot;
  end
end

class Reptile
  extend Hissy
end

snek = Reptile.new
snek.hiss
# =&amp;gt; Error!  Undefined method hiss for 'snek'
Reptile.hiss
# =&amp;gt; &quot;HISS&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;how-does-that-help-us&quot;&gt;How Does That Help Us?&lt;/h3&gt;

&lt;p&gt;So, let’s say that we really needed to have that &lt;code&gt;verbify&lt;/code&gt; method on the strings we were using.  While you could create and use a subclass of &lt;code&gt;String&lt;/code&gt;, another option would be to extend individual strings!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;module Verby
  def verbify
    self + &quot;ify&quot;
  end
end

noun = &quot;pup&quot;
noun.extend(Verby)
noun.verbify
# =&amp;gt; &quot;pupify&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;cheesy-wrap-up&quot;&gt;Cheesy Wrap Up&lt;/h2&gt;

&lt;p&gt;So remember, singletons aren’t just an intimidating-sounding but not-super-complicated Ruby topic.  &lt;em&gt;You&lt;/em&gt; are the &lt;em&gt;real&lt;/em&gt; &lt;strong&gt;singleton&lt;/strong&gt; — yes, you’re a human, but there’s nobody else quite like you.  You’ve got &lt;strong&gt;class&lt;/strong&gt; and your own &lt;strong&gt;methods&lt;/strong&gt; of doing things, and that’s valuable.  And now we’ve just added a little more functionality to you.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class &amp;lt;&amp;lt; you
  def use_singletons_for_fun_and_profit
    # ...
  end
end
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Sun, 22 Apr 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/04/22/ruby-singleton-classes/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/04/22/ruby-singleton-classes/</guid>
        
        <category>ruby</category>
        
        <category>singleton</category>
        
        <category>basics</category>
        
        
      </item>
    
      <item>
        <title>Dict Moves in Python</title>
        <description>&lt;p&gt;Quick tip time!&lt;/p&gt;

&lt;p&gt;Today, I started the #100DaysOfCode challenge again (for the millionth time).  I’m determined to actually succeed at this challenge, and I refuse to give up.  This time, I’m using the &lt;a href=&quot;https://codechalleng.es/&quot;&gt;Python Bytes Code Challenges website&lt;/a&gt; and their 100 days project suggestions.  During today’s challenge, I learned a neat little trick for working with dictionaries that I wanted to share.&lt;/p&gt;

&lt;h2 id=&quot;the-challenge&quot;&gt;The Challenge&lt;/h2&gt;

&lt;p&gt;The challenge is this: go through a &lt;a href=&quot;https://raw.githubusercontent.com/rpalo/100DaysOfCode/master/001/dictionary.txt&quot;&gt;dictionary of words&lt;/a&gt;, which is really just a copy of &lt;code&gt;/usr/share/dict/words&lt;/code&gt;.  Find the word that scores the highest in Scrabble, using these letter scores:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;SCRABBLE_SCORES = [
  (1, &quot;E A O I N R T L S U&quot;),
  (2, &quot;D G&quot;),
  (3, &quot;B C M P&quot;),
  (4, &quot;F H V W Y&quot;), 
  (5, &quot;K&quot;), 
  (8, &quot;J X&quot;), 
  (10, &quot;Q Z&quot;),
]
LETTER_SCORES = {
    letter: score for score, letters in scrabble_scores
    for letter in letters.split()
}
# {&quot;A&quot;: 1, &quot;B&quot;: 3, &quot;C&quot;: 3, &quot;D&quot;: 2, ...}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;the-issue&quot;&gt;The Issue&lt;/h2&gt;

&lt;p&gt;The issue is that I don’t want to worry about whether or not there are any invalid characters in the input (for now at least).  So if I look up the word “snoot!43@@@ “, right now, I’d prefer to see the score for SNOOT and then 0 points for the rest of the characters.  I know there are a bunch of ways to do this, but the first way that popped into my head was to use a &lt;em&gt;default&lt;/em&gt; of 0 (i.e. if you try to look up a character that’s not in &lt;code&gt;LETTER_SCORES&lt;/code&gt;, it returns zero instead of raising a &lt;code&gt;KeyError&lt;/code&gt;.)&lt;/p&gt;

&lt;h2 id=&quot;enter-defaultdict&quot;&gt;Enter DefaultDict&lt;/h2&gt;

&lt;p&gt;Luckily for us, Python comes with exactly the thing we need: a &lt;code&gt;defaultdict&lt;/code&gt;, courtesy of the standard library’s &lt;code&gt;collections&lt;/code&gt; module.  Its usage is reasonably straightforward: you supply the &lt;code&gt;defaultdict&lt;/code&gt; with a class or function that constructs the default if the input isn’t found.  Let me show you.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from collections import defaultdict

zeros = defaultdict(int)
zeros[&quot;a&quot;] = 1
zeros[&quot;b&quot;] = zeros[&quot;definitely not in there&quot;] + 4
print(zeros)
# =&amp;gt; defaultdict(&amp;lt;int&amp;gt;, {&quot;a&quot;: 1, &quot;b&quot;: 4, &quot;definitely not in there&quot;: 0})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since the &lt;code&gt;zeros&lt;/code&gt; dict can’t find the &lt;code&gt;&quot;definitely not in there&quot;&lt;/code&gt; key, it calls its default-maker function, &lt;code&gt;int&lt;/code&gt;.  Go ahead and open up your Python REPL and try just calling the &lt;code&gt;int&lt;/code&gt; function with no arguments.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; int()
0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;int&lt;/code&gt; function, called with no arguments, returns 0 every time.&lt;/p&gt;

&lt;p&gt;You can even create your own default-maker functions (and classes will work too)!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from random import choice

def confusing_default():
    possibles = [&quot;1&quot;, 1, True, &quot;banana&quot;]
    return choice(possibles)

tricky_dict = defaultdict(confusing_default)
tricky_dict[&quot;Ryan&quot;]
# =&amp;gt; &quot;banana&quot;
tricky_dict[&quot;Python&quot;]
# =&amp;gt; True
tricky_dict[&quot;Why would you do this?&quot;]
# =&amp;gt; 1
tricky_dict
# =&amp;gt; defaultdict(&amp;lt;confusing_default&amp;gt;, {&quot;Ryan&quot;: &quot;banana&quot;, &quot;Python&quot;: True, &quot;Why would you do this?&quot;: 1})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Often times, you can do things a little quicker with &lt;code&gt;lambdas&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from random import randint

SCREAMING = defaultdict(lambda: &quot;A&quot;)
for i in range(20):
    key = randint(0, 3)
    SCREAMING[key] += &quot;A&quot;
SCREAMING
# =&amp;gt; defaultdict(&amp;lt;function &amp;lt;lambda&amp;gt; at 0x108707f28&amp;gt;, {0: 'AAAAAAAA', 1: 'AAAAAAA', 3: 'AAAAA', 2: 'AAAA'})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In fact, I actually think that using &lt;code&gt;defaultdict(lambda: 0)&lt;/code&gt; is more explicit and less confusing than using &lt;code&gt;defaultdict(int)&lt;/code&gt;, as long as you’re not creating huge numbers of these &lt;code&gt;defaultdicts&lt;/code&gt; this way.&lt;/p&gt;

&lt;h2 id=&quot;upgrading-to-a-defaultdict&quot;&gt;Upgrading to a DefaultDict&lt;/h2&gt;

&lt;p&gt;Now, finally, we’re ready for the quick tip.  Up above, I defined &lt;code&gt;LETTER_SCORES&lt;/code&gt; as a plain, old Python &lt;code&gt;dict&lt;/code&gt;.  How do I get the default behaviors I want, quickly?  One way is using the built-in &lt;code&gt;dict.update()&lt;/code&gt; function, which merges two dictionaries.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;FORGIVING_SCORES = defaultdict(lambda: 0)
FORGIVING_SCORES.update(LETTER_SCORES)

FORGIVING_SCORES[&quot;Q&quot;]
# =&amp;gt; 10

FORGIVING_SCORES[&quot;@&quot;]
# =&amp;gt; 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hooray!&lt;/p&gt;

&lt;p&gt;Granted, this isn’t a perfect solution, because the &lt;code&gt;FORGIVING_SCORES&lt;/code&gt; defaultdict stores each of the invalid asks.  It’s probably OK if you’re not expecting a huge number of invalid look-ups.  If you &lt;em&gt;are&lt;/em&gt; worried about staying space-efficient, though, it’s probably better to do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;score = LETTER_SCORES.get(&quot;@&quot;) or 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;get&lt;/code&gt; function returns &lt;code&gt;None&lt;/code&gt; if a &lt;code&gt;KeyError&lt;/code&gt; occurs, and the &lt;code&gt;or&lt;/code&gt; allows us to provide a sane default if the lookup goes bad.  And everybody’s happy!&lt;/p&gt;

</description>
        <pubDate>Sun, 08 Apr 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/04/08/convert-to-default-dict/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/04/08/convert-to-default-dict/</guid>
        
        <category>python</category>
        
        <category>tricks</category>
        
        
      </item>
    
      <item>
        <title>Data Science Cardio 1 - Weather</title>
        <description>&lt;p&gt;I’m going to shamelessly borrow the idea of programming cardio from &lt;a href=&quot;https://javascript30.com/&quot;&gt;Wes Bos’s JavaScript30 course&lt;/a&gt;.  I thought you folks might like it if I present a short data science example problem and then work through it with you.  I’ve got a student learning Python that I’m tutoring right now (my first one!  Yay!), and this was one of her problems.  It seemed like an example that covered a lot of bases.  This example will be in Python (3).  I’ll try to link to the appropriate libraries and docs when they come up so you can explore further instead of taking my word for things.&lt;/p&gt;

&lt;p&gt;So, without further ado, let’s.  Get.  PUMPED!&lt;/p&gt;

&lt;h2 id=&quot;0-the-problem&quot;&gt;0. The Problem&lt;/h2&gt;

&lt;p&gt;We have been asked to investigate how various weather phenomena vary based on latitude.  Specifically, we need to collect at least 500 samples of weather data, randomly distributed across the globe.  Once we have this data, we should create plots and comment on any patterns we see in Temperature, Humidity, Cloudiness, and Wind Speed.  I’m going to convert to the US customary system of units.  You do whatever makes you happy.&lt;/p&gt;

&lt;p&gt;A note: there are a bunch of different ways you could go about solving this problem.  I’m going to show you one way.  Feel free to explore your own solution method and see if the results turn out similar.&lt;/p&gt;

&lt;p&gt;A second note: I use a few libraries that aren’t a part of the standard library, but are available in the Python Package Index (PyPI).  If you come up against a &lt;code&gt;No module named 'whatever'&lt;/code&gt; error, you’ll need to open up a terminal window and type &lt;code&gt;pip install &amp;lt;packagename&amp;gt;&lt;/code&gt;, where &lt;code&gt;&amp;lt;packagename&amp;gt;&lt;/code&gt; is the name of the package you’re missing, and hit Enter.  Optionally, if you’re using Jupyter Notebooks, you can also type &lt;code&gt;! pip install &amp;lt;packagename&amp;gt;&lt;/code&gt; in a cell and run it.  The bang (&lt;code&gt;!&lt;/code&gt;) lets the notebook run a one-line system call.&lt;/p&gt;

&lt;p&gt;I initially completed this analysis using a &lt;a href=&quot;http://jupyter.org/install&quot;&gt;Jupyter Notebook&lt;/a&gt;.  I highly recommend that.  You can find the &lt;a href=&quot;https://github.com/rpalo/tutoring-weather-example&quot;&gt;source code repo here&lt;/a&gt; if you get antsy and want to peek ahead.&lt;/p&gt;

&lt;h2 id=&quot;1-500-random-coordinates&quot;&gt;1. 500 Random Coordinates&lt;/h2&gt;

&lt;p&gt;The first thing we need is 500 random coordinates.  We’ll need these numbers to span across the whole &lt;a href=&quot;https://en.wikipedia.org/wiki/Latitude#The_graticule_on_the_sphere&quot;&gt;range of possible latitudes&lt;/a&gt; (-90 degrees to 90 degrees), as well as the whole &lt;a href=&quot;https://en.wikipedia.org/wiki/Longitude&quot;&gt;range of possible longitudes&lt;/a&gt; (-180 degrees to 180 degrees).  Note that negative latitude indicates South, and negative longitude indicates West.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import numpy as np
import pandas as pd

np.random.seed(125)  # So that other scientists can duplicate our work!
lats = np.random.randint(-90, 90, size=500)
longs = np.random.randint(-180, 180, size=500)
coords = pd.DataFrame({
    &quot;latitude&quot;: lats,
    &quot;longitude&quot;: longs
})

# Let's take a look at how our coordinates look
coords.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;latitude&lt;/th&gt;
      &lt;th&gt;longitude&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;67&lt;/td&gt;
      &lt;td&gt;-117&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;-3&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;-23&lt;/td&gt;
      &lt;td&gt;-146&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;-19&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;-47&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For sanity’s sake, let’s ensure our coordinates are reasonably random.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from matplotlib import pyplot as plt
# And, we're going to give our plots a bit of pizazz.
# Feel free to skip these two lines
import seaborn

seaborn.set()

plt.hist(coords['latitude'])
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/lat-hist.png&quot; alt=&quot;Latitude histogram&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;plt.hist(coords['longitude'])
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/long-hist.png&quot; alt=&quot;Longitude histogram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are some spikes, but overall, it seems reasonable for what we’re doing.  If you’re unhappy with the random-osity of your data, go ahead and change the random seed and re-run the cells above.&lt;/p&gt;

&lt;h2 id=&quot;2-setting-up-the-weather-api&quot;&gt;2. Setting Up the Weather API&lt;/h2&gt;

&lt;p&gt;This part is going to be more administrative and less fun programming.  But that’s OK!  In order to get this weather data, we’ll need to hit a web API and ask it for the data.  Specifically, we’re going to be using the &lt;a href=&quot;https://openweathermap.org/&quot;&gt;OpenWeatherData API&lt;/a&gt;.  You’ll need to create an account (it’s free!) and you’ll be provided with an API key, which you can find on the “API Keys” tab of your account page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/api-page.png&quot; alt=&quot;The API tab on the account page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Keep this key a secret (I’ll give you some pointers on how to do this well).  You wouldn’t want some nefarious person hammering the weather API and everybody thinking it was you.  Think about your reputation as a good weather API citizen!  Think of the children!&lt;/p&gt;

&lt;p&gt;As the page says, it may take a little while before your key is working.  Luckily, we’ve got some setup to do before we’re ready to make use of it.  For now, let’s take a look at the endpoint we’ll be using.  Check out &lt;a href=&quot;https://openweathermap.org/current#geo&quot;&gt;the coordinate weather endpoint docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We could ask for the data we need in a few different ways, but since we’ve already created a bunch of beautiful (latitude, longitude) pairs, I think that’s probably the easiest way to go.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;http://api.openweathermap.org/data/2.5/weather?lat={lat}&amp;amp;lon={lon}&amp;amp;APPID={api_key}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You’ll notice that, even though the online documentation doesn’t discuss it right there, we’ll need to add the &lt;code&gt;APPID&lt;/code&gt; parameter with our API key.  If you’re feeling really cool, you can also add &lt;code&gt;units=imperial&lt;/code&gt; to get Fahrenheit temperature and Miles/Hour wind speed.  You can also stick to the defaults and convert later.  I’ll show you that process as well.  Now, enough administrative stuff!  Let’s get back to the code!&lt;/p&gt;

&lt;h2 id=&quot;3-setting-up-to-get-the-data&quot;&gt;3. Setting Up to Get the Data&lt;/h2&gt;

&lt;p&gt;Before we open up our analysis code, I recommend you open a new file in the same directory called &lt;code&gt;secrets.py&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# secrets.py
API_KEY = &quot;copy your api key here&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you’re keeping track of this project with a git repository, add this file to your &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;__pycache__/
.ipynb_checkpoints
secrets.py
haters
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we’re ready to dive back into the notebook.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from secrets import API_KEY
import requests
import time

def get_weather_data(coords, time_between=1):
    &quot;&quot;&quot;Queries the OpenWeatherAPI for data.
    
    Args:
    	coords: A Pandas DataFrame with rows containing 'latitude'
    		and 'longitude' columns.
    	time_between: An integer specifying the sleep time in seconds
    		between each API ping.  Defaults to the OpenWeatherAPI's
    		recommended limit of 1 request per second.
    
    Returns:
    	A list of nested dicts (loaded JSON results).
    &quot;&quot;&quot;
    results = []
    for ind, row in coords.iterrows():
        lat, lon = row['latitude'], row['longitude']
        query = f&quot;http://api.openweathermap.org/data/2.5/weather?lat={lat}&amp;amp;lon={lon}&amp;amp;APPID={API_KEY}&quot;
        response = requests.get(query)
        results.append(response.json())
        time.sleep(time_between)
    return results
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two key features to this code.  The first is the “f-string”, which is Python 3’s shwoopy syntax for string interpolation.  The nice thing is that these “f-strings” are &lt;a href=&quot;https://cito.github.io/blog/f-strings/#performance-considerations&quot;&gt;super fast!&lt;/a&gt;  Relatively speaking, at least.  But we are able to insert our latitude and longitude values directly from the DataFrame row, as well as our API key.&lt;/p&gt;

&lt;p&gt;The other key feature is that we’re using &lt;a href=&quot;http://docs.python-requests.org/en/master/&quot;&gt;&lt;code&gt;requests&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;http://docs.python-requests.org/en/master/user/quickstart/#make-a-request&quot;&gt;make a &lt;code&gt;get&lt;/code&gt; request&lt;/a&gt;, and then &lt;a href=&quot;http://docs.python-requests.org/en/master/user/quickstart/#json-response-content&quot;&gt;using the &lt;code&gt;json&lt;/code&gt; function&lt;/a&gt; to immediately process the response into a Python dict we can work with.  If you weren’t sure how we were going to get the data from the API, you might actually be disappointed that it’s not more complicated than this.  As long as you know the right URL, &lt;code&gt;requests&lt;/code&gt; makes our job pretty darn pleasant.&lt;/p&gt;

&lt;h2 id=&quot;3a-logging-our-requests&quot;&gt;3a. Logging our Requests&lt;/h2&gt;

&lt;p&gt;I’m going to go on two quick asides for some extra practice.  If you want to skip right to step four, don’t worry.  You won’t hurt my feelings.&lt;/p&gt;

&lt;p&gt;The first aside I’m going to go on is to set up some logging to a file.  Up towards the top of your notebook, add the following code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import logging

logger = logging.getLogger('weather')
logger.setLevel(logging.INFO)
fh = logging.FileHandler('api_calls.log')
formatter = logging.Formatter('%(asctime)s - %(message)')
fh.setFormatter(formatter)
logger.addHandler(fh)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then inside your &lt;code&gt;get_weather_data&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def get_weather_data(coords, time_between=1):
    # ...
    results = []
    for ind, row in coords.iterrows():
        lat, long = row['latitude'], row['longitude']
        query = f&quot;http://api.openweathermap.org/data/2.5/weather?lat={lat}&amp;amp;lon={lon}&amp;amp;APPID={API_KEY}&quot;

        # Here's the new stuff
        clean_url = query.rpartition(&quot;&amp;amp;&quot;)[0]  # Don't log your api key!
        logger.info(f&quot;Call {ind}: ({lat}, {lon}) - {clean_url}&quot;)

        response = requests.get(query)
        results.append(response.json())
        time.sleep(time_between)
    return results
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we get to save a log of all the URL’s we hit!&lt;/p&gt;

&lt;h2 id=&quot;3b-getting-the-closest-city-name&quot;&gt;3b. Getting the Closest City Name&lt;/h2&gt;

&lt;p&gt;You know what would be nice?  Logging out the name of the closest city with our logs.  There’s a neat little library called &lt;a href=&quot;https://github.com/wingchen/citipy&quot;&gt;&lt;code&gt;citipy&lt;/code&gt;&lt;/a&gt; that does just that!  Let’s update our &lt;code&gt;get_weather_data&lt;/code&gt; function one more time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from secrets import API_KEY
from citipy import citipy  # Make sure to import it once you've installed it

def get_weather_data(coords, time_between=1):
    # ...
    results = []
    for ind, row in coords.iterrows():
        lat, lon = row['latitude'], row['longitude']
        query = f&quot;http://api.openweathermap.org/data/2.5/weather?lat={lat}&amp;amp;lon={lon}&amp;amp;APPID={API_KEY}&quot;
        clean_url = query.rpartition(&quot;&amp;amp;&quot;)[0]
        
        # Here's the new stuff
        city = citipy.nearest_city(lat, lon)
        logger.info(f&quot;Call {ind}: {city.city_name} {clean_url})&quot;)
        
        result = requests.get(query)
        results.append(result.json())
        time.sleep(time_between)
    return results
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will be great!  Back to the problem at hand.&lt;/p&gt;

&lt;h2 id=&quot;4-actually-getting-our-data&quot;&gt;4. Actually Getting Our Data&lt;/h2&gt;

&lt;p&gt;Let’s test our function with a test call, first.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;test_coords = pd.DataFrame({&quot;latitude&quot;: [37], &quot;longitude&quot;: [-122]})
test_results = get_weather_data(test_coords)
test_results
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;[{'base': 'stations',
  'clouds': {'all': 1},
  'cod': 200,
  'coord': {'lat': 37, 'lon': -122},
  'dt': 1522341300,
  'id': 5381421,
  'main': {'humidity': 76,
   'pressure': 1021,
   'temp': 287.78,
   'temp_max': 289.15,
   'temp_min': 286.15},
  'name': 'Pasatiempo',
  'sys': {'country': 'US',
   'id': 399,
   'message': 0.004,
   'sunrise': 1522331815,
   'sunset': 1522376913,
   'type': 1},
  'visibility': 16093,
  'weather': [{'description': 'clear sky',
    'icon': '01d',
    'id': 800,
    'main': 'Clear'}],
  'wind': {'deg': 331.003, 'speed': 1.32}}]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If yours comes out just like mine, then it looks like we’re good to run the full data collection.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;full_results = get_weather_data(coords)
full_results[:3]  # Let's peek at the first 3 datapoints
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will run for about 8 and a half minutes (the cost of being a good citizen).  Go get a coffee or a snack to reward yourself for all your hard work.&lt;/p&gt;

&lt;h2 id=&quot;5-saving-the-data&quot;&gt;5. Saving the Data&lt;/h2&gt;

&lt;p&gt;First thing’s first.  Let’s save our data out so we’ll have it just in case something gets exploded.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import json

with open(&quot;weather.json&quot;, &quot;w&quot;) as outfile:
    json.dump(full_results, outfile)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create a new file &lt;code&gt;weather.json&lt;/code&gt; in your project directory.  Time for another optional side-step: unit conversion.&lt;/p&gt;

&lt;h2 id=&quot;5a-unit-conversion&quot;&gt;5a. Unit Conversion&lt;/h2&gt;

&lt;p&gt;If you didn’t use the &lt;code&gt;units=imperial&lt;/code&gt; parameter in your API call and you want US customary units, you’ll need some helper functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def k_to_f(temp):
    &quot;&quot;&quot;Converts a Kelvin temperature to Fahrenheit&quot;&quot;&quot;
    return temp * 9/5 - 459.67

def mps_to_mph(speed):
    &quot;&quot;&quot;Converts a meters/s speed to miles/hour&quot;&quot;&quot;
    return speed * 2.23694
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;6-munging-the-data&quot;&gt;6. Munging the Data&lt;/h2&gt;

&lt;p&gt;Yes, it’s a word.  &lt;a href=&quot;https://en.wikipedia.org/wiki/Mung_(computer_term)&quot;&gt;Look it up.&lt;/a&gt;  Whatever.  We’re going to need to build a data structure that we can turn into a DataFrame, and we want to narrow things down to just the data we care about.  Take another look at your example output above and dig into the JSON data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;important_json_data = []
for point in full_results:
    lat = point['coord']['lat']
    lon = point['coord']['lon']
    temp = k_to_f(point['main']['temp'])
    humidity = point['main']['humidity']
    cloudiness = point['clouds']['all']
    wind = mps_to_mph(point['wind']['speed'])

    row = [lat, lon, temp, humidity, cloudiness, wind]
    important_json_data.append(row)

weather_df = pd.DataFrame(important_json_data)
weather_df.columns = [
    &quot;latitude&quot;,
    &quot;longitude&quot;,
    &quot;temperature&quot;,
    &quot;humidity&quot;,
    &quot;clouds&quot;,
    &quot;wind&quot;,
]
weather_df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;latitude&lt;/th&gt;
      &lt;th&gt;longitude&lt;/th&gt;
      &lt;th&gt;temperature&lt;/th&gt;
      &lt;th&gt;humidity&lt;/th&gt;
      &lt;th&gt;clouds&lt;/th&gt;
      &lt;th&gt;wind&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;67&lt;/td&gt;
      &lt;td&gt;-117&lt;/td&gt;
      &lt;td&gt;-16.15&lt;/td&gt;
      &lt;td&gt;69&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;4.29&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;-3&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;74.93&lt;/td&gt;
      &lt;td&gt;96&lt;/td&gt;
      &lt;td&gt;68&lt;/td&gt;
      &lt;td&gt;2.17&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;-23&lt;/td&gt;
      &lt;td&gt;-146&lt;/td&gt;
      &lt;td&gt;80.96&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;88&lt;/td&gt;
      &lt;td&gt;12.91&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;-19&lt;/td&gt;
      &lt;td&gt;67.37&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;9.78&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;-47&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;44.78&lt;/td&gt;
      &lt;td&gt;97&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;13.35&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Again, let’s save our data out just in case.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;weather_df.to_csv(&quot;weather.csv&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Congratulations!  The heavy lifting is done.  Let’s take a look at our data and see what conclusions we can draw.&lt;/p&gt;

&lt;h2 id=&quot;7-plotting-the-data&quot;&gt;7. Plotting the Data&lt;/h2&gt;

&lt;p&gt;Remember our goals?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Compare temperature and latitude.&lt;/li&gt;
  &lt;li&gt;Compare humidity and latitude.&lt;/li&gt;
  &lt;li&gt;Compare cloudiness and latitude.&lt;/li&gt;
  &lt;li&gt;Compare wind speed and latitude.&lt;/li&gt;
  &lt;li&gt;Draw some conclusions.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’m going to put the latitude on the Y-axis, because I feel like the plots will feel more intuitive.  We generally think about latitudes going North to South and thus top to bottom.  If you want to insist on plotting the independent variable (latitude) on the X-axis and the dependent variable (temperature) on the Y-axis, then do whatever makes you happy.&lt;/p&gt;

&lt;h3 id=&quot;temperature&quot;&gt;Temperature&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;plt.scatter(weather_df.temperature, weather_df.latitude)
plt.xlabel(&quot;Temperature (F)&quot;)
plt.ylabel(&quot;Latitude (degrees)&quot;)
plt.title(&quot;Temperature vs. Latitude&quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/temp-lat-plot.png&quot; alt=&quot;Temperature Latitude plot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Woohoo!  That’s some strong trending right there!  As you might have expected, the temperature climbs as you approach the equator and drops off as you near the poles.  Go science!&lt;/p&gt;

&lt;h3 id=&quot;humidity&quot;&gt;Humidity&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;plt.scatter(weather_df.humidity, weather_df.latitude)
plt.xlabel(&quot;Humidity (%)&quot;)
plt.ylabel(&quot;Latitude (degrees)&quot;)
plt.title(&quot;Humidity vs. Latitude&quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/humidity-lat-plot.png&quot; alt=&quot;Humidity vs. Latitude plot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These are some strange results.  It looks like, except for a few drop offs, an abundance of the data points had 100% humidity.  I find this hard to believe.  I found a few Google results that make me wonder if there’s not something weird with the way that they’re measuring humidity.  If anybody has any other thoughts, I’d be interested to hear them.  Let me know what you think.&lt;/p&gt;

&lt;h3 id=&quot;cloudiness&quot;&gt;Cloudiness&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;plt.scatter(weather_df.clouds, weather_df.lat)
plt.xlabel(&quot;Cloudiness (%)&quot;)
plt.ylabel(&quot;Latitude (degrees)&quot;)
plt.title(&quot;Cloudiness vs. Latitude&quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/clouds-lat-plot.png&quot; alt=&quot;Cloudiness vs. Latitude plot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I can’t really see much of a trend here, either.  The striation of the data (neat rows) makes me feel like there’s some kind of a pattern, though.  Let’s see if maybe there’s a longitude relationship.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;plt.scatter(weather_df.long, weather_df.clouds)
plt.xlabel(&quot;Longitude (degrees)&quot;)
plt.ylabel(&quot;Cloudiness (%)&quot;)
plt.title(&quot;Longitude vs. Cloudiness&quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/clouds-long-plot.png&quot; alt=&quot;Longitude Cloudiness plot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hmm… I’m still not seeing much of a relationship.  Once again, if anybody has any thoughts, let me know!&lt;/p&gt;

&lt;h3 id=&quot;wind-speed&quot;&gt;Wind Speed&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;plt.scatter(weather_df.wind, weather_df.lat)
plt.xlabel(&quot;Wind Speed (mph (abs))&quot;)
plt.ylabel(&quot;Latitude (degrees)&quot;)
plt.title(&quot;Wind Speed vs. Latitude&quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/wind-lat-plot.png&quot; alt=&quot;Wind Latitude plot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is an interesting plot.  We see kind of a mish-mash, but with some clear spikes at about -50 degrees and 50 degrees.  It seems to drop off toward zero around the poles and the equator.  At first, I was confused, but then I remembered my 8th grade science class.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/global-wind-currents.png&quot; alt=&quot;Global wind current patterns&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are a group of winds called the “&lt;a href=&quot;https://en.wikipedia.org/wiki/Prevailing_winds#Westerlies_and_their_impact&quot;&gt;Westerlies&lt;/a&gt;” that blow between 40 and 50 degrees North and South latitude.  These are sometimes called the “&lt;a href=&quot;https://en.wikipedia.org/wiki/Roaring_Forties&quot;&gt;Roaring Forties&lt;/a&gt;” and, due to the expanses of open ocean in the southern hemisphere especially (no land or trees to impede the winds), they are used to speed up sailing times.  They tend to shift towards the equator in that hemisphere’s summer and towards the pole in the winter.&lt;/p&gt;

&lt;p&gt;Conversely, the area around the equator is known as the “&lt;a href=&quot;https://en.wikipedia.org/wiki/Intertropical_Convergence_Zone&quot;&gt;Intertropical Convergence Zone,&lt;/a&gt;” also called the “&lt;a href=&quot;https://en.wikipedia.org/wiki/Doldrums&quot;&gt;doldrums.&lt;/a&gt;”  This area is a combination of dead wind and thunderstorms, depending on season.&lt;/p&gt;

&lt;p&gt;I feel reasonably comfortable saying our data seems to support this trend.  And so, once again, hooray for science!&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap Up&lt;/h2&gt;

&lt;p&gt;That’s it!  Hopefully you enjoyed the practice.  If you come up with any other neat findings from our data, be sure to share them with me.&lt;/p&gt;

&lt;p&gt;Happy munging!&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Mar 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/03/28/data-science-cardio-weather/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/03/28/data-science-cardio-weather/</guid>
        
        <category>python</category>
        
        <category>data-science</category>
        
        <category>scientific</category>
        
        <category>tutorial</category>
        
        
      </item>
    
      <item>
        <title>Get on the Bullet Journaling Train</title>
        <description>&lt;p&gt;In early February, I learned about &lt;a href=&quot;http://bulletjournal.com/get-started/&quot;&gt;bullet journaling&lt;/a&gt;.  After trying it for a couple of months and loving it, I wanted to share an introduction and my own personal modifications and tips.&lt;/p&gt;

&lt;h2 id=&quot;bullet-journaling-what-is-it&quot;&gt;Bullet Journaling: What is It?&lt;/h2&gt;

&lt;p&gt;Fundamentally, Bullet Journaling is just a structured way to keep track of your thoughts efficiently, without putting an extra unnecessary load on your life to do it.  The bullet journal understands that you are busy, and you don’t always have time to sit down and pour out your deepest thoughts and feelings.  “Dear diary…”  Instead, you condense your thoughts down into small, bite-sized chunks and phrases, the most fundamental of which is the “bullet.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-dot.jpg&quot; width=&quot;100&quot; height=&quot;100&quot; alt=&quot;A dot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This humble dot signifies a task or something with an action item.  We’ll discuss more about the specifics in a minute.  I want to finish up my high-level overview first.&lt;/p&gt;

&lt;p&gt;There are a few main strategies that we’ll cover.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;What You Need&lt;/li&gt;
  &lt;li&gt;The Index&lt;/li&gt;
  &lt;li&gt;The Long View&lt;/li&gt;
  &lt;li&gt;The Month View&lt;/li&gt;
  &lt;li&gt;The Daily Log&lt;/li&gt;
  &lt;li&gt;The List/Notes Page&lt;/li&gt;
  &lt;li&gt;Threading&lt;/li&gt;
  &lt;li&gt;Different Types of Bullets&lt;/li&gt;
  &lt;li&gt;Migrating and Scheduling&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Following these topics, I’ll finish up with some mindset tips and things I’ve learned.&lt;/p&gt;

&lt;h2 id=&quot;bullet-journaling-how-to-do-it&quot;&gt;Bullet Journaling: How to Do It&lt;/h2&gt;

&lt;h3 id=&quot;1-what-you-need&quot;&gt;1. What You Need&lt;/h3&gt;

&lt;p&gt;You can really use any medium that you can record information on, paper or digital.  However, I prefer using a nice, hard-bound notebook with at least one attached bookmark.  I also like to use pretty thick paper with graph lines or a dot matrix on it.  If it has a slightly yellow tint, even better.  I bought &lt;a target=&quot;_blank&quot; href=&quot;https://www.amazon.com/gp/product/1441323716/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1441323716&amp;amp;linkCode=as2&amp;amp;tag=ryanpalo-20&amp;amp;linkId=2afec5d8eff5ce5ca3b20158fead9db4&quot;&gt;this one&lt;/a&gt;&lt;img src=&quot;//ir-na.amazon-adsystem.com/e/ir?t=ryanpalo-20&amp;amp;l=am2&amp;amp;o=1&amp;amp;a=1441323716&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;and I love it.  I also highly recommend you get a really nice pen.  Like, at least a five dollar pen.  I find that it adds to the meditative effect of bullet journaling if my tools make me feel like a &lt;em&gt;scholar&lt;/em&gt;.  😀 Since my notebook has a little pocket flap in the back, I like to keep a small ruler in there in case I want to make any &lt;em&gt;really&lt;/em&gt; straight lines.&lt;/p&gt;

&lt;p&gt;Now that you have your tools, let’s get started.&lt;/p&gt;

&lt;h3 id=&quot;2-the-index&quot;&gt;2. The Index&lt;/h3&gt;

&lt;p&gt;The Index is what keeps your whole journal tied together and allows you to take notes whenever you need without stressing out about how many pages to give yourself.  Open up your notebook to the first full blank spread.  Label these two pages and the next two with the word “Index.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-index-blank.jpg&quot; alt=&quot;The blank Index section&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also, in the bottom outside corner of each of these four pages, number the pages (1, 2, 3, and 4).  This index will tell you where in your journal different sections start and end.  Since there is nothing in our journal yet, our index is blank.  We’ll fill it in some as we add some of the next sections.  The main thing is to know that as we add sections, they’ll end up looking like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-index-item.jpg&quot; alt=&quot;An index item&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since our journal is flexible, it lets us interrupt sections with other sections.  We keep track of these jumps with comma-separated page regions.&lt;/p&gt;

&lt;h3 id=&quot;3-the-long-view&quot;&gt;3. The Long View&lt;/h3&gt;

&lt;p&gt;The long view is a two-page glance at the next six months.  Open up your notebook to the first blank spread after your Index pages.  If you have a ruler, now’s the time to use it.  Draw two horizontal lines on each page, separating these two pages into six equal regions.  Label each of these sections in the upper left with the next six months.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-long-blank.jpg&quot; alt=&quot;The blank Long View section&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This section is for keeping tasks and information that is either a long-term goal or not immediately actionable.  If someone invited you to a wedding in three months, this would be the perfect section for it.  Add some goals to this section using a bullet point.  When you complete these tasks, you can put a little X over the bullet point.  We’ll talk more about different bullet styles for different items later.&lt;/p&gt;

&lt;p&gt;You’ll use this section. to remind you of things when you fill in the more short-term sections in the next few months.  And, since we’ve added a new section to our journal, don’t forget to add page numbers to the bottom of each page and add this section to your Index.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-index-long-view.jpg&quot; alt=&quot;Adding the Long View to the Index&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bullet Journaling is a constant process of keeping track of the immediate and short-term stuff while frequently zooming out to take in the big picture as well.  You’ll see that as we continue the next few sections, gradually zooming in on your life.&lt;/p&gt;

&lt;h3 id=&quot;4-the-month-view&quot;&gt;4. The Month View&lt;/h3&gt;

&lt;p&gt;Great!  Now that we’re in command of our six-month goals, the next main page type is the month overview page.  Open your journal to the next blank spread after the Long View.  Title both pages with the name of the current month (which should be the first month on your Long View).  The left page will be your calendar page.  Fill in a vertical column with every number day in the month.  For March, that would be 1 to 31, each on its own row.  Just beside these numbers, put a letter or two to signify which day of the week this date will be.  I also like to put a horizontal line between each week to help me visually see where I’m at more easily.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-month-calendar.jpg&quot; alt=&quot;Calendar month view&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The right page of this spread will be the bullet page.  Put down any to-do’s, tasks, goals, or notes that you can think of that will come up this month.  I like to write any important dates/holidays/birthdays on the left side next to the numbers and letters.  Be sure to turn back to your Long View to see if there’s anything there that you can import into your first month section.  This will be an often-used technique.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-month-task.jpg&quot; alt=&quot;Task Month View&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you’re done, don’t forget to add some page numbers and add this section to your Index.&lt;/p&gt;

&lt;h3 id=&quot;5-the-daily-log&quot;&gt;5. The Daily Log&lt;/h3&gt;

&lt;p&gt;This entry type will be the majority of what you do in the bullet journal.  Once again, open up your journal to the first available blank spread after your first Month View and label it with “(Name of Month) Daily Log”.  Then, place a section header on the page with today’s date.  Put any tasks or to-do items that you want to get done today.  Just like before, don’t forget to flip back to the Month View and even the Long View to see if there are any items that need to be imported into today’s tasks.&lt;/p&gt;

&lt;p&gt;Try to be realistic, but don’t be afraid to put some stretch goals down as well.  If you don’t get something done today that you planned on, don’t stress out.  Just work on one day at a time.  At the end of the day, I like to put some notes about other things I did that day or what else happened.  I find that, over time, this helps me actually remember the days and weeks that pass better, helping me treat each day as more special.  I tend to get to the end of the week and can remember the things I accomplished, keeping things from getting monotonous.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-daily-log.jpg&quot; alt=&quot;Filled-in Daily Log&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Add some page numbers and add your Daily Log section to your index.  Since you’re not sure how many pages this will take up, just put a starting page number and a dash.  If something else comes up and interrupts your Daily Log, you can put the ending page number and a comma, and put the next section of the Daily Log into the index when you start it back up again.  We’ll talk more about this in the Threading section.&lt;/p&gt;

&lt;h3 id=&quot;6-the-listnotes-page&quot;&gt;6. The List/Notes Page&lt;/h3&gt;

&lt;p&gt;It might happen that you’re going through your daily logs and you decide to watch a how-to video or take on online course — something where you want to take notes.  I do this a lot while reading programming books and tutorials, and I’ve found it really helps me remember things a lot better, and gives me a little better information source than having to constantly Google the same things.  Simply put a header at the top of the page, give yourself a few blank pages to take notes in, and start jotting down your notes.  Add page numbers as you get to each page, and add this section to your Index so you can find it again later.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-list-page.jpg&quot; alt=&quot;List Page&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;7-threading&quot;&gt;7. Threading&lt;/h3&gt;

&lt;p&gt;This is one of the key techiques of bullet journaling and the thing that makes it so flexible.  It’s how you can safely interrupt your daily logs with a grocery list or page of notes without worrying about leaving a bunch of blank pages in between.  Your notes sections can interrupt each other and stop and start as many times as you like.  It just makes your Index look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-index-item.jpg&quot; alt=&quot;A skipping Index entry&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve also found it useful to put a little note to myself about where the next section starts or ends above the page number in the section itself, so I don’t have to turn back to the Index all the time if I don’t need to.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-threading-note.jpg&quot; alt=&quot;Threading note above a page number&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;8-different-types-of-bullets&quot;&gt;8. Different Types of Bullets&lt;/h3&gt;

&lt;p&gt;As we’ve discussed, the basic task unit of bullet journaling is a dot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-dot.jpg&quot; width=&quot;100&quot; height=&quot;100&quot; alt=&quot;A dot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When you complete this task, you should put a little X over it, like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-types.jpg&quot; alt=&quot;Different bullet types&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the main goals of bullet journaling is helping you weed out the things that aren’t worth your time.  If you decide a task just isn’t going to get completed or you don’t want to do it, just put a single line through it.&lt;/p&gt;

&lt;p&gt;If you have something that you want to note down, but it isn’t really a task to complete, use a dash.&lt;/p&gt;

&lt;p&gt;If you’ve got a task that is important or that you want to draw extra attention to, put a little asterisk next to it.&lt;/p&gt;

&lt;p&gt;If you’ve got something exciting or neat (usually paired with an information/note dash), put a little exclamation mark next to it.&lt;/p&gt;

&lt;p&gt;If something needs a little more looking into, put a little eye next to it (or something that vaguely resembles an eye).&lt;/p&gt;

&lt;h3 id=&quot;9-migrating-and-scheduling&quot;&gt;9. Migrating and Scheduling&lt;/h3&gt;

&lt;p&gt;At the end of each month, you should go through the previous Month Log and the previous month’s Daily Logs.  Find all of the tasks that weren’t completed.  Now is a good time to put a line through anything that ended up not mattering or not getting done.  If there’s something that still ought to get done, you have a couple of options.  You can put a forward-facing arrow and push in into your next month’s Month Log or a Collection/List page that you’ve created.  This is called “Migrating” a task.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-migration.jpg&quot; alt=&quot;A migrated task&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Or, you can send it back to the Long View to get completed sometime in the future.  Do this by putting a backwards-facing arrow in front of it.  Then be sure to write it in the Long View in the appropriate place.  This is called “Scheduling” a task.  (I like to call it creating a problem for Future-Me).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bullet-scheduling.jpg&quot; alt=&quot;A scheduled task&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;locked-and-loaded&quot;&gt;Locked and Loaded&lt;/h2&gt;

&lt;p&gt;If you’ve made it this far, you’re well on your way to being a bullet journaling master.  Here are the main things to take away.  Bullets should be fast, so they’re not a burden on your schedule, but they don’t have to be.  If you’ve got some extra time to sit down and take more detailed notes, good on you.&lt;/p&gt;

&lt;p&gt;This method is designed to be low-stress.  Don’t freak out if you forget to do a daily log.  Just catch up the next day and do some info dashes to remind you of what you did that day.  If you make it a stressful thing, then when you miss a day, you’ll feel bad that you have to do two days worth of stressful things and you’ll want to skip it that much more.  The best way to stay consistent is to make your bullet journal a happy place and not beat yourself up about doing it wrong.  Cut yourself some slack.&lt;/p&gt;

&lt;p&gt;Final Pro-Tip: Make sure to put your name and contact info at the very front of your bullet journal.  You wouldn’t want to lose it with no chance of anyone contacting you when they find it, would you?&lt;/p&gt;

&lt;p&gt;For more information, go to the official &lt;a href=&quot;http://bulletjournal.com/&quot;&gt;Bullet Journal website&lt;/a&gt;.  They’ve got a lot of great resources, and you can even buy actual “Bullet Journals” from them.&lt;/p&gt;

&lt;p&gt;Everybody does their journals a little differently.  My mom likes to get really artsy and color in her Monthly Logs.  I rarely draw in my journal.  I like bullets and straight lines and consistent formatting (hence my journal’s built-in ruler pouch).  It soothes me.  I want to hear from you.  If you’ve got another type of page that you like to include in your journal that I didn’t mention, show me in the comments or &lt;a href=&quot;https://twitter.com/paytastic&quot;&gt;tweet me a picture&lt;/a&gt; and I’ll share it with my army of followers (double-digits, baby, awww yeah!).&lt;/p&gt;

&lt;p&gt;Thanks again for reading!&lt;/p&gt;

</description>
        <pubDate>Sun, 25 Mar 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/03/25/bullet-journal/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/03/25/bullet-journal/</guid>
        
        <category>productivity</category>
        
        <category>bullet-journal</category>
        
        
      </item>
    
      <item>
        <title>Vim Filters</title>
        <description>&lt;p&gt;Quick tip time!  Let’s talk about Vim filters.  This is a way to execute any external command and pipe the results into your current buffer.  This is a great way to get the power of your shell into vim without having to learn much VimScript.  Here are the basics:&lt;/p&gt;

&lt;h2 id=&quot;reading-command-input-into-the-current-buffer&quot;&gt;Reading command input into the current buffer&lt;/h2&gt;

&lt;p&gt;This is the simplest method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:r !ls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will read the results of &lt;code&gt;ls&lt;/code&gt; into your buffer at your cursor location.  You can also specify the specific line to insert after.  The next command will read the results of the &lt;code&gt;ls&lt;/code&gt; command into your current buffer after line 4.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:4r !ls
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;sending-buffer-contents-as-input-to-an-external-command&quot;&gt;Sending buffer contents as input to an external command&lt;/h2&gt;

&lt;p&gt;You can also send lines of your buffer out to be replaced with the results of the command.  A common thing to do is to operate on the whole buffer you’re working on.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:%!sort
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;%&lt;/code&gt; selects the whole buffer, and then the &lt;code&gt;!&lt;/code&gt; sends the selected lines out to the external &lt;code&gt;sort&lt;/code&gt; command.  The whole buffer contents will be replaced with the results of the command.&lt;/p&gt;

&lt;p&gt;For example.  Let’s say you’re working on a text file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;# Attention, Everyone!

This markdown file contains some **pretty interesting** stuff.

I __mean__ it.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But something’s just not quite there.  It needs some more zoom – some more whammy!  Try combining it with a &lt;a href=&quot;https://assertnotmagic.com/2017/10/05/smooth-one-liners/&quot;&gt;slick Ruby one liner!&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:%!ruby -ne 'puts $_.upcase'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And suddenly, the contents of your buffer is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markdown&quot;&gt;# ATTENTION, EVERYONE

THIS MARKDOWN FILE CONTAINS SOME **PRETTY INTERESTING** STUFF.

I __MEAN__ IT.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will work with any command.  You can use shell commands, or you can run it through a Python or Node script.  It gives you the power to select the best (or your favorite) tool for the job, instead of locking you into Vim’s capabilities alone.  And you can use other motions if you just want to replace a portion of your buffer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;:!!ruby -ne 'puts $_.upcase'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Two exclamation points will operate on the current line.&lt;/p&gt;

&lt;p&gt;It also works on visually selected lines.  Select a couple lines in visual mode:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;v         &quot; Visual mode activated
jj        &quot; Select next two lines
:!sort    &quot; Sorts the lines that were selected.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Protip: If you accidentally run a command and blow away your file somehow, don’t panic.  Simply press &lt;code&gt;u&lt;/code&gt; in Normal mode to undo the operation.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hope this comes in handy!&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Mar 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/03/18/vim-filters/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/03/18/vim-filters/</guid>
        
        <category>vim</category>
        
        <category>tricks</category>
        
        
      </item>
    
      <item>
        <title>Publish Single Directories to Another Branch</title>
        <description>&lt;p&gt;Quick Tip!&lt;/p&gt;

&lt;p&gt;Let’s say that you’re just like me.  You’ve been working on a web project: HTML, CSS, and maybe some JavaScript.  You’re done and you’re ready to show the world your project, so you want to get it built, compiled, minified, and put it somewhere.  But how?  &lt;code&gt;git subtree&lt;/code&gt;.  I’ll show you.  One command.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Also, did you see the cover image?  Subtree?  HA!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s assume you’ve got a project laid out like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;my-dope-project
|- README.md
|- src
|   |- index.html
|   |- css
|       |- styles.sass
|   |- js
|       |- main.js
|       |- helper.js
|- dist
|- webpack.config.js
|- package.json
|- .gitignore
|- node_modules
    |- OMG so much stuff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or something.  I don’t know your life.  So you build your site with a &lt;code&gt;npm run build&lt;/code&gt;.  Now your &lt;code&gt;dist&lt;/code&gt; directory is full of your beautiful bundled new site.  So how do you put it up somewhere?&lt;/p&gt;

&lt;h2 id=&quot;1-make-sure-the-dist-folder-is-actually-checked-into-your-repo&quot;&gt;1. Make sure the dist folder is actually checked into your repo.&lt;/h2&gt;

&lt;p&gt;Get it out of your &lt;code&gt;.gitignore&lt;/code&gt; and &lt;code&gt;add/commit/push&lt;/code&gt; it.&lt;/p&gt;

&lt;h2 id=&quot;2-use-the-subtree-luke-andor-leia&quot;&gt;2. Use the Subtree, Luke (and/or Leia).&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git subtree push --prefix dist origin gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, &lt;code&gt;dist&lt;/code&gt; is the directory subtree you want to publish.  &lt;code&gt;origin&lt;/code&gt; is the remote repo you’re pushing to.  &lt;code&gt;gh-pages&lt;/code&gt; is the name of the remote branch you want to push to.&lt;/p&gt;

&lt;p&gt;Then go to your GitHub and into your repo settings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/gh-pages-settings.png&quot; alt=&quot;GitHub Pages Settings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Set the branch that you created to be the public branch.  And that’s it!  Head to &lt;code&gt;&amp;lt;your-username&amp;gt;.github.io/&amp;lt;repo-name&amp;gt;&lt;/code&gt; and do your happy dance!&lt;/p&gt;

&lt;p&gt;I know that there’s about a thousand ways you could skin this particular cat and they all have their pro’s and con’s.  I just really wanted to share this particular approach because I thought it was neat.  Happy coding!&lt;/p&gt;
</description>
        <pubDate>Thu, 08 Mar 2018 00:00:00 -0800</pubDate>
        <link>https://assertnotmagic.com/2018/03/08/publish-directories-to-github-pages/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/03/08/publish-directories-to-github-pages/</guid>
        
        <category>git</category>
        
        <category>tricks</category>
        
        
      </item>
    
      <item>
        <title>Closures and Callbacks</title>
        <description>&lt;p&gt;Earlier this week, I got an email telling me that the Odin Project had just upgraded their &lt;a href=&quot;https://www.theodinproject.com/courses/javascript&quot;&gt;JavaScript course&lt;/a&gt;.  I checked it out.  If you’re like me and have been putting off learning more about JavaScript because of all of the build tooling, this course is definitely for you.  I learned the basics of webpack (and even submitted a &lt;a href=&quot;https://github.com/webpack/webpack.js.org/pull/1855&quot;&gt;pull request&lt;/a&gt; to make a correction on the webpack tutorial!), and it was all at a super gentle and beginner-friendly pace.  As I was going through this course, during one of the assignments, I came across a pattern that I thought was neat.  Especially after my &lt;a href=&quot;https://assertnotmagic.com/2018/02/10/closure-i-hardly-know-her/&quot;&gt;post a couple of weeks ago about closures&lt;/a&gt;, I knew I had to share it.  If at any point you’re reading through my code examples and you get furious at my code, please skip ahead to the &lt;a href=&quot;#delirium-disclaimer&quot;&gt;Delirium Disclaimer&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-project&quot;&gt;The Project&lt;/h2&gt;

&lt;p&gt;The goal was to use as many different modules as possible in order to test out the bundling power of webpack.  I was supposed to &lt;a href=&quot;https://www.theodinproject.com/courses/javascript/lessons/restaurant-page&quot;&gt;create a generic landing page for a restaurant&lt;/a&gt;, and it had to have a tab-based navigation system.  &lt;a href=&quot;https://assertnotmagic.com/odin-restaurant/&quot;&gt;Here’s the site I came up with.&lt;/a&gt;  (and the related &lt;a href=&quot;https://github.com/rpalo/odin-restaurant&quot;&gt;GitHub repo&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/odin-restaurant.png&quot; alt=&quot;My Odin Project Restaurant&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I didn’t do anything to make it look pretty on mobile, so if you’re reading on mobile, forgive me.&lt;/p&gt;

&lt;h2 id=&quot;the-technique&quot;&gt;The Technique&lt;/h2&gt;

&lt;p&gt;The technique I want to share is the one I used for the nav button click callback: I created a closure!  Let me back up.  I’ve got three buttons.  The HTML ends up looking something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&quot;tabs&quot;&amp;gt;
  &amp;lt;button class=&quot;tabs__link active&quot; data-target=&quot;About&quot;&amp;gt;About&amp;lt;/button&amp;gt;
  &amp;lt;button class=&quot;tabs__link&quot; data-target=&quot;Menu&quot;&amp;gt;Menu&amp;lt;/button&amp;gt;
  &amp;lt;button class=&quot;tabs__link&quot; data-target=&quot;Contact&quot;&amp;gt;Contact&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I then have a bunch of &lt;code&gt;&amp;lt;div class=&quot;tabcontent&quot;&amp;gt;&lt;/code&gt;’s that contain the content of the tabs.  Every one but the active one has &lt;code&gt;display: hidden&lt;/code&gt;, so only the active one will show up.&lt;/p&gt;

&lt;p&gt;Of course, the assignment specifically asked me to generate these buttons in JavaScript, so it ends up looking more like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Don't worry about openTab now.
// We'll talk about it in a minute.
import openTab from './openTab';

const loadNav = () =&amp;gt; {
  const tabHolder = document.querySelector('.tabs');
  const tabs = ['About', 'Menu', 'Contact'];
  tabs.forEach(tabName =&amp;gt; {
    const button = document.createElement('button');
    button.classList.add('tabs__link');
    button.dataset.target = tabName;
    button.addEventListener('click', openTab(tabName));
    button.innerHTML = tabName;
    tabHolder.appendChild(button);
  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But here’s where the magic happens.  I’ll show you the code for &lt;code&gt;openTab&lt;/code&gt;, and then I’ll talk about what’s so special about it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const openTab = tabName =&amp;gt; {
  return (e) =&amp;gt; {
    const tabContent = document.querySelectorAll('.tabcontent');
    tabContent.forEach(tab =&amp;gt; {
      tab.style.display = &quot;none&quot;;
    });
    
    const tabLinks = document.querySelectorAll('.tabs__link');
    tabLinks.forEach(link =&amp;gt; {
      link.classList.remove('active');
    });
    
    const activeTab = document.querySelector(`[data-page=&quot;${tabName}&quot;]`);
    activeTab.style.display = &quot;block&quot;;
    e.currentTarget.classList.add('active');
  };
};

export default openTab;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;so-whats-going-on-here&quot;&gt;So What’s Going On Here?&lt;/h3&gt;

&lt;p&gt;Usually, when you pass a callback function to an event listener, you do it without parenthesis, like this: &lt;code&gt;button.addEventListener('click', doTheThing)&lt;/code&gt;.  This is because you’re not calling the function as you’re creating the event listener, you’re passing the function object to be called later.  However, have you ever wanted to pass additional information to a callback?  Usually when you have a callback function for event listeners, they only take the event as an argument:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const doTheThing = e =&amp;gt; {
  // stuff
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, what if you want it to have additional information?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const doTheThing = (e, myColor) =&amp;gt; {
  console.log(myColor);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my case, I wanted to write one callback function that would work for all three nav buttons, even though their functionality would each be a little different, based on which tab they were trying to act on.  So I needed something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const openTab = (e, tabName) =&amp;gt; {
  // The stuff
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BUT, if you try this, JavaScript gets grumpy.  So what can we do?  One solution is to create a closure at the time that you add the event listener.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const openTab = tabName =&amp;gt; {
  return e =&amp;gt; {
    // Things in here have access to tabName *and* e
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you use it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;button.addEventListener('click', openTab(tabName));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the &lt;code&gt;openTab&lt;/code&gt; function gets &lt;em&gt;immediately&lt;/em&gt; evaluated, and the new, anonymous function is given as the callback.  It’s the same as writing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;button.addEventListener('click', e =&amp;gt; {
  console.log(tabName + &quot;Haha!&quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to our friend the closure, the anonymous function placed after the event listener retains access to the &lt;code&gt;tabName&lt;/code&gt; variable, even though the function was called long before the event ever fires.  If you’re not exactly sure what a closure is, definitely take a look at &lt;a href=&quot;https://assertnotmagic.com/2018/02/10/closure-i-hardly-know-her/&quot;&gt;my post on closures&lt;/a&gt;.  The benefit is that you can pull the &lt;code&gt;openTab&lt;/code&gt; logic out into its own function and your &lt;code&gt;addEventListener&lt;/code&gt; call ends up looking a lot cleaner.&lt;/p&gt;

&lt;p&gt;So, the next time you want your callback functions to have more information than just the event passed in, consider using a closure to DRY things up.&lt;/p&gt;

&lt;h2 id=&quot;delirium-disclaimer&quot;&gt;Delirium Disclaimer&lt;/h2&gt;

&lt;p&gt;As I was writing this post, I noticed a lot of things I should change and fix in my original code (variable name consistencies, CSS class name consistencies, etc.).  I also noticed that I probably could have left out the &lt;code&gt;tabName&lt;/code&gt; variable completely and gotten away with getting everything that I needed from the &lt;code&gt;event&lt;/code&gt; that got passed into the function.  The whole closure thing may have been unnecessary.&lt;/p&gt;

&lt;p&gt;I’m going to go ahead and blame this on the fact that by the time I got to this part of the code, I was delirious from all of the things I was doing and new things I was learning.  Now that I’ve had some sleep, past-me’s code is making me cringe a little bit.  Sorry!&lt;/p&gt;

&lt;p&gt;That being said, this is one of my first real stabs at modern JavaScript.  So if you see ways that I could improve my code or do something more idiomatically, I’d love to get your feedback.  Definitely share your wisdom!&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Mar 2018 00:00:00 -0800</pubDate>
        <link>https://assertnotmagic.com/2018/03/01/closures-and-callbacks/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/03/01/closures-and-callbacks/</guid>
        
        <category>javascript</category>
        
        <category>functional</category>
        
        <category>front-end</category>
        
        
      </item>
    
      <item>
        <title>Getting Things Done - A Programmer Productivity Guide</title>
        <description>&lt;p&gt;&lt;em&gt;This article was originally posted on &lt;a href=&quot;https://simpleprogrammer.com/getting-things-done-productivity-guide/&quot;&gt;The Simple Programmer&lt;/a&gt;.  Images and links are courtesy of their team.  I got to work with a team of really amazing editors and it was a great experience.  I think, overall, it helped the article come out way better than I originally imagined it.  I cannot recommend working with an editor enough.  You have to give up a bit of creative control on the article and put on a team mindset, but it’s definitely worth it.  You can write for Simple Programmer too.  Just &lt;a href=&quot;https://simpleprogrammer.com/write-for-us/&quot;&gt;submit an article draft or idea!&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Programming is hard. It’s fun, it’s rewarding, but it’s definitely not easy. In order to be successful and productive, being able to get into that deep focus state and stay there is key.&lt;/p&gt;

&lt;p&gt;At the same time, it seems like the universe is trying its best to keep you out of that state by peppering you with other things that clamor for your attention at irregular and infuriatingly unpredictable intervals: email, meetings, phone calls, and more.&lt;/p&gt;

&lt;p&gt;Even if you manage to successfully get rid of all of the unnecessary &lt;a href=&quot;https://simpleprogrammer.com/how-to-avoid-distractions/&quot;&gt;distractions&lt;/a&gt;, there is some minimum amount of outside world engagement that is required to be a successful and well-adjusted employee, co-worker, and human being. Depending on how much you’re storing “in memory” at any given time, even these small distractions can be enough for you to lose your focus and have to get back into “the zone.”&lt;/p&gt;

&lt;p&gt;That being said, here’s the question: how do you keep track of your thoughts? How do you make sure that everything you need to do gets done?&lt;/p&gt;

&lt;p&gt;Everybody has some sort of system—even not having a system and trying to remember everything is technically a system. I wanted to share mine because it seems to work pretty well.&lt;/p&gt;

&lt;p&gt;There’s a method that is fairly well-established called the “Getting Things Done” (GTD) approach for managing the things that you have to do. It was &lt;a href=&quot;https://gettingthingsdone.com/meet-david/&quot;&gt;created by David Allen&lt;/a&gt; around 2002 and been discussed in &lt;a href=&quot;https://www.wired.com/2005/07/gtd-a-new-cult-for-the-info-age/?currentPage=all&quot;&gt;Wired&lt;/a&gt; magazine and on &lt;a href=&quot;https://www.hanselminutes.com/234/getting-things-done-with-lane-newsom&quot;&gt;Hanselminutes&lt;/a&gt; (Scott Hanselman’s podcast). I heard about it from Wes Bos and Scott Tolinski on their &lt;a href=&quot;https://syntax.fm/show/011/our-favourite-productivity-hacks&quot;&gt;Syntax podcast&lt;/a&gt;. You can read more about the philosophy behind it on the &lt;a href=&quot;https://gettingthingsdone.com/fivesteps/&quot;&gt;Getting Things Done website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ll go over my own process step by step, which is loosely based on the GTD approach. I like to think about it in terms of a few catchy mantras that I came up with all by myself.&lt;/p&gt;

&lt;h2 id=&quot;1-remember-nothing-record-everything&quot;&gt;1. Remember Nothing; Record Everything.&lt;/h2&gt;

&lt;p&gt;Don’t remember anything. You’re not good at it. Find someplace to store all the things you need to think about and remember.&lt;/p&gt;

&lt;p&gt;I use &lt;a href=&quot;https://trello.com/&quot;&gt;Trello&lt;/a&gt; because it’s a tool that really fits with how my brain works. Trello is a web app that provides users with any number of boards, which are basically blank canvases that will eventually house all of your to-dos, ideas, projects, and everything else.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/gtd-trello1.png&quot; alt=&quot;Blank Trello board&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On these &lt;em&gt;boards,&lt;/em&gt; you can create &lt;em&gt;lists,&lt;/em&gt; which are vertically aligned and ordered collections of &lt;em&gt;cards.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/gtd-trello2.png&quot; alt=&quot;Board with cards&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can use these cards to store individual brain items. They can have images, comments, documents (like this article), checklists, and even due dates attached to them. I call this system my Other Brain.&lt;/p&gt;

&lt;p&gt;The most important feature for me is that Trello allows you to drag and drop your lists and cards. You can create a task, keep all the information about that task (including conversations, history, and data) bundled along with the same card, and even use your lists as a form of workflow control.&lt;/p&gt;

&lt;p&gt;For example, you might have several stages to your programming workflow: tasks that are pending, currently-being-worked-on, ready for review, and those that are finished and ready to publish/push this week. You can create a card when you first get a task and just drag it from one list to the next as you work. This process gives you a nice, visual snapshot of your progress at any given point.&lt;/p&gt;

&lt;p&gt;If you’ve got a ton of items in the pending list and someone asks you if you have time to take on just one more quick task, there is a concrete record that you can look at, instead of trying to remember all of the things you have to do.&lt;/p&gt;

&lt;p&gt;Personally, I tend to make lists based on the category of the thing. Is it somebody else’s blog post I want to remember to read later? Is it a future idea for my own blog? Is it a programming project to complete? I’ve got a list for that.&lt;/p&gt;

&lt;p&gt;And as you list your tasks, try to sort your thoughts in order of urgency and/or ease of completion. I like to put the things that I need to (or can) finish first down at the bottom of my lists and work my way up.&lt;/p&gt;

&lt;p&gt;Sorting your tasks allows you to quickly find the next thing you need to work on and get started in it, minimizing the brain space your task management system takes up.&lt;/p&gt;

&lt;p&gt;If Trello doesn’t fit your style, use a note-taking app, an actual paper notebook, or something else. The important thing is that you &lt;strong&gt;get everything out of your head!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here’s why. You’ve only got so much brain. Granted, you’re reading articles on Simple Programmer, so you’ve probably got a lot of brains. But it’s a &lt;em&gt;finite amount.&lt;/em&gt; If you’re carrying everything you have to do later around in your head, you’re not using that space for thinking about the thing you need to do now.&lt;/p&gt;

&lt;p&gt;For programmers especially, having that extra space can make a big impact. When you’re programming, you need to be able to simulate the code in your head, stepping through each line and understanding how that line affects the current values of each variable. This process necessarily means that you need to constantly be remembering what variable values are, what function inputs &lt;em&gt;could be,&lt;/em&gt; and—depending on those values—which branches of program flow could be triggered.&lt;/p&gt;

&lt;p&gt;Having the space to accommodate all of these values in your “mental memory,” without bumping up against the space containing your dentist appointment at 3:30 or what you’re going to say to the customer tomorrow morning, can make your life significantly less error-prone and stressful.&lt;/p&gt;

&lt;p&gt;In the same way that you feel better and more productive when you clear off your desk, clean up your room when it’s messy, or refactor your code, this step is all about &lt;em&gt;cleaning out your brain.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once you’ve picked how you want to store your information, you can begin the process. The very second you: 
have a brilliant idea,
remember something you have to do,
finish a feature which causes you to have new problems,
someone stops by your desk to ask you to take a look at something,
get an email from a customer that needs a long answer,
or get assigned something at a meeting,
put it in your Other Brain.&lt;/p&gt;

&lt;p&gt;Feel free to make your Other Brain pretty, and create various sections for different parts of your brain. I’ve got one board for personal/programming stuff, one for work (I design plastic molds), and one for house chores and to-dos that I share with my wife.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/gtd-trello3.png&quot; alt=&quot;My personal board&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-your-inbox-is-a-receiving-area-not-a-to-do-list&quot;&gt;2. Your Inbox Is a Receiving Area, Not a To-Do List&lt;/h2&gt;

&lt;p&gt;After you get your Main Brain cleaned out and offloaded into your Other Brain, you need to stop all of the junk that’s pouring into your Main Brain from cluttering it up. The main place this junk pours in, especially in the professional setting, is your email inbox.&lt;/p&gt;

&lt;p&gt;For me, I do a lot of customer-facing work: generating quotes, formalizing requirements, and working through design issues with customers. For you, maybe it’s tons of QA tickets or new issues being filed. Maybe you’ve got several different projects and chat notifications coming in from different sources.&lt;/p&gt;

&lt;p&gt;I used to keep things in my email inbox until I was done with them. Then I realized that having a full inbox stresses me out. It makes me feel like I have a billion things to do, and there’s no categorizing or organization. It’s just a big 💩-pile of things that make me feel bad and give me anxiety.&lt;/p&gt;

&lt;p&gt;Now, a couple of times a day, I open up my email. For each thing, if I can handle it quickly, I take care of it right away.&lt;/p&gt;

&lt;p&gt;The question that goes through my head is, “Can I answer this in the next 30 seconds, without stopping and looking something up?” And depending on how overwhelmed I’m feeling by things that aren’t yet tracked in my Other Brain, that time limit gets shorter and shorter.&lt;/p&gt;

&lt;p&gt;If it’s going to take me a little while to track down the answer or information I need to respond, I enter it into my Other Brain and archive it in its corresponding email folder. When in doubt, put it in the Other Brain.&lt;/p&gt;

&lt;p&gt;One way or another, it’s out of my inbox quickly and painlessly. Generally, this lets me get to Inbox Zero in less than an hour. (Hopefully).&lt;/p&gt;

&lt;h2 id=&quot;3-get-things-done-one-bite-at-a-time&quot;&gt;3. Get Things Done, One Bite at a Time&lt;/h2&gt;

&lt;p&gt;After you’ve stemmed the tide of ideas, emails, and people asking you to do things, open up your Other Brain and get to work. Don’t get freaked out by everything that’s on your list, because it will probably be a lot. It’s your whole Other Brain!&lt;/p&gt;

&lt;p&gt;But since you don’t have to spend valuable time remembering all the things you have to do, you’re going to be able to fully focus on your tasks. And since you’ve already pre-sorted your thoughts by order of importance, you should be able to look at your list and find the first thing that needs to be done.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do it.&lt;/strong&gt; Don’t think about any of the other things. Once you’re done, cross it off, archive it, or do whatever you have to do to close it out. And find the next thing. Do it again and again until you are tired, hungry, or your list is empty.&lt;/p&gt;

&lt;p&gt;The nice thing about this approach is that it matters less if you get interrupted or if somebody jams something in the front of your queue in a panic. It allows you to stay in that all-important deep-focus state, since the act of putting something in your Other Brain doesn’t take nearly as much focus as actually handling the item that threatens to disrupt your concentration. You just file the interruption into the Other Brain, and when they go away, you get right back into your tasks!&lt;/p&gt;

&lt;h2 id=&quot;now-get-started-getting-things-done&quot;&gt;Now, Get Started Getting Things Done&lt;/h2&gt;

&lt;p&gt;That’s it. Remember nothing, get everything out of your brain &lt;em&gt;and&lt;/em&gt; your inbox, record everything &lt;em&gt;somewhere,&lt;/em&gt; and do the things you can, when you can focus, &lt;a href=&quot;https://simpleprogrammer.com/taking-breaks-will-boost-productivity/&quot;&gt;one bite at a time.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I no longer spend entire days trying to get all the way through my inbox. I forget which methods to write next way less frequently. My ideas for projects and posts like this one are no longer just shower thoughts that disappear after fifteen minutes.&lt;/p&gt;

&lt;p&gt;When you’re coding, in order to know what you’re program is doing, you have to be the computer—and that takes a lot of focus.&lt;/p&gt;

&lt;p&gt;Like, “everything you’ve got” levels of focus.&lt;/p&gt;

&lt;p&gt;Like, “if someone asks you a question in the middle of a session, you have to stare blearily at them for a second, figure out who they are and what’s happening, and probably end up saying ‘Um. What?’” levels of focus.&lt;/p&gt;

&lt;p&gt;So, distracting yourself with anything else while you’re doing that is not only unproductive—it’s unnecessary. I mean, come on! We’re programmers. We’ve got tools for this. Automate it, delegate it, and get back to the fun stuff.&lt;/p&gt;
</description>
        <pubDate>Mon, 19 Feb 2018 00:00:00 -0800</pubDate>
        <link>https://assertnotmagic.com/2018/02/19/getting-things-done/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/02/19/getting-things-done/</guid>
        
        <category>productivity</category>
        
        <category>gtd</category>
        
        
      </item>
    
      <item>
        <title>Lucky Numbers and Science</title>
        <description>&lt;p&gt;Earlier this week, &lt;a href=&quot;https://dev.to/heikodudzus&quot;&gt;Heiko Dudzus&lt;/a&gt; posted &lt;a href=&quot;https://dev.to/heikodudzus/write-a-program-or-script-to-find-lucky-numbers--23me&quot;&gt;this challenge post&lt;/a&gt; on Dev.to.  The challenge was this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Write a program or script in your language of choice, that prints the lucky numbers between 1 and n.  Try to make it as fast as possible for sieving lucky numbers between 1 and a million. (Perhaps it is sensible to measure the time without printing the results.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A lucky number is defined as a number that survives the &lt;a href=&quot;https://en.wikipedia.org/wiki/Lucky_number&quot;&gt;Sieve of Josephus&lt;/a&gt;.  I’m going to quote the original post here so you get the idea.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The 1 is lucky by definition.&lt;/p&gt;

  &lt;p&gt;The successor of 1 is 2. So, every second number gets eliminated:
1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, …&lt;/p&gt;

  &lt;p&gt;The next number is 3. Now, every third number gets eliminated:
1, 3, 7, 9, 13, 15, 19, 21, …&lt;/p&gt;

  &lt;p&gt;Number 3 is lucky! It’s successor is 7. Now, every seventh number gets eliminated. And so on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;See the link above for more details.  I advise you to give the challenge a try if you haven’t yet before you read the rest of the post, since I’m about to tell you about my solutions.&lt;/p&gt;

&lt;p&gt;I came up with two solutions, but the best solution ended up being an interesting combination of them both.  You’ll see what I mean.&lt;/p&gt;

&lt;h2 id=&quot;solution-1-naively-run-the-algorithm&quot;&gt;Solution 1: Naively Run the Algorithm&lt;/h2&gt;

&lt;p&gt;I like the quote “Make it work, make it right, make it fast”, which, as far as I can tell, this is attributed to &lt;a href=&quot;https://gist.github.com/OnesimusUnbound/3064220&quot;&gt;Kent Beck&lt;/a&gt;.  Therefore, my first solution focused on coding things exactly like the problem was provided, the easy way, whether or not this was the fastest way.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;def lucky_numbers(max)
  possibles = (1..max).to_a
  1.step do |current_index|
    break if current_index &amp;gt;= possibles.size

    step_size = possibles[current_index]
    possibles = reject_every_nth_item(possibles, step_size)
    
    # If current_index is one of the items to get wiped out
    # the same current index will actually point at the next
    # number.  Reuse this index.
    redo if wiped_out?(ind, step_size)
  end
  possibles
end

def reject_every_nth_item(items, n)
  items.reject.each_with_index do |_, ind|
  	((ind + 1) % n).zero?
  end
end

def wiped_out?(ind, step_size)
  ((ind + 1) % step_size).zero?
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I was all proud of myself as I ran it.  And then I ran it with &lt;code&gt;max = 1_000_000&lt;/code&gt;.  And I sat.  And I sat…&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is taking too long!&lt;/em&gt;   I could to do better.&lt;/p&gt;

&lt;h2 id=&quot;solution-2-focus-on-the-keeps-not-the-rejects&quot;&gt;Solution 2: Focus on the Keeps, not the Rejects&lt;/h2&gt;

&lt;p&gt;As I was experimenting and testing things out, I noticed that, at the higher values of &lt;code&gt;step_size&lt;/code&gt;, the naive algorithm was only rejecting a number every so often.  So I thought to myself, “What if we could take the step size out of the equation and make each step take roughly the same amount of time, regardless of how many elements there were in it?”  So, instead of checking each item to see if it was a reject, I calculated out the size of the chunk of &lt;em&gt;non-rejected&lt;/em&gt; numbers and copied those into a &lt;code&gt;results&lt;/code&gt; array, ignoring the rejects instead of explicitly rejecting them.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;def lucky_numbers(max)
  possibles = (1..max).to_a
  1.step do |current_index|
    break if current_index &amp;gt;= possibles.size
    
    step_size = possibles[current_index]
    possibles = grab_chunks_between_rejects(possibles, step_size)
      
    redo if wiped_out?(current_index, step_size)
  end
  possibles
end

def grab_chunks_between_rejects(items, n)
  chunk_count = (items.size / n).floor
    
  # The new array will be the same size minus one reject item
  # for every chunk possible
  result = Array.new(items.size - chunk_count)
  chunk_target_index = 0
    
  # Some tricky indexing...
  # 1) Select chunks of size n - 1 (so as to not include the reject endpoint)
  # 2) Copy it into the results array
  # 3) Continue, each chunk after the one in front of it.
  (0...items.size).step(n) do |chunk_start|
  	chunk = items[chunk_start...(chunk_start + n - 1)]
    result[chunk_target_index...(chunk_target_index + chunk.size)] = chunk
    chunk_target_index += chunk.size
  end
  result
end
  
def wiped_out?(ind, step_size)
  ((ind + 1) % step_size).zero?
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one worked great!  Even on my little laptop, it ran relatively quickly (don’t worry, the benchmarks are coming).  But something felt weird.  My programmer senses were tingling.&lt;/p&gt;

&lt;p&gt;I had no proof at this point, but it seemed like all of the setup and creation of a second array each “round” should cause this algorithm to perform poorly at small &lt;code&gt;step_size&lt;/code&gt;s.  It was at this point that this ceased to be a code challenge and became a science experiment.&lt;/p&gt;

&lt;h2 id=&quot;solution-3-a-combination-of-the-two&quot;&gt;Solution 3: A Combination of the Two&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;HYPOTHESIS: There is a performance trade-off between the low and high end for my two solutions.  Thus, there should be a combination of the two that is faster than either one as a stand-alone.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If there &lt;em&gt;was&lt;/em&gt; a trade-off somewhere between the two solutions, I would be able to run a few tests and find the best possible combination.  I quickly updated my &lt;code&gt;lucky_numbers&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;def lucky_numbers(max, strategy_switch = 10)
  possibles = (1..max).to_a
  1.step do |current_index|
    break if current_index &amp;gt;= possibles.size
    
    step_size = possibles[current_index]

    # Calculate next round of numbers
    possibles = if step_size &amp;lt;= strategy_switch
                  reject_every_nth_item(possibles, step_size)
                else
                  grab_chunks_between_rejects(possibles, step_size)
                end
      
    redo if wiped_out?(current_index, step_size)
  end
  possibles
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now to collect some data!  For sanity’s sake, I wrapped each function in a module to differentiate them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/data-data-data.gif&quot; alt=&quot;Data, data, data!  I cannot make bricks without clay.&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;require &quot;benchmark&quot;

require_relative &quot;lucky_numbers3&quot;

max_nums = 1_000_000
switch_levels = [
  2,
  10,
  100,
  500,
  1000,
  5000,
  10_000,
  50_000,
  100_000,
  500_000,
]

Benchmark.bm do |bm|
  switch_levels.each do |level|
    bm.report(level.to_i) do
      Lucky3::lucky_numbers(max_nums, level)
    end
  end
end

# ▶ ruby optimize_lucky3.rb
#        user     system      total        real
#      2 17.550718  21.655086  39.205804 ( 39.535233)
#     10 18.351711  23.234818  41.586529 ( 42.615220)
#    100 18.443557  22.266405  40.709962 ( 41.178138)
#    500 20.278373  23.325708  43.604081 ( 44.987643)
#   1000 20.725864  22.510307  43.236171 ( 43.617160)
#   5000 27.245503  21.725938  48.971441 ( 49.304915)
#  10000 33.828295  22.476806  56.305101 ( 56.742865)
#  50000 82.069851  37.399753 119.469604 (120.174670)
# 100000 120.410101  23.425739 143.835840 (144.841090)
# 500000 445.835956  31.520488 477.356444 (483.688845)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And no science experiment is complete without plots!  Unfortunately, the data visualization story (outside of the web) is not as cushy in Ruby as it is in Python.  Fortunately, I found a wrapper for Python’s &lt;code&gt;matplotlib&lt;/code&gt; so I could stay in Ruby land for now.  Note that I used a log-based scale on the X-axis to better display my results.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# plot_lucky3.rb

require &quot;matplotlib/pyplot&quot;

plt = Matplotlib::Pyplot

xs = [2, 10, 100, 500, 1000, 5000, 10_000, 50_000, 100_000, 500_000]
ys = [
  39.54,
  42.62,
  41.18,
  44.99,
  43.62,
  49.30,
  56.74,
  120.17,
  144.84,
  483.69,
]
ax = plt.gca()
ax.scatter(xs, ys)
ax.set_xscale('log')
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/img/lucky3-results.png&quot; alt=&quot;Lucky 3 results&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is the part that is confusing to me.  I’ve run the experiment multiple times and I always end up with a dip at around 1000.  We’ll talk about that in a moment.  Here are the benchmarks of each solution directly compared.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;require &quot;benchmark&quot;

require_relative &quot;lucky_numbers&quot;
require_relative &quot;lucky_numbers2&quot;
require_relative &quot;lucky_numbers3&quot;

iterations = 1_000_000

Benchmark.bm do |bm|
  bm.report(&quot;Version 1&quot;) do
    Lucky1::lucky_numbers(iterations)
  end

  bm.report(&quot;Version 2&quot;) do
    Lucky2::lucky_numbers(iterations)
  end

  bm.report(&quot;Version 3&quot;) do
    Lucky3::lucky_numbers(iterations, 1000)
  end
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the results:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▶ ruby lucky_number_timer.rb
          user        system    total      real
Version 1 794.304851  28.946642 823.251493 (826.377494)
Version 2  23.267372  33.858966  57.126338 ( 57.238392)
Version 3  19.517162  20.816684  40.333846 ( 40.470201)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;CONCLUSION: My hypothesis was supported.  A combination of the two solutions performs better than either one solution by itself.  However, the reason behind this is probably not the one that I initially thought.  Some further research is required to find out why this worked.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My wife teaches middle school science and I just got done helping her judge their science fair, so I’ve got experimentation on the brain.  Hopefully this little experiment makes her proud!&lt;/p&gt;

&lt;p&gt;I’m sure my solution wasn’t the best possible solution, but it gets the job done.  Ruby isn’t necessarily the language of choice for high-throughput calculations (&lt;a href=&quot;https://blog.heroku.com/ruby-3-by-3&quot;&gt;although it’s not necessarily a bad choice either&lt;/a&gt;).  If anybody can come up with a convincing reason for why my data came out the way it did, including the dip at 1000, I’ll personally send you a shiny new trophy emoji. 🏆  Also, if you’ve got a solution that you like better than these, I want to see it.  Share it! (or share a link to your solution commented on &lt;a href=&quot;https://dev.to/heikodudzus/write-a-program-or-script-to-find-lucky-numbers--23me&quot;&gt;Heiko’s original post&lt;/a&gt;).&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Feb 2018 00:00:00 -0800</pubDate>
        <link>https://assertnotmagic.com/2018/02/15/lucky-numbers-and-science/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/02/15/lucky-numbers-and-science/</guid>
        
        <category>ruby</category>
        
        <category>puzzle</category>
        
        <category>performance</category>
        
        
      </item>
    
      <item>
        <title>Closure? I Hardly Know Her!</title>
        <description>&lt;p&gt;&lt;em&gt;Cover image credit: &lt;a href=&quot;https://stackoverflow.com/a/29558498/4100442&quot;&gt;this amazing StackOverflow answer&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I’ve learned about closures a few different times, and each time, I’ve come away feeling like I get it, but I don’t necessarily understand why people make such a big deal out of them.  Yeah, hooray, you get functions that can persist their data!  I’ve seen people post things like, “If you’re not using closures, you’re really missing out.”  I think I’ve finally figured out why people are so excited, and why I was confused.  This post will explain what closures are, when you might want to use them, and why it took me so long to get why they’re special.&lt;/p&gt;

&lt;h2 id=&quot;what-are-closures&quot;&gt;What are Closures&lt;/h2&gt;

&lt;p&gt;A closure (also called a &lt;em&gt;function closure&lt;/em&gt; or a &lt;em&gt;lexical closure&lt;/em&gt;) is when you find a way of wrapping up a function with the state in which it was defined into one connected and persistent bundle.  I’ll show you a bunch of examples if that doesn’t make sense.  There’s a number of ways to create a closure, but the canonical one is to define and return a function from within another function.  Here’s what I mean.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def build_zoo():
    animals = []
    def add_animal(animal):
        animals.append(animal)
        return animals
    return add_animal

zoo_a = build_zoo()
zoo_b = build_zoo()

zoo_a(&quot;zebra&quot;)
# =&amp;gt; [&quot;zebra&quot;]
zoo_a(&quot;monkey&quot;)
# =&amp;gt; [&quot;zebra&quot;, &quot;monkey&quot;]
zoo_b(&quot;snek&quot;)
# =&amp;gt; [&quot;snek&quot;]
zoo_a(&quot;panda&quot;)
# =&amp;gt; [&quot;zebra&quot;, &quot;monkey&quot;, &quot;panda&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;https://twitter.com/Doshirae&quot;&gt;@Doshirae&lt;/a&gt; and &lt;a href=&quot;https://dev.to/nixlend&quot;&gt;Nicholas Lee&lt;/a&gt; for pointing out a typo in the &lt;code&gt;return&lt;/code&gt; statement!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;build_zoo&lt;/code&gt; function is a kind of “factory” that creates a &lt;em&gt;scope&lt;/em&gt; and defines a function within that scope.  Then it gives the function &lt;em&gt;that still has access to that scope (and the variables therein)&lt;/em&gt; to you.  After the &lt;code&gt;build_zoo&lt;/code&gt; function ends, it keeps the stack frame and variables defined (like &lt;code&gt;animals&lt;/code&gt;) available to the returned &lt;code&gt;add_animal&lt;/code&gt; function, for later reference.  And every time you call this &lt;code&gt;build_zoo&lt;/code&gt; function, it creates a brand new scope, unconnected to any of the other scopes.  That’s why &lt;code&gt;zoo_a&lt;/code&gt; and &lt;code&gt;zoo_b&lt;/code&gt; were not able to affect each other when they were called!&lt;/p&gt;

&lt;h3 id=&quot;side-note-python-and-scopes&quot;&gt;Side Note: Python and Scopes&lt;/h3&gt;

&lt;p&gt;In Python, you are unable to modify variables outside your scope without extra work.  So, if you tried something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def build_incrementer():
    current_value = 0
    def increment():
        current_value += 1
        return current_value
    return increment

incrementer = build_incrementer()
incrementer()
# =&amp;gt; UnboundLocalError: local variable 'current_value' referenced before assignment
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You get an error!  This is not so in many languages.  In many languages, it’s ok to access variables in parent scopes.  In Python, you’ll have to do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def build_incrementer():
    current_value = 0
    def increment():
        nonlocal current_value # &amp;lt;==
        current_value += 1
        return current_value
    return increment
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This lets you reach out and modify this value.  You could also use global, but we’re not animals, so we won’t.&lt;/p&gt;

&lt;h2 id=&quot;ok-but-so-what&quot;&gt;OK, but So What?&lt;/h2&gt;

&lt;p&gt;“You can keep track of state like a billion different ways!” you say exaggeratingly.  “What’s so special about closures?  They seem unnecessarily complicated.”  And that’s a little bit true.  Generally, if I wanted to keep track of my state with a function, I would do it in one of a few different ways.&lt;/p&gt;

&lt;h3 id=&quot;generator-functions&quot;&gt;Generator Functions&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;def build_incrementer():
    current_value = 0
    while True:
        current_value += 1
        yield current_value

inc_a = build_incrementer()
inc_b = build_incrementer()

next(inc_a)
# =&amp;gt; 1
next(inc_a)
# =&amp;gt; 2
next(inc_a)
# =&amp;gt; 3
next(inc_b)
# =&amp;gt; 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method is very “Pythonic”.  It has no inner functions (that you know of), has a reasonably easy-to-discern flow-path, and (provided you understand generators), and gets the job done.&lt;/p&gt;

&lt;h3 id=&quot;build-an-object&quot;&gt;Build an Object&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;class Incrementer:
    def __init__(self):
        self.value = 0
    
    def increment(self):
        self.value += 1
        return self.value
    
    # Or, just so we can match the section above:
    def __next__(self):
        return self.increment()
    
inc_a = Incrementer()
inc_b = Incrementer()

next(inc_a)
# =&amp;gt; 1
next(inc_a)
# =&amp;gt; 2
next(inc_b)
# =&amp;gt; 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is another good option, and one that also makes a lot of sense to me coming, having done a good amount of Ruby as well as Python.&lt;/p&gt;

&lt;h3 id=&quot;global-variables&quot;&gt;Global Variables&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;current_value = 0
def increment():
    global current_value
    current_value += 1
    return current_value

increment()
# =&amp;gt; 1
increment()
# =&amp;gt; 2
increment()
# =&amp;gt; 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But, I–&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;No.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Wait!  Just let me–&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Nope.  Don’t do it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/closure-bugs.jpg&quot; alt=&quot;Do you want bugs?  Because that's how you get bugs.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Global variables will work in very simple situations, but it’s an really quick and easy way to shoot yourself in the foot when things get more complicated.  You’ll have seventeen different unconnected functions that all affect this one variable.  And, if that variable isn’t incredibly well named, it quickly becomes confusion and nonsense.  And, if you made one, you probably made twenty, and now no-one but you knows what your code does.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/closure-obfuscating.jpg&quot; alt=&quot;Well, at least it doesn't need obfuscating.&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-closures-are-cool&quot;&gt;Why Closures are Cool&lt;/h2&gt;

&lt;p&gt;Closures are exciting for three reasons: they’re pretty small, they’re pretty fast, and they’re pretty available.&lt;/p&gt;

&lt;h3 id=&quot;theyre-small&quot;&gt;They’re Small&lt;/h3&gt;

&lt;p&gt;Let’s look at the rough memory usage of each method (except global variables) above:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import sys

def build_function_incrementer():
    # ...

funky = build_function_incrementer()
def build_generator_incrementer():
	# ...
jenny = build_generator_incrementer()
class Incrementer:
    # ...
classy = Incrementer()

### Functional Closure
sys.getsizeof(build_function_incrementer) # The factory
# =&amp;gt; 136
sys.getsizeof(funky) # The individual closure
# =&amp;gt; 136

### Generator Function
sys.getsizeof(build_generator_incrementer) # The factory
# =&amp;gt; 136
sys.getsizeof(jenny) # The individual generator
# =&amp;gt; 88

### Class
sys.getsizeof(Incrementer) # The factory (class)
# =&amp;gt; 1056
sys.getsizeof(classy) # The instance
# =&amp;gt; 56
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Surprisingly, the generator function’s output actually ends up being the smallest.  But both the generator function, and the traditional closure are much smaller than creating a class.&lt;/p&gt;

&lt;h3 id=&quot;theyre-fast&quot;&gt;They’re Fast&lt;/h3&gt;

&lt;p&gt;Let’s see how they stack up, time-wise.  Keep in mind, I’m going to use &lt;code&gt;timeit&lt;/code&gt; because it’s easy, but it won’t be perfect.  Also, I’m doing this from my slowish little laptop.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import timeit

### Functional Closure
timeit.timeit(&quot;&quot;&quot;
def build_function_incrementer():
	# ...
funky = build_function_incrementer()
for _ in range(1000):
	funky()
&quot;&quot;&quot;, number=1)
# =&amp;gt; 0.0003780449624173343

### Generator Function
timeit.timeit(&quot;&quot;&quot;
def build_generator_incrementer():
	# ...
jenny = build_generator_incrementer()
for _ in range(1000):
	next(jenny)
&quot;&quot;&quot;, number=1)
# =&amp;gt; 0.0004897500039078295

### Class
timeit.timeit(&quot;&quot;&quot;
class Incrementer:
    def __init__(self):
        self.value = 0

    def increment(self):
        self.value += 1
        return self.value

    def __next__(self):
        return self.increment()

classy = Incrementer()
for _ in range(1000):
    next(classy)
&quot;&quot;&quot;, number=1)
# =&amp;gt; 0.001482799998484552
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once again, the class method comes in at the bottom, but this time we see a marginal speed bump with the functional closure.  However, keep in mind, the final argument for closures is the strongest one.&lt;/p&gt;

&lt;h3 id=&quot;theyre-available&quot;&gt;They’re Available&lt;/h3&gt;

&lt;p&gt;This is the one that took me the longest to find out.  &lt;em&gt;Not all languages are as lucky as Python.&lt;/em&gt;  (Excuse me while I prepare my inbox for a deluge of hate mail.)  In Python, we are lucky enough to have Generators as well as a number of ways to create them, like Generator functions.  Honestly, if I had to choose from the above methods, and I was writing Python, I’d actually recommend the Generator Function method, since it’s easier to read and reason about.&lt;/p&gt;

&lt;p&gt;However, there are a lot of languages that aren’t as “batteries included.”  This can actually be a benefit if you want a small application size, or if you’re constrained somehow.  In these cases, as long as your language supports creating functions, you should be able to get all the benefits of Generators (lazy evaluation, memoization, the ability to iterate through a possibly infinite series…) without any fancy features.&lt;/p&gt;

&lt;p&gt;In JavaScript, you can now use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators&quot;&gt;a version of generators&lt;/a&gt;, but that’s ES6 functionality that hasn’t always been there.  As far as I can tell, this isn’t a built-in functionality in Go either (although some research shows that it might be more idiomatic to &lt;a href=&quot;https://stackoverflow.com/questions/11385556/python-style-generators-in-go&quot;&gt;use channels instead&lt;/a&gt;).  I’m sure there are many other lower-level languages as well where a simple function closure is easier than trying to write your own Generator.&lt;/p&gt;

&lt;h2 id=&quot;share-your-wisdom&quot;&gt;Share Your Wisdom!&lt;/h2&gt;

&lt;p&gt;Since I don’t have a whole lot of experience with low-level languages, the pros and cons of closures are new to me.  If you have some better explanations or any examples of when a closure is the perfect tool for the job, please &lt;a href=&quot;https://twitter.com/paytastic&quot;&gt;let me know about it&lt;/a&gt; and I’ll do my best to broadcast your wisdom.&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Feb 2018 00:00:00 -0800</pubDate>
        <link>https://assertnotmagic.com/2018/02/10/closure-i-hardly-know-her/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/02/10/closure-i-hardly-know-her/</guid>
        
        <category>python</category>
        
        <category>functional</category>
        
        
      </item>
    
  </channel>
</rss>
