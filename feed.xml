<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>assert_not magic?</title>
    <description>Programming blog by Ryan Palo.  Code is not magic, and anyone can do it.  Python, Ruby, JavaScript, shell scripting, systems, the web, and more!
</description>
    <link>https://assertnotmagic.com</link>
    <atom:link href="https://assertnotmagic.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 27 Oct 2018 11:30:19 -0700</pubDate>
    <lastBuildDate>Sat, 27 Oct 2018 11:30:19 -0700</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>Tips for Taming the CSS Beast</title>
        <description>&lt;p&gt;&lt;em&gt;Cover image photo by Tallie Robinson on Unsplash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Today I had a conversation on Twitter with @milos_ljuba about CSS.  He had read &lt;a href=&quot;https://dev.to/rpalo/state-of-the-web-data-exploration-1b68&quot;&gt;my article about the Dev.to State of the Web Survey&lt;/a&gt;, and he said he really identified with the group that doesn‚Äôt like CSS.  Our conversation was great, and I asked him if I could share it, because I feel like a lot of people probably struggle with CSS in a similar way.  Hopefully I shared some resources that can help, and Milos can help those people remember they‚Äôre not alone.&lt;/p&gt;

&lt;p&gt;So, here‚Äôs the conversation (albeit with more formatting and fewer typos on my side).&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;milos&quot;&gt;Milos:&lt;/h2&gt;

&lt;p&gt;Hey Ryan, I‚Äôve read your post about the Survey data exploration. Great job! :) You mentioned something about people who don‚Äôt like CSS. I‚Äôm one of them, sadly :D I come from CS background and I‚Äôve always found CSS and everything about UI‚Äôs repelling. I don‚Äôt know if it‚Äôs my fault, but that‚Äôs the way it is. Now I see that I won‚Äôt be able to avoid learning it, especially because I got intrested into frontend stuff - React &amp;amp; Redux ecosystem‚Ä¶ I know everything about what it‚Äôs for and how it works, but every time I need to do a little tweak I bang my head to the wall and search all over the internet. The components from Bootstrap, Semantic UI etc. have been helping me so far, but not everything can be achieved using them.  I would like to be able one day to at least get an idea when I see a specific web page design, how would i go about turning it into a functional site. Any advice about finding the motivation, learning path and resources is appreciated :) Cheers!&lt;/p&gt;

&lt;h2 id=&quot;me&quot;&gt;Me:&lt;/h2&gt;

&lt;p&gt;Hi!  Thanks, I‚Äôm glad you liked the article üòÅ Yeah, CSS is hard for a lot of people.  One problem is that there are often many different ways to do the same thing that all have varying pros and cons, and different options are coming in and out of fashion.  I would say that the best things you can do are:&lt;/p&gt;

&lt;h3 id=&quot;surround-yourself-with-greatness&quot;&gt;Surround Yourself with Greatness&lt;/h3&gt;

&lt;p&gt;Immerse yourself in content and code from people who are really good at CSS.  Wes Bos has a couple free courses.  Look up &lt;a href=&quot;https://javascript30.com/&quot;&gt;JavaScript 30&lt;/a&gt; and his &lt;a href=&quot;https://cssgrid.io/&quot;&gt;CSS Grid course&lt;/a&gt;.  As you go through those, you‚Äôll see a bunch of best practices that are really helpful.  Get on Codepen and look around and follow people doing cool things with CSS.  &lt;a href=&quot;https://codepen.io/sdras/&quot;&gt;Sarah Drasner&lt;/a&gt; is one that comes to mind.  Look at their code.  The articles by &lt;a href=&quot;https://css-tricks.com/author/chriscoyier/&quot;&gt;Chris Coyier&lt;/a&gt; and others on &lt;a href=&quot;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&quot;&gt;CSS Tricks&lt;/a&gt; are almost always excellent.  Take a look through the actuall CSS files in &lt;a href=&quot;https://getbootstrap.com/docs/3.3/css/&quot;&gt;Bootstrap&lt;/a&gt; and others.  See the CSS behind the &lt;code&gt;.text-center&lt;/code&gt; or &lt;code&gt;.btn btn-primary&lt;/code&gt; classes to see how they work.&lt;/p&gt;

&lt;h3 id=&quot;practice&quot;&gt;Practice&lt;/h3&gt;

&lt;p&gt;Build things.  Build a million little projects (again, Codepen is good for this) that are all using CSS and HTML ‚Äì and JavaScript if you‚Äôre up for it!  The more you practice, the more you‚Äôll begin to develop an eye for the issues and how to fix them, as well as good design!&lt;/p&gt;

&lt;h3 id=&quot;get-help&quot;&gt;Get Help&lt;/h3&gt;

&lt;p&gt;Ask for help!  If you‚Äôre stuck on a specific question or problem, don‚Äôt be afraid to ask for help (like you‚Äôre doing right now üôÇ).  I‚Äôm always happy to take a look at some HTML/CSS and try to explain what the problem is and a couple good ways to fix it.  Anyways, hopefully this helps.  Let me know if you have more questions.&lt;/p&gt;

&lt;p&gt;P.S. This actually turned out to be more typing than I thought it would be.  Would you mind if I used your question and my answer in a blog post?  I can leave your name/handle out if you prefer.&lt;/p&gt;

&lt;h2 id=&quot;milos-1&quot;&gt;Milos:&lt;/h2&gt;

&lt;p&gt;Woah, that‚Äôs very helpful üòÄ Thanks for your time. I bookmarked Wes Bos a month ago and I never find the time to sit down and do the course. I will take your advices and try to beat that CSS beast üôÇ For me it‚Äôs harder than some deep functional programming concepts I‚Äôm learning atm‚Ä¶&lt;/p&gt;

&lt;p&gt;Yeah, definitely use it for a blog post if you want. I have no problem people knowing I‚Äôm bad at CSS üòÇ Maybe someone else will find that helpful also.
My nickname is ljuba95 on http://dev.to  and GitHub if you wanna mention me somewhere.&lt;/p&gt;

&lt;p&gt;Will get back to you if I hit a wall during the learning, but it‚Äôs harder not to lose motivation than to actually understand CSS. There are too many properties, ways to accomplish something‚Ä¶&lt;/p&gt;

&lt;p&gt;Thanks again, cheers!&lt;/p&gt;

&lt;h2 id=&quot;me-1&quot;&gt;Me:&lt;/h2&gt;

&lt;p&gt;No problem!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The important thing is to not even try to memorize all of the properties and tags.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Understand the fundamental concepts of how the browser lays things out, in-line vs block elements, the box model, and how selectors and specificity work. Look at best practices like BEM (just a way to lay out your CSS). Once you start to get the fundamentals, you‚Äôll get a feel for ‚ÄúI think there‚Äôs a property that does what I want, but I don‚Äôt know what it‚Äôs called. Box-border-something maybe? I‚Äôll look it up on Google.‚Äù I do that all the time. W3Schools FTW! üòÅ&lt;/p&gt;

&lt;h2 id=&quot;milos-2&quot;&gt;Milos:&lt;/h2&gt;

&lt;p&gt;Yep, that‚Äôs how I learn everything. I get that feel for programming language concepts because I did a language design course.  And for some common programming problems, but I accept that I don‚Äôt clearly get how browser does it‚Äôs work concerning CSS. I‚Äôve heard of all the concepts you mentioned but I still don‚Äôt have deep understanding.  I hope Wes Bos will help üòÄ&lt;/p&gt;

&lt;h2 id=&quot;me-2&quot;&gt;Me:&lt;/h2&gt;

&lt;p&gt;Another good quick overview is this article: &lt;a href=&quot;http://www.aimeemarieknight.com/It's-Not-Dark-Magic-Pulling-Back-the-Curtains-From-Your-Stylesheets/&quot;&gt;It‚Äôs Not Dark Magic: Pulling Back the Curtains from your Stylesheets&lt;/a&gt; by Aimee Knight.  It gives a 10 minute (or so) read into the guts of how browsers deal with your style sheets, which might appeal a little more to your ‚Äúnuts and bolts‚Äù side, maybe.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you have any other good advice or resources, be sure to share it with Milos (and me!).  There‚Äôs so much good content and so many smart, great teachers out there.  Hopefully we can get more people to experience the fun side of CSS!&lt;/p&gt;

&lt;p&gt;Happy styling!&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Oct 2018 09:21:26 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/10/25/tips-for-taming-the-css-beast/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/10/25/tips-for-taming-the-css-beast/</guid>
        
        <category>css</category>
        
        <category>learning</category>
        
        
      </item>
    
      <item>
        <title>Uncomfortable Situations Don't Go Away</title>
        <description>&lt;p&gt;&lt;em&gt;Cover Image by Stephen Philpott on Unsplash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hi!  I‚Äôm using this post to blow off some steam after a stressful week at work.  If you want to skip over the back story and get to the lesson, you can skip down to the &lt;a href=&quot;#the-lesson&quot;&gt;Lesson&lt;/a&gt; section.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This week at work &lt;em&gt;sucked.&lt;/em&gt;  I mean, &lt;strong&gt;a lot.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I work at a machine shop/injection molding house, where we do a lot of prototypes for people, and then help them move into production quantities.  It‚Äôs mostly medical devices, but there are some consumer products and stuff for other industries too.  I‚Äôm the mechanical engineer, so I do most of the mold and part designs.&lt;/p&gt;

&lt;p&gt;I also am a programmer and a millenial, so I help out with IT issues.  In addition, I‚Äôm in front of a computer most of the day, so I end up handling much of the customer-facing stuff like quotes, orders, quality issues, purchasing, and scheduling/project management.  Lots of scheduling and project management.&lt;/p&gt;

&lt;p&gt;But more on that in a second.&lt;/p&gt;

&lt;p&gt;I like my job!  It‚Äôs pretty flexible and a very relaxed atmosphere.  Loud machines and guys joking and yelling a lot.  People whooping and clapping when somebody else blows up a part or runs their tool into a vise.  It‚Äôs good!&lt;/p&gt;

&lt;p&gt;In the last few months, we‚Äôve gotten &lt;em&gt;super&lt;/em&gt; busy.  I don‚Äôt know what‚Äôs causing it, but our schedule went from a consistent three-weeks-out queue to an eight-week queue in just a couple of months.  But we are managing, and, all things considered, I‚Äôve been doing a pretty decent job at estimating and scheduling the jobs so that we hit most of our due dates and make the customers happy.&lt;/p&gt;

&lt;p&gt;Until.&lt;/p&gt;

&lt;p&gt;On Monday this week, one of our top guys had a family emergency.  Sudden, unavoidable, and catastrophic.  Unfortunately, he‚Äôs a vital and irreplaceable part of our production process, and he needed to be out all this week and half of next week.&lt;/p&gt;

&lt;p&gt;Obviously, family stuff is way more important than work stuff, so I don‚Äôt fault him for leaving as quick as he did or being gone for that long.  You have to do what you have to do.  That being said, there were side-effects.&lt;/p&gt;

&lt;p&gt;Boom goes the schedule.&lt;/p&gt;

&lt;p&gt;Those eight weeks of scheduled jobs that I had in queue?  Every one of them ‚Äì some of which with hard, fixed deadlines ‚Äì had lost a critical week and a half of man-hours required to complete them.&lt;/p&gt;

&lt;p&gt;The phone calls began on Tuesday.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hi!  How are you doing?  I‚Äôm just calling to check on my parts.  I think they were supposed to be done yesterday?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And the fun part?  I didn‚Äôt find out until today (Friday) &lt;em&gt;when&lt;/em&gt; he was going to be coming back.  So I was attempting to shuffle and reschedule around a mystery date.  Guess how many customers like to hear, ‚ÄúI‚Äôm sorry, I‚Äôm not sure when your items will be complete.  Try back later.‚Äù  If you said ‚Äúnone,‚Äù you are right!  Most of them say something like, ‚ÄúWell, you &lt;em&gt;have&lt;/em&gt; to give me &lt;em&gt;some&lt;/em&gt; kind of date.‚Äù&lt;/p&gt;

&lt;p&gt;Boom goes the pressure.  Wham! goes my blood pressure.  KAPLOWEY goes my anxiety.&lt;/p&gt;

&lt;p&gt;Any normal introvert‚Äôs instinct would be to unplug the phone and the router and hope the customers give up and go away.  But I‚Äôve been in situations like this before, and there‚Äôs one thing that I‚Äôve learned.&lt;/p&gt;

&lt;h2 id=&quot;the-lesson&quot;&gt;The Lesson&lt;/h2&gt;

&lt;p&gt;Uncomfortable situations &lt;em&gt;never&lt;/em&gt; go away on their own.  And &lt;em&gt;almost always&lt;/em&gt;, if you ignore them, they just fester and get immeasurably worse.  This has happened to me multiple times.  The first few times, I didn‚Äôt learn.  I just ignored it.  It invariably came back to bite me.  Library fines, spoiled food in the fridge, serious conversations with friends: left unaddressed, all end in misery (and possibly bad smells).&lt;/p&gt;

&lt;p&gt;It‚Äôs always a good idea to confront the unpleasant situation, address it, handle it, and move on.  You‚Äôll feel better.  Everyone else involved will feel better.  You won‚Äôt miss out on any chances that you might have missed by doing nothing.&lt;/p&gt;

&lt;p&gt;I‚Äôve noticed that there always seems to be some sort of unforseen benefit to addressing these issues.  Somebody ends up being unexpectedly thankful for your up-front-ness.  You have extra options to deal with the issue that wouldn‚Äôt be there later.  People are generally more forgiving if they haven‚Äôt been stewing over this issue for a while.  It‚Äôs always something nice.&lt;/p&gt;

&lt;h2 id=&quot;just-handle-it-and-then-reward-yourself-with-beer-or-cake&quot;&gt;Just Handle It (and then reward yourself with beer or cake)&lt;/h2&gt;

&lt;p&gt;So, at the end of the day today, I sat down, and I planned out our work schedule for the next eight weeks, working around the missing guy, doing my best to make every customer as happy as possible, given the situation.  Then, I wrote each and every one of them an email, laying out the situation and our plan to deal with it, and what they could expect.  I grovelled a little bit (not excessively), and told them I would keep them updated as things progressed.&lt;/p&gt;

&lt;p&gt;So far, all of the responses I‚Äôve gotten back have been really nice!  One guy offered to come in and run the machine for us!  &lt;a href=&quot;https://amzn.to/2CFRqlZ&quot;&gt;P.S. You should go buy their cake frosters.  I helped design them, they‚Äôre cool, and they were created by really nice people.&lt;/a&gt; #AfilliateLink #ShamelessPlug #DontCare.  Do me a favor and &lt;em&gt;don‚Äôt&lt;/em&gt; buy the knock-offs from the companies in China.  They‚Äôre stealing sales from this small, family-owned (patent-holding!) business, and it sucks.&lt;/p&gt;

&lt;p&gt;Anyways, all this to say that it usually feels bad to face an uncomfortable situation head-on, but it is almost always better than how it will feel to deal with it after it has festered and boiled over later.&lt;/p&gt;

&lt;p&gt;Let me know if you‚Äôve got a situation like that where you wish you would have handled it earlier rather than avoiding it (if it‚Äôs not too personal).  I want to hear about it!&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Oct 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/10/12/uncomfortable-things/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/10/12/uncomfortable-things/</guid>
        
        <category>soft-skills</category>
        
        <category>reflection</category>
        
        
      </item>
    
      <item>
        <title>File-Specific Vim Configuration</title>
        <description>&lt;p&gt;It seems like an indicator of a powerful application if you can use it for a long time without any problems and then suddenly discover useful features that add to your enjoyment or productivity that you didn‚Äôt even know existed.  This happens to me a lot with the Microsoft Office suite (imagine the look of boyish glee on my face as I discovered conditional formatting in Excel).  This also happens to me in Vim all. the. time.  Granted, this may be more because of a more specialized interface and low discoverability.  But, it‚Äôs still like an Easter egg hunt that you come across that you weren‚Äôt expecting because it‚Äôs the middle of October!&lt;/p&gt;

&lt;p&gt;So here‚Äôs the #spoopy Halloween egg for today: &lt;strong&gt;Language-Specific Vim Configuration&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-tip&quot;&gt;The Tip&lt;/h2&gt;

&lt;p&gt;Have you ever wanted to have some custom functions, settings, or key-bindings, but only for a specific language, without losing the ability to use those keybindings when working on other languages?  Or (like in my case), multiple languages have a ‚Äúbuild‚Äù command, but the command is different for each language, and it would be nice to have &lt;code&gt;&amp;lt;leader&amp;gt;b&lt;/code&gt; do the building for each language so I don‚Äôt have to learn a million different muscle memories.&lt;/p&gt;

&lt;h2 id=&quot;introducing-the-ftplugin-directory&quot;&gt;Introducing the &lt;code&gt;ftplugin&lt;/code&gt; Directory&lt;/h2&gt;

&lt;p&gt;Inside your home directory, there is a &lt;code&gt;.vim&lt;/code&gt; directory.  Inside this &lt;code&gt;.vim&lt;/code&gt; directory, you can put a directory called &lt;code&gt;ftplugin&lt;/code&gt; (short for ‚Äúfile-type plugin‚Äù).  Inside &lt;em&gt;this&lt;/em&gt; directory, you can put &lt;code&gt;&amp;lt;language&amp;gt;.vim&lt;/code&gt; files for each language you‚Äôd like to configure for.  For instance, the plugin for the Rust language  provides the commands &lt;code&gt;:CBuild&lt;/code&gt; and &lt;code&gt;CRun&lt;/code&gt;, but no keymappings.  (I‚Äôm learning Rust, my first compiled language ‚Äì pray for me)  So, I created a &lt;code&gt;~/.vim/ftplugin/rust.vim&lt;/code&gt; file, and right now, all it has are these contents:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-viml&quot;&gt;nnoremap &amp;lt;Leader&amp;gt;b :CBuild&amp;lt;Enter&amp;gt;
nnoremap &amp;lt;Leader&amp;gt;r :CRun&amp;lt;Enter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I‚Äôm sure I‚Äôll add more to it as I come up with more shortcuts and handy little settings, but that‚Äôs all I really wanted right now.&lt;/p&gt;

&lt;h2 id=&quot;clutter-free-configuration&quot;&gt;Clutter-Free Configuration&lt;/h2&gt;

&lt;p&gt;That‚Äôs the whole tip!  I thought it was neat and wanted to share it.  I like that you can separate things out into different files so that you don‚Äôt end up with one long convoluted &lt;code&gt;.vimrc&lt;/code&gt; file.  If you have any cool language-specific customizations or key-mappings that save you time, share them with me!&lt;/p&gt;

&lt;p&gt;Happy configuring!&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Oct 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/10/06/file-specific-vim-config/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/10/06/file-specific-vim-config/</guid>
        
        <category>vim</category>
        
        <category>tools</category>
        
        
      </item>
    
      <item>
        <title>Binary and Hexadecimal: Part 2 - Conversions</title>
        <description>&lt;p&gt;In the last artical, we discovered the sheer joy of counting in &lt;em&gt;two&lt;/em&gt; ‚Äì count ‚Äòem, two! ‚Äì new number systems: Binary and Hexadecimal.&lt;/p&gt;

&lt;p&gt;But just being able to count is only the first step.  To truly unlock the power of these number systems, you‚Äôve got to be able to convert between them.  In the event that you know how to use a search engine, then you already know how to type ‚Äòconvert 11001 to decimal.‚Äô  But, for quick conversions (and for the fun of it), it‚Äôs good to know how it all fits together.&lt;/p&gt;

&lt;h2 id=&quot;a-note-on-notation&quot;&gt;A Note on Notation&lt;/h2&gt;

&lt;p&gt;Sometimes you might see people denote binary numbers starting with &lt;code&gt;0b&lt;/code&gt;, as in &lt;code&gt;0b11011101&lt;/code&gt;.  This is just to clue you in to what kind of number you‚Äôre looking at.  If you‚Äôre looking at a hex number, it might start with &lt;code&gt;0x&lt;/code&gt; as in &lt;code&gt;0xFCDE23&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;binary---decimal&quot;&gt;Binary -&amp;gt; Decimal&lt;/h2&gt;

&lt;p&gt;If you remember, in the last article, we talked about how the digits in binary represent &lt;strong&gt;powers of two&lt;/strong&gt;.  Here‚Äôs a nice table to remind you:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Digit (Power of 2)&lt;/th&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;0&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Decimal Value&lt;/td&gt;
      &lt;td&gt;128&lt;/td&gt;
      &lt;td&gt;64&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;So, when you come across a binary number, all you have to do is figure out the decimal value of each digit and add up the total!  Let‚Äôs say you were converting the binary number &lt;code&gt;1101 0011&lt;/code&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Binary Digit&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;TOTAL&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Decimal Value&lt;/td&gt;
      &lt;td&gt;128&lt;/td&gt;
      &lt;td&gt;64&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;211&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;That‚Äôs right!  &lt;code&gt;1101 0011&lt;/code&gt; in binary is equal to &lt;code&gt;211&lt;/code&gt; in decimal.  If you get confused about the value of a particular digit, one way to figure it out is to lay out a list of numbers on a piece of paper, starting from the right and going left.  Start with 1, and double each next digit.  One doubled is two, two doubled is four, four doubled is 8, etc.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;128 &amp;lt;- 64 &amp;lt;- 32 &amp;lt;- 16 &amp;lt;- 8 &amp;lt;- 4 &amp;lt;- 2 &amp;lt;- 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then take a look at the binary number you have.  Anywhere there‚Äôs a zero, cross that number out!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;128 &amp;lt;- 64 &amp;lt;- XX &amp;lt;- 16 &amp;lt;- XX &amp;lt;- XX &amp;lt;- 2 &amp;lt;- 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can add up whatever‚Äôs left.&lt;/p&gt;

&lt;h2 id=&quot;decimal-to-binary&quot;&gt;Decimal to Binary&lt;/h2&gt;

&lt;p&gt;To go from decimal to binary is a little harder to do.  There are a couple of different ways to do it.  I‚Äôll give you both ways, and you can decide if there‚Äôs one that you like better.&lt;/p&gt;

&lt;h3 id=&quot;the-subtraction-method&quot;&gt;The Subtraction Method&lt;/h3&gt;

&lt;p&gt;I personally like this method better.  It fits better with my brain.  This version works well if you can remember the powers of two pretty well.  Keep in mind that we‚Äôll be filling in the binary digits from left (biggest) to right (smallest).  I‚Äôll give you a step-by-step guide, and pair it with an example.  It works like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start with the number you want to convert.  We‚Äôll use the same 211 that we used in the last section so we can check our work.&lt;/li&gt;
  &lt;li&gt;Find the &lt;strong&gt;biggest&lt;/strong&gt; power of two that is &lt;strong&gt;less than&lt;/strong&gt; the number to convert.  In this case, 256 (2^8) is too big.  128 (2^7), though, is less than 211, so that‚Äôs just right.&lt;/li&gt;
  &lt;li&gt;Mark a 1 on the piece of paper (or screen) for that power of two.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Subtract&lt;/strong&gt; that power of two (128) from your main number.  In this case the result is 211 - 128 = 83.&lt;/li&gt;
  &lt;li&gt;Step down by one power of two.  2^6 is 64.  If 64 &lt;strong&gt;is less than&lt;/strong&gt; the current value (it is), mark a 1 for that power of two and subtract again.  For the example, we‚Äôll mark 1 and get 83 - 64 =  19.&lt;/li&gt;
  &lt;li&gt;Carry on down the powers of two.  For any powers, if the power is &lt;strong&gt;greater than&lt;/strong&gt; your current number (so that you can‚Äôt subtract and get a positive result), mark a zero for that power and don‚Äôt subtract anything.  Move on to the next power of two.  In our example, 32 is the next power of two, and it‚Äôs bigger than 19.  So, mark a zero and move on.&lt;/li&gt;
  &lt;li&gt;The next power of two is 16, which is smaller than 19.  So mark a 1 and do 19 - 16 = 3.&lt;/li&gt;
  &lt;li&gt;Next is 8.  8 is bigger than 3, so mark a zero and don‚Äôt subtract.&lt;/li&gt;
  &lt;li&gt;Next is 4.  4 is bigger than 3, so mark a zero and don‚Äôt subtract.&lt;/li&gt;
  &lt;li&gt;Next is 2.  2 is less than 3, so mark a 1 and subtract: 3 - 2 = 1.&lt;/li&gt;
  &lt;li&gt;Next is 1.  1 is equal to 1, so mark a 1 and subtract: 1 - 1 = 0.&lt;/li&gt;
  &lt;li&gt;Once you get to zero, stop!  You‚Äôre done.  Take a look at your marks.  You should have:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;1 1 0 1 0 0 1 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Does this match what we had in the section above?  Yes!  Success!&lt;/p&gt;

&lt;p&gt;If this way doesn‚Äôt seem like it makes much sense, that‚Äôs totally fine.  There‚Äôs one more way that doesn‚Äôt require you to remember the powers of 2.&lt;/p&gt;

&lt;h3 id=&quot;the-other-way-division&quot;&gt;The Other Way: Division&lt;/h3&gt;

&lt;p&gt;For this method, we‚Äôre filling in binary digits from &lt;strong&gt;right (smallest) to left (biggest)&lt;/strong&gt;.  We‚Äôll use 211 again.  For each of these calculations, we‚Äôll be dividing by 2 (floor division with a remainder).  Be sure to keep track of the result value &lt;em&gt;and&lt;/em&gt; the remainder for each one.  The remainder represents the binary digit, and the result value is what we‚Äôll use for the next round of calculations.  Here we go:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start with your number.  Divide by 2.  Is there a remainder of 1?  If so, mark 1.  Otherwise, mark 0.  In our case, 211 / 2 = 105, remainder 1.  So, we remember 105, and we mark a 1.&lt;/li&gt;
  &lt;li&gt;Repeat.  105 / 2 = 52, remainder 1.  Remember 52, mark a 1.&lt;/li&gt;
  &lt;li&gt;52 / 2 = 26, remainder 0.  Remember 26, mark a 0.&lt;/li&gt;
  &lt;li&gt;26 / 2 = 13, remainder 0.  Remember 13, mark a 0.&lt;/li&gt;
  &lt;li&gt;13 / 2 = 6, remainder 1.  Remember 6, mark a 1.&lt;/li&gt;
  &lt;li&gt;6 / 2 = 3, remainder 0.  Remember 3, mark a 0.&lt;/li&gt;
  &lt;li&gt;3 / 2 = 1, remainder 1.  Remember 1, mark a 1.&lt;/li&gt;
  &lt;li&gt;1 / 2 = 0, remainder 1.  Mark a 1, and we‚Äôre done!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All together (again, from &lt;strong&gt;right to left this time&lt;/strong&gt;), our binary digits are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1 1 0 1 0 0 1 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And again we have &lt;strong&gt;SWEET SWEET VICTORY!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;hexadecimal-to-decimal&quot;&gt;Hexadecimal to Decimal&lt;/h2&gt;

&lt;p&gt;The really cool thing about this is that you &lt;em&gt;already know how to do this one&lt;/em&gt; ‚Äì you just don‚Äôt know it yet.  It‚Äôs the same as the binary-to-decimal conversion.  Each place has a value, and you add up all the digits!  This time, though, each place is a power of 16.  Honestly, for hexadecimal values longer than two digits, I always use a calculator or some other tool.  I only remember the first three powers of 2: 16^0 = 1, 16^1 = 16, and 16^2 = 256.  &lt;em&gt;256, you say!  That&lt;/em&gt; is &lt;em&gt;an easy number to remember.  I‚Äôll remember that for all time!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs do a short example and then a long one.  First, let‚Äôs try converting &lt;code&gt;6C&lt;/code&gt; to decimal.  We have 6 in the ‚Äú16‚Äôs‚Äù place and &lt;code&gt;C&lt;/code&gt; (or 12) in the ‚Äú1‚Äôs‚Äù place.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Hex Digit&lt;/th&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;TOTAL&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Decimal Value&lt;/td&gt;
      &lt;td&gt;6 * 16^1 = 96&lt;/td&gt;
      &lt;td&gt;12 * 16^0 = 12&lt;/td&gt;
      &lt;td&gt;108&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;That‚Äôs right!  &lt;code&gt;6C&lt;/code&gt; in binary is equal to 108.&lt;/p&gt;

&lt;p&gt;You‚Äôll notice that two hex digits can include all of the values between 0 and 255.  For those paying attention, you might recognize that 0 - 255 are also the values that can be shown in 8 binary digits ‚Äì or one byte!  This is useful because things like CSS commonly use hex digits when referring to values in that range.  And now you have the power to convert &lt;code&gt;#BADA55&lt;/code&gt; as a hex color into RGB values:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;R: BA = &lt;code&gt;11*16 + 10*1&lt;/code&gt; = 186&lt;/li&gt;
  &lt;li&gt;G: DA = &lt;code&gt;13*16 + 10*1&lt;/code&gt; = 218&lt;/li&gt;
  &lt;li&gt;B: 55 = &lt;code&gt;5*16 + 5&lt;/code&gt; = 85&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So we know that &lt;code&gt;#BADA55&lt;/code&gt; is a color with quite a bit of green, medium-high amounts of red, and not a whole lot of blue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bada55.jpeg&quot; alt=&quot;The #BADA55 color&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VINDICATION!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;decimal-to-hexadecial&quot;&gt;Decimal to Hexadecial&lt;/h2&gt;

&lt;p&gt;Similarly, the process for converting decimal numbers to hexadecimal is the same as converting binary to decimal.  Either of the binary methods can be used (subtraction or division).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Once we go over how to convert binary to hex and back, you might decide it‚Äôs easier to convert hex to binary first and then convert binary to decimal.  However you want to do it!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We‚Äôll do a division example just to confirm.  Let‚Äôs convert 108 to hexadecimal to check our answer.  Remember again that, since we‚Äôre doing the division method, we‚Äôll have to write down the hex digits from &lt;strong&gt;right to left&lt;/strong&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start with 108.  Divide by 16.  108 / 16 = 6, remainder 12.  The right-most digit is 12, or &lt;code&gt;C&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;6 / 16 = 0, remainder 6.  The next digit is 6.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Altogether, 108 in hex is &lt;code&gt;6C&lt;/code&gt;!  Success again!&lt;/p&gt;

&lt;h2 id=&quot;hexadecimal-to-binary&quot;&gt;Hexadecimal to Binary&lt;/h2&gt;

&lt;p&gt;The nice thing about hexadecimal and binary is that 16 is a multiple of 2.  In fact, 16 = 2^4.  When converting hex to binary, you can essentially interchange each hex digit for 4 digits of binary and vice versa.  &lt;em&gt;How&lt;/em&gt; you convert that single digit of hex to 4 digits of binary is kind of up to you.  When I do it, it comes down to a combination of a little memorization and converting through to decimal.&lt;/p&gt;

&lt;p&gt;Let‚Äôs take a look.  Let‚Äôs convert &lt;code&gt;DB&lt;/code&gt; from hex to binary.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;D&lt;/code&gt; in hex is 13 in decimal.&lt;/li&gt;
  &lt;li&gt;Next we figure out which 4 binary digits we need to make 13.  13 is 8 + 4 + 1.  Those places in binary are: &lt;code&gt;1101&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Thus, the binary conversion for the first digit, &lt;code&gt;D&lt;/code&gt;, is &lt;code&gt;1101&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Next digit is &lt;code&gt;B&lt;/code&gt;.  Same process.  &lt;code&gt;B&lt;/code&gt; is 11 in decimal.&lt;/li&gt;
  &lt;li&gt;Making 11 in binary: 8 + 2 + 1, or &lt;code&gt;1011&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Thus, B = &lt;code&gt;1011&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Soooo, combining everything, &lt;code&gt;DB&lt;/code&gt; in hex is the same as &lt;code&gt;1101 1011&lt;/code&gt;.  Did I plan for the binary number to be so symmetric?  No.  Will I claim credit for it?  Absolutely.&lt;/p&gt;

&lt;h2 id=&quot;binary-to-hexadecimal&quot;&gt;Binary to Hexadecimal&lt;/h2&gt;

&lt;p&gt;Going the other way is exactly the opposite process.  Once again, we‚Äôll be converting &lt;code&gt;1101 1011&lt;/code&gt; from binary to hex to check our work.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Let‚Äôs break our binary number into chunks of 4 (like I‚Äôve been doing): &lt;code&gt;1101   |    1011&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;And now we convert the first chunk to decimal: &lt;code&gt;1101 = 8*1 + 4*1 + 2*0 + 1*1 = 13&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;13 in decimal converts to &lt;code&gt;D&lt;/code&gt; in hex.  Our first digit is &lt;code&gt;D&lt;/code&gt;!  (As expected.)&lt;/li&gt;
  &lt;li&gt;The next chunk of binary: &lt;code&gt;1011 = 8*1 + 4*0 + 2*1 + 1*1&lt;/code&gt; = 11.&lt;/li&gt;
  &lt;li&gt;11 in decimal converts to &lt;code&gt;B&lt;/code&gt; in hex.  Our second digit is &lt;code&gt;B&lt;/code&gt;!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the end, our final hex number ends up being &lt;code&gt;DB&lt;/code&gt;.  Just like we thought.&lt;/p&gt;

&lt;h2 id=&quot;the-true-power-of-powers&quot;&gt;The True Power‚Ä¶ of Powers&lt;/h2&gt;

&lt;p&gt;And that‚Äôs it!  Go forth and conquer numbers everywhere.  Amaze your friends by speaking to them in binary (or, possibly, get mocked for being a GIANT NERD üòÅ), streamline your CSS coding by eyeballing hex codes, and feel great about understanding how computers and math work just a little better.  A lot of these conversion skills will carry over to other number systems: try looking up Octal and doing some conversions to and from that!&lt;/p&gt;

&lt;p&gt;As always, the math can be a bit intimidating, so if you have any questions or don‚Äôt feel 100% confident in your number-fu, feel free to reach out to me and I‚Äôd be happy to show some more examples and help you get up to speed.&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Sep 2018 11:22:19 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/09/16/binary-and-hexadecimal-part-2-conversions/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/09/16/binary-and-hexadecimal-part-2-conversions/</guid>
        
        <category>computer-science</category>
        
        <category>basics</category>
        
        <category>beginner</category>
        
        
      </item>
    
      <item>
        <title>Binary and Hexadecimal: Part 1</title>
        <description>&lt;p&gt;There are two reasons why I‚Äôve seen people avoid learning how binary and hexadecimal number systems work: either they‚Äôre intimidated because they don‚Äôt consider themselves ‚Äúmath people,‚Äù or they think it‚Äôs a waste because ‚Äúwhy am I ever going to need this?‚Äù  I really think there are some neat uses to these alternative numbering systems‚Ä¶ and they‚Äôre fun!&lt;/p&gt;

&lt;p&gt;I‚Äôm definitely going to try to make them as accessible as I can in this post and take all of the intimidation out of them.  You don‚Äôt need to be a ‚Äúmath person.‚Äù  As long as you‚Äôre a ‚Äúperson who can count on their fingers,‚Äù you‚Äôll be OK.  If you don‚Äôt have fingers, find a friend and use their fingers.  If you don‚Äôt have fingers and don‚Äôt have a friend, then today is your lucky day!  Now you‚Äôve got three friends: Binary, Hexadecimal, and me!  And you can count them on &lt;em&gt;my&lt;/em&gt; fingers if you want.&lt;/p&gt;

&lt;h2 id=&quot;starting-from-the-beginning-decimal&quot;&gt;Starting from the Beginning: Decimal&lt;/h2&gt;

&lt;p&gt;Let‚Äôs go back to elementary school for a second.  How does counting work?  Well, we have ten shapes we can use to represent values: numbers!&lt;/p&gt;

&lt;p&gt;0	1	2	3	4	5	6	7	8	9&lt;/p&gt;

&lt;p&gt;Zero through nine is ten digits.  These are the &lt;em&gt;only&lt;/em&gt; digits we count with ‚Äì at least if we‚Äôre using &lt;a href=&quot;https://en.wikipedia.org/wiki/Arabic_numerals&quot;&gt;Arabic Numerals&lt;/a&gt;.  If you‚Äôre not using Arabic Numerals but still using the decimal system, you‚Äôll still have ten digits available to you.  They might just look a little different.&lt;/p&gt;

&lt;p&gt;So how do we count?  We start with the first digit available to us: 0.  Let‚Äôs count our first time, adding one to our total.  We still have 8 numerals we haven‚Äôt seen yet, so we move to the next one: 1.  Then 2.  Then 3.  And so on, until we get to 9.&lt;/p&gt;

&lt;p&gt;At that point, we‚Äôve hit a snag.  We‚Äôve run out of numerals!  So, what do we do?  We tally that round of counting 10 times by &lt;strong&gt;incrementing a new digit by one&lt;/strong&gt; and &lt;strong&gt;resetting that digit to 0.&lt;/strong&gt;  Now we‚Äôre at 10.  And we can start again, stepping through the numerals available to us: 11, 12, 13, 14, 15, 16, 17, 18, 19‚Ä¶ Uh oh.  We‚Äôve completed another round through all of the numerals.  So again, we increment our tally and increment the &lt;em&gt;second digit&lt;/em&gt;, the one on the left, to mark that fact.  And we reset our right-most digit to zero.&lt;/p&gt;

&lt;p&gt;What happens when our &lt;em&gt;second digit&lt;/em&gt; runs through all of the available numerals: 97, 98, 99‚Ä¶ we‚Äôre getting ready to increment the right-most digit, which means we should be resetting it to zero and incrementing the second digit, but we‚Äôre out of numerals to use in the second spot.  No problem here either, we‚Äôll just add another digit to celebrate that fact!  Now we have a 1 &lt;em&gt;in the third digit location&lt;/em&gt;: 100.  And so it goes.  Congratulations, you still know how to count.&lt;/p&gt;

&lt;p&gt;But, do you see the idea?  We have 10 different numerals the show, and as each digit exhausts the numerals available to it, it increments the digit to the left of it and resets.  That‚Äôs how the rest of the number systems work ‚Äì they just have different amounts of numerals!  With 10 digits, we‚Äôre using something called the &lt;strong&gt;‚ÄúDecimal‚Äù&lt;/strong&gt; (deci- means 10) system.&lt;/p&gt;

&lt;h2 id=&quot;so-what-is-binary-then&quot;&gt;So What is Binary Then?&lt;/h2&gt;

&lt;p&gt;Well, you &lt;em&gt;might&lt;/em&gt; guess from the name ‚ÄúBI-nary‚Äù (bi- meaning two) that there are two available numerals.  And you‚Äôre right!  You may have even heard before what the two numerals are.  0 and 1.  That‚Äôs right!  As you can imagine, with significantly fewer numerals, we‚Äôre going to rack up digits pretty quickly.  Let‚Äôs try counting in binary now.  I think you‚Äôre ready.&lt;/p&gt;

&lt;p&gt;Don‚Äôt forget that the same basic rules of counting apply.  We‚Äôll start with zero.&lt;/p&gt;

&lt;p&gt;0&lt;/p&gt;

&lt;p&gt;And then we‚Äôll increment to the next available numeral.&lt;/p&gt;

&lt;p&gt;1&lt;/p&gt;

&lt;p&gt;And then we‚Äôll increment to the next available numeral again‚Äì wait.  We‚Äôre already out of numerals!  What gives!?  That‚Äôs OK, we follow our counting rules and increment the next digit and reset our current digit.&lt;/p&gt;

&lt;p&gt;10&lt;/p&gt;

&lt;p&gt;And then we start again.&lt;/p&gt;

&lt;p&gt;11&lt;/p&gt;

&lt;p&gt;Oop!  Now we go to increment our right-most digit, but we‚Äôre out of numerals.  So we go to increment our &lt;em&gt;second&lt;/em&gt; right-most digit, but we‚Äôre out of numerals there too!  So we continue on to add a new digit and reset our other digits.&lt;/p&gt;

&lt;p&gt;100&lt;/p&gt;

&lt;p&gt;101&lt;/p&gt;

&lt;p&gt;110&lt;/p&gt;

&lt;p&gt;111&lt;/p&gt;

&lt;p&gt;Can you guess what happens next?&lt;/p&gt;

&lt;p&gt;1000!&lt;/p&gt;

&lt;p&gt;Now, have you been keeping track of our count?  How many times have we incremented?  I‚Äôm going to make a table, and, to make the ones and zeroes easier to see, I‚Äôm going to add some zeroes out in front of the number as placeholders.  It‚Äôs OK, though.  They don‚Äôt change anything.  The number 000000048 is still 48, right?&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Decimal Number&lt;/th&gt;
      &lt;th&gt;Increment Number&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0001&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0010&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0011&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0100&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0101&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0110&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0111&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1000&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/mechanical_gifs/comments/9cto4l/how_simple_pieces_of_wood_and_hinges_makes_a/&quot;&gt;This is a neat demonstration.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How does that feel?  You‚Äôre counting in binary!  You‚Äôre practically a computer!  Quietly, to yourself, say ‚Äúbleep bloop.‚Äù  No one will know.  But we will know.  And it‚Äôll make you feel accomplished.  :)&lt;/p&gt;

&lt;p&gt;Now, there‚Äôs one more pattern that you may not have noticed, that makes binary even more magical.  Check out the values of the increment number when there is only &lt;em&gt;one 1&lt;/em&gt; and everything else is zero:&lt;/p&gt;

&lt;p&gt;1, 2, 4, and 8.&lt;/p&gt;

&lt;p&gt;Do you see a pattern?  Let me show you some other binary numbers and their decimal equivalents.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Binary&lt;/th&gt;
      &lt;th&gt;Decimal&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0000 0001&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0000 0010&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0000 0100&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0000 1000&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0001 0000&lt;/td&gt;
      &lt;td&gt;16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0010 0000&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0100 0000&lt;/td&gt;
      &lt;td&gt;64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1000 0000&lt;/td&gt;
      &lt;td&gt;128&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Don‚Äôt worry about the space in between the binary digits.  I added it in there to make things easier to read.  Otherwise, if you read binary too long, your eyeballs start to fall out.  The important thing is the &lt;em&gt;pattern&lt;/em&gt;.  Do you see it?  Every binary number that‚Äôs just one 1 and the rest 0‚Äôs is a power of 2.  Or, put another way, the decimal numbers are doubling each time!  That‚Äôs right, everytime you go up a digit (i.e. shifting things left one place) in binary, you double!&lt;/p&gt;

&lt;p&gt;But, when you think about it, it makes sense right?  Let‚Äôs look at the decimal numbers that are one 1 followed by zeroes.&lt;/p&gt;

&lt;p&gt;1
10
100
1000
10000&lt;/p&gt;

&lt;p&gt;Each one is the previous one, multiplied by 10, in the &lt;strong&gt;deci-&lt;/strong&gt; mal system.  In the &lt;strong&gt;bi-&lt;/strong&gt; nary system, every one is the previous one multipled by 2.  Do you see?  Don‚Äôt worry if not.  We‚Äôll do more with that later, and we‚Äôll get more practice.&lt;/p&gt;

&lt;h2 id=&quot;hexadecimal-too&quot;&gt;Hexadecimal Too?&lt;/h2&gt;

&lt;p&gt;Don‚Äôt worry.  Now that you‚Äôve got binary nailed down, &lt;strong&gt;hexa-&lt;/strong&gt; (meaning 6) &lt;strong&gt;-deci-&lt;/strong&gt; (meaning 10) &lt;strong&gt;mal&lt;/strong&gt; should be a snap.  Hexadecimal has a &lt;strong&gt;base&lt;/strong&gt; of 16.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Wait, wait, wait.  There‚Äôs only 10 numerals.  How are we going to show 16 different ‚Äúshapes?‚Äù  Are we just going to make up new numbers?  I thought you said there wasn‚Äôt going to be hard math!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Don‚Äôt worry.  We‚Äôre not making up any new shapes, and chances are, you‚Äôve probably seen hexadecimal out in the wild somewhere.  You‚Äôre right about one thing, though: we need more ‚Äúnumerals‚Äù to get our 16 ‚Äúshapes.‚Äù  But, luckily you know these shapes: letters!  That‚Äôs right, the numerals in hexadecimal are:&lt;/p&gt;

&lt;p&gt;0 1 2 3 4 5 6 7 8 9 A B C D E F&lt;/p&gt;

&lt;p&gt;(I‚Äôll pause while the skeptical among you take the time to count.  There‚Äôs 16.  I‚Äôll wait.)&lt;/p&gt;

&lt;p&gt;Satisfied?  Good.  Now let‚Äôs start counting.&lt;/p&gt;

&lt;p&gt;0
1
2
3
4
5
6
7
8
9&lt;/p&gt;

&lt;p&gt;What do we do?  Well, we‚Äôve got more ‚Äúnumerals,‚Äù right?  We keep going!&lt;/p&gt;

&lt;p&gt;A
B
C
D
E
F&lt;/p&gt;

&lt;p&gt;Aaaaand now we‚Äôre out of numerals.  Increment the next digit and reset!&lt;/p&gt;

&lt;p&gt;10
11
12
13&lt;/p&gt;

&lt;p&gt;And so on.  And when that second digit gets up there after much more counting?&lt;/p&gt;

&lt;p&gt;F8
F9
FA
FB
FC
FD
FE
FF‚Ä¶
‚Ä¶
100!&lt;/p&gt;

&lt;h2 id=&quot;intermission&quot;&gt;Intermission&lt;/h2&gt;

&lt;p&gt;See?  Hopefully that wasn‚Äôt so terrible.  And you counted in both binary and hexadecimal!  Congratulations!  I now confer upon you the title of budding computer scientist.  We can‚Äôt really do much useful with this new knowledge yet, though.  In the next post, I‚Äôll show you how to convert back and forth, and what cool things that enables us to do.&lt;/p&gt;

&lt;p&gt;This can be a tough topic, and I don‚Äôt want it to be intimidating or scary at all.  If I missed something or it‚Äôs not quite clicking, my DM‚Äôs are open!  Shoot me a message and we‚Äôll talk about what‚Äôs bugging you.&lt;/p&gt;

&lt;p&gt;Happy counting!&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Sep 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/09/10/binary-hexadecimal-part-1/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/09/10/binary-hexadecimal-part-1/</guid>
        
        <category>computer-science</category>
        
        <category>basics</category>
        
        <category>beginner</category>
        
        
      </item>
    
      <item>
        <title>Personal Update: Back At It</title>
        <description>&lt;p&gt;&lt;em&gt;Cover image by Feliphe Schiarolli on Unsplash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hi!  I haven‚Äôt written a blog post in a while.  In fact, I‚Äôm way behind my pace for the last two months.  I wanted to bang at least 200 words out to keep my writing muscle in shape and get things going again.  I‚Äôve got a couple of posts planned, but I‚Äôm sure more inspiration will come.&lt;/p&gt;

&lt;h2 id=&quot;back-to-school&quot;&gt;Back to School!&lt;/h2&gt;

&lt;p&gt;On a personal note, part of why I‚Äôve been busy &lt;em&gt;not&lt;/em&gt; writing blog posts is because last week I had my first lecture of my Master‚Äôs in Computer Science (focus on Intelligent Systems, Robotics, Systems Administration, and a bit of Security/Forensics)!  I‚Äôm super excited, because, honestly, I really like school.  I‚Äôm going to take a bunch of classes over the next two years, learn a lot, get a whole bunch of fodder for more blog posts, graduate (God willing!), and once I get my Master‚Äôs, hopefully somebody somewhere will let me teach classes on something.  That‚Äôs about as far as I got on the plan.  Anyways, wish me luck, and enjoy the deluge of CS-powered blog posts that are coming your way.&lt;/p&gt;

&lt;h2 id=&quot;punch-cards&quot;&gt;Punch Cards&lt;/h2&gt;

&lt;p&gt;Last week, I didn‚Äôt have much time to write a post because I was writing a research paper on the early punch cards used to program computers.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It was pretty punchy, but it had a few holes in it. HA!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As it turns out, the reason why you probably limit your code lines to 80 characters wide is because of how long U.S. money was in the 1880‚Äôs.  A guy named &lt;a href=&quot;https://en.wikipedia.org/wiki/Herman_Hollerith&quot;&gt;Herman Hollerith&lt;/a&gt; created punch cards for the U.S. Census Bureau to help speed up processing the census data, and he had a bunch of U.S. Treasury money boxes laying around, so he cut his punch cards to fit in those boxes.  With the spacing of the holes on the card, it left him with 80 columns.  Today, 80 columns is the preferred max line length of the Linux kernel.  Python says try to keep most lines under 72 (to have a nice margin), but definitely limit to 79 columns.  Does every team work like this?  No.  But it‚Äôs neat that we work on a standard that programmers have been adhering to one way or another since 1880.  Feels pretty cool, right?&lt;/p&gt;

&lt;p&gt;This week we learned about Binary and Hexadecimal.  I knew about it already thanks to &lt;a href=&quot;https://dev.to/vaidehijoshi/hexes-and-other-magical-numbers&quot;&gt;Vaidehi Joshi‚Äôs awesome series&lt;/a&gt;.  I get the feeling I‚Äôll be referring to that series more and more as I go through more classes.  But, expect a post from me on Binary, Hex, and Decimal numbers in the next little while.&lt;/p&gt;

&lt;p&gt;More posts soon!&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Sep 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/09/06/back-at-it/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/09/06/back-at-it/</guid>
        
        <category>update</category>
        
        
      </item>
    
      <item>
        <title>3 Common Mistakes that Python Newbies Make</title>
        <description>&lt;p&gt;Last weekend, I stared mentoring people on &lt;a href=&quot;https://exercism.io&quot;&gt;exercism.io&lt;/a&gt; on the Python track.  I wasn‚Äôt sure what to expect, but over the last week I have mentored about 50 people, helping them get their solutions from ‚Äútests passing‚Äù to ‚Äútests passing, readable, &lt;em&gt;and&lt;/em&gt; Pythonic.‚Äù  I‚Äôm hooked.  It‚Äôs a total blast.  I‚Äôm going to write a post specifically on that experience.  That‚Äôs not this post.  This post is to talk about the three most common mistakes I saw over the last week and some possible alternatives that might be better!  So let‚Äôs start the countdown!&lt;/p&gt;

&lt;h2 id=&quot;1-deep-nesting-of-if-statements-or-loops&quot;&gt;1. Deep Nesting of If Statements or Loops&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Calculating whether or not 'year' is a leap year

if year % 4 == 0:
    if year % 100 == 0:
        if year % 400 == 0:
            return True
        else:
            return False
    else:
        return True
else:
    return False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A lot of times, I‚Äôll pull a line from the &lt;a href=&quot;https://www.python.org/dev/peps/pep-0020/#id3&quot;&gt;Zen of Python&lt;/a&gt; to lead off my feedback to a ‚Äúmentee‚Äù (not to be confused with a manitee).  When I see this issue, I always lead with&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Flat is better than nested.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you look at your code with your eyes unfocused, looking at the shapes and not reading the words, and you see a bunch of arrows going out and back in again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\
 \
  \
   \
    \
    /
   /
  /
  \
   \
    \
     \
     /
    /
   /
  /
 /
/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It‚Äôs not &lt;em&gt;definitely&lt;/em&gt; a bad thing, but it is a ‚Äúcode smell,‚Äù or a Spidey Sense that something could possibly be refactored.&lt;/p&gt;

&lt;p&gt;So, what can you do instead of nest?  There are a couple things to try.  The first is inverting your logic and using ‚Äúearly returns‚Äù to peel off small pieces of the solution space one at a time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if year % 400 == 0:
    return True
if year % 100 == 0:
    return False
if year % 4 == 0:
    return True
return False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the number is divisible by 400, then we immediately return true.  Otherwise, for the rest of our code, we can know that year is &lt;em&gt;definitely not&lt;/em&gt; divisible by 400.  So, at that point, any other year that‚Äôs divisible by 100 is not a leap year.  So we peel off that layer of the onion by returning False.&lt;/p&gt;

&lt;p&gt;After that, we can know that &lt;code&gt;year&lt;/code&gt; is definitely not a multiple of 400 &lt;em&gt;or&lt;/em&gt; 100, and the remainder of the code follows the same pattern.&lt;/p&gt;

&lt;p&gt;The other way to avoid nesting is by using ‚Äúboolean operators:‚Äù &lt;code&gt;and, or, and not&lt;/code&gt;.  We can combine &lt;code&gt;if&lt;/code&gt; statements and thus, save ourselves a layer of nesting!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
    return True
else:
    return False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, that leads us to our second item‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;2-returning-booleans-from-if-statements&quot;&gt;2. Returning Booleans from If Statements&lt;/h2&gt;

&lt;p&gt;We‚Äôll start with our last example from above:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
    return True
else:
    return False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Anytime you find yourself writing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if something:
    return True
else:
    return False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should remember that the clause of an &lt;code&gt;if&lt;/code&gt; statement is itself a boolean!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; year = 2000
&amp;gt;&amp;gt;&amp;gt; year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)
True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, why not type a little less and return the result of the boolean operation directly?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;return (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Granted, at this point, the line may be getting a little long, but the code is a little less redundant now!&lt;/p&gt;

&lt;h2 id=&quot;3-lists-are-like-hammers--not-everything-is-a-nail&quot;&gt;3. Lists are Like Hammers ‚Äì Not Everything is a Nail&lt;/h2&gt;

&lt;p&gt;Here are two possible ways that this could show up:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;some_numbers = [1, 2, 5, 7, 8, ...]
other_numbers = [1, 3, 6, 7, 9, ...]
# Let's try to combine these two without duplicates
for number in other_numbers:
    if number not in some_numbers:
        some_numbers.append(number)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;data = [[&quot;apple&quot;, 4], [&quot;banana&quot;, 2], [&quot;grape&quot;, 14]]
# What fruits do we have?
for item in data:
    print(item[0])
# =&amp;gt; &quot;apple&quot; &quot;banana&quot; &quot;grape&quot;
# How many grapes do we have?
for item in data:
    if item[0] == &quot;grape&quot;:
        print(item[1])
# =&amp;gt; 14
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the first case, you‚Äôre trying to keep track of some groups of items and you want to combine them without duplicates.  This is an &lt;em&gt;ideal&lt;/em&gt; candidate for a &lt;a href=&quot;https://www.geeksforgeeks.org/sets-in-python/&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt;.  Sets inherently keep track of their items (although not the order, so don‚Äôt use a set if the order is important).  You can declare them with the built-in &lt;code&gt;set()&lt;/code&gt; function or with squiggle braces (&lt;code&gt;{}&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;some_numbers = {1, 2, 5, 7, 8}
other_numbers = {1, 3, 6, 7, 9}
# Sets use the 'binary or' operator to do &quot;unions&quot;
# which is where they take all of the unique elements
some_numbers | other_numbers
# =&amp;gt; {1, 2, 3, 5, 6, 7, 8, 9}

# You can even add single items in!
some_numbers.add(10)
# =&amp;gt; {1, 2, 5, 7, 8, 10}

# But adding a duplicate doesn't change anything
some_numbers.add(1)
# =&amp;gt; {1, 2, 5, 7, 8, 10}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the second case, again, order probably isn‚Äôt critical.  You want to keep track of some data by a ‚Äúlabel‚Äù or something, but be able to keep them all together and list them out as necessary.  This time, you‚Äôre probably looking for a &lt;code&gt;dict&lt;/code&gt;.  You can create those with either the &lt;code&gt;dict()&lt;/code&gt; built-in function or, again, squiggle braces (&lt;code&gt;{}&lt;/code&gt;).  This time, however, you separate the labels (keys) and the values with a colon.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;fruits = {
    &quot;apples&quot;: 4,
    &quot;bananas&quot;: 2,
    &quot;grapes&quot;: 14,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can list out all of the keys (or values!).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;list(fruits.keys())
# =&amp;gt; [&quot;apples&quot;, &quot;bananas&quot;, &quot;grapes&quot;]
list(fruits.values())
# =&amp;gt; [4, 2, 14]

# Or both!
list(fruits.items())
# =&amp;gt; [(&quot;apples&quot;, 4), (&quot;bananas&quot;, 2), (&quot;grapes&quot;, 14)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you can ask it about (or give it a new value for) specific keys.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# How many grapes are there?
fruits[&quot;grapes&quot;]
# =&amp;gt; 14

# Not anymore.  I ate some.
fruits[&quot;grapes&quot;] = 0

fruits[&quot;grapes&quot;]
# =&amp;gt; 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using a list, the your algorithm loops through every item to find the right one.  &lt;code&gt;dict&lt;/code&gt;‚Äôs are built to have very fast lookups, so, even if your &lt;code&gt;dict&lt;/code&gt; is a bazillion fruits long, finding the &lt;code&gt;grapes&lt;/code&gt; is still super fast ‚Äì and easy to type!  No loops!&lt;/p&gt;

&lt;h2 id=&quot;call-to-action&quot;&gt;Call to Action&lt;/h2&gt;

&lt;p&gt;Exercism needs mentors!  If you think you‚Äôd be a good mentor (or even a decent mentor, just on the easy exercises), sign up at &lt;a href=&quot;http://mentoring.exercism.io/&quot;&gt;their Mentor Signup page&lt;/a&gt;.  Right now, Rust, Golang, and Elixir are especially swamped and need &lt;em&gt;your&lt;/em&gt; help!&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Aug 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/08/04/3-python-newbie-mistakes/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/08/04/3-python-newbie-mistakes/</guid>
        
        <category>python</category>
        
        <category>beginner</category>
        
        
      </item>
    
      <item>
        <title>Python Shebangs on Windows</title>
        <description>&lt;p&gt;&lt;em&gt;Cover image By Sven [Public domain], from Wikimedia Commons&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;shebang-lines-in-the-wild&quot;&gt;Shebang Lines in the Wild&lt;/h2&gt;

&lt;p&gt;In Unix-like systems, if you want a file to be executable, you can add a line to the top called a &lt;strong&gt;‚Äúshebang‚Äù&lt;/strong&gt;.  They look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;#!/usr/bin/env bash

echo &quot;Hello, world!&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;‚ÄúShebang‚Äù is short for ‚Äúhash bang,‚Äù which is slang for the pound/hash/octothorpe symbol (&lt;code&gt;#&lt;/code&gt;), followed by the exclamation point/bang (&lt;code&gt;!&lt;/code&gt;).  This line is responsible for telling the computer where the program or command that will be used to run this file lives.&lt;/p&gt;

&lt;p&gt;Once your file has a shebang, you can make the file executable by adding ‚Äúexecute permissions,‚Äù accomplished by running the following command in your Bash shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ chmod u+x hello.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can then run the program by executing it directly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./hello.sh
Hello, world!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;how-it-works-on-windows&quot;&gt;How it Works on Windows&lt;/h2&gt;

&lt;p&gt;If you‚Äôre not using Windows Subsystem Linux or some other form of porting Bash to Windows, you‚Äôre probably using PowerShell as your shell of choice.  And, I‚Äôve never had very good luck with shebangs working on Windows.  I think it is because of the way Windows handles which programs deal with which file suffixes.  However, starting with Python 3.3, Python for Windows has shipped with a &lt;strong&gt;‚ÄúPython for Windows Launcher‚Äù&lt;/strong&gt;, called from the command line as simply &lt;code&gt;py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can launch your latest version of Python by running it with no arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;$ py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can select which version you‚Äôd like by specifying a version flag.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;$ py -2.7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you can‚Äôt find it or the command isn‚Äôt working, the launcher lives by default in &lt;code&gt;C:\WINDOWS\py.exe&lt;/code&gt;.  Make sure &lt;code&gt;C:\WINDOWS&lt;/code&gt; is on your path and Python files use this executable as their default program.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is &lt;em&gt;really&lt;/em&gt; important.  If your default program for running Python files is set to a specific Python executable instead, you‚Äôll end up with some weird and hard-to-diagnose issues.  So, to ensure that you‚Äôre set up right, run the ‚ÄúDefault Programs‚Äù application and make sure Python files are associated with the &lt;code&gt;C:\WINDOWS\py.exe&lt;/code&gt; executable and not something else.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The nice thing about this launcher is that, if it is the default program to run your Python files, it can process several common forms of shebangs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;#!/usr/bin/env python
#!/usr/bin/python
#!/usr/local/bin/python
#!python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you‚Äôre hoping to make your scripts portable, use one of the ones beginning with &lt;code&gt;/usr&lt;/code&gt;.  If &lt;code&gt;py&lt;/code&gt; encounters any of these, it will use your default Python.  If you specify a version (either major or major.minor), it will use that version instead:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;#!/usr/bin/env python3
#!/usr/bin/env python2.7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition, if you use this &lt;code&gt;/usr/bin/env python&lt;/code&gt; version (as opposed to the &lt;code&gt;/usr/bin/python&lt;/code&gt; or &lt;code&gt;/usr/local/bin/python&lt;/code&gt;), &lt;code&gt;py&lt;/code&gt; will do the additional, expected search down your &lt;code&gt;PATH&lt;/code&gt; for a python command, the same way it would on a Unix-like system.&lt;/p&gt;

&lt;p&gt;There aren‚Äôt really ‚Äúexecute permissions‚Äù on Windows (correct me if I‚Äôm wrong), but once you have one of these lines at the top of your script, you can run it just like an executable in your shell.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python3
# Inside hello.py

print(&quot;Hi buddy!&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;$ ./hello.py
Hi buddy!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just one more thing to make you a little less homesick for your Bash shell when you‚Äôre on Windows.&lt;/p&gt;

&lt;p&gt;There is a lot more information about working with Python on Windows in &lt;a href=&quot;https://docs.python.org/3/using/windows.html&quot;&gt;the Python docs&lt;/a&gt;.  I recommend you take a look if you‚Äôre on windows and you like to find ways to make your life easier.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
        <pubDate>Sun, 01 Jul 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/07/01/windows-python-shebangs/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/07/01/windows-python-shebangs/</guid>
        
        <category>python</category>
        
        
      </item>
    
      <item>
        <title>Python Has a Startup File!</title>
        <description>&lt;p&gt;&lt;em&gt;Cover Photo by Uriel Soberanes on Unsplash&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, I want to be clear.  &lt;em&gt;I&lt;/em&gt; knew that Python has a startup customization file this whole time I‚Äôve been using Python.  &lt;em&gt;I&lt;/em&gt; didn‚Äôt just find out about it this week.  I mean, of &lt;em&gt;course&lt;/em&gt; Python has a startup file.  Everything has a startup file!  I just want to make sure &lt;em&gt;you&lt;/em&gt; know about it.  &lt;em&gt;(Only joking, I had no idea this was a thing.)&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Before you bring it up, I already know about &lt;a href=&quot;https://bpython-interpreter.org/screenshots.html&quot;&gt;bPython&lt;/a&gt;, the awesome, syntax-highlighty, tab-completey, auto-indenty, wonderful drop in replacement for the regular Python interpreter.  I use it all the time.  But that‚Äôs not what this blog post is about.  P.S. if you didn‚Äôt know about bPython, I highly recommend it (Windows users‚Äô mileage may vary).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;pythonstartup&quot;&gt;$PYTHONSTARTUP&lt;/h2&gt;

&lt;p&gt;If you have the environment variable &lt;code&gt;$PYTHONSTARTUP&lt;/code&gt; set to a valid Python file, that file will get run when starting up the Python interpreter.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ export PYTHONSTARTUP=&quot;~/.config/pythonrc.py&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don‚Äôt worry about the name of the file.  Name it whatever you want!  &lt;code&gt;python_startup.py&lt;/code&gt;, or just &lt;code&gt;pythonrc&lt;/code&gt;.  You can also put it in whatever directory you want.  Just make sure your &lt;code&gt;$PYTHONSTARTUP&lt;/code&gt; environment variable matches.  Then, you can put anything you want into that file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# ~/.config/pythonrc.py
a = &quot;Wahoo!&quot;
print(&quot;Soup&quot;)
try:
    import numpy as np
except ImportError:
    print(&quot;Could not import numpy.&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Try running your Python interpreter.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python  # or python3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you should see something similar to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;Python 3.7.0 (default, Jun 29 2018, 20:14:27)
[Clang 9.0.0 (clang-900.0.39.2)] on darwin
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
Soup
&amp;gt;&amp;gt;&amp;gt; np
&amp;lt;module 'numpy' from '/usr/local/lib/python3.7/site-packages/numpy/__init__.py'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; np.zeros((3, 2))
array([[0., 0.],
       [0., 0.],
       [0., 0.]])
&amp;gt;&amp;gt;&amp;gt; a
'Wahoo!'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can import commonly used libraries, create variables for yourself, and more.&lt;/p&gt;

&lt;h2 id=&quot;sysps1-and-sysps2&quot;&gt;sys.ps1 and sys.ps2&lt;/h2&gt;

&lt;p&gt;One neat thing to do is to set the &lt;code&gt;sys.ps1&lt;/code&gt; and &lt;code&gt;sys.ps2&lt;/code&gt; variables, which control your Python prompts.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# ~/.config/pythonrc.py

import sys

sys.ps1 = &quot;üåÆ&quot;
sys.ps2 = &quot;üí©&quot;

# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, back in the interactive REPL:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;üåÆ for i in range(10):
üí©     print(&quot;I am a mature adult.&quot;)
üí©
I am a mature adult.
I am a mature adult.
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In fact, you can even set &lt;code&gt;sys.ps1&lt;/code&gt; and &lt;code&gt;sys.ps2&lt;/code&gt; to objects that aren‚Äôt even strings!  If they‚Äôre not strings, Python will call &lt;code&gt;str(obj)&lt;/code&gt; on them.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# ~/.config/pythonrc.py

import sys
from datetime import datetime

class CustomPS1:
    def __init__(self):
        self.count = 0

    def __str__(self):
        self.count += 1
        return f&quot;({self.count}) {datetime.now().strftime('%H:%m %p')} &amp;gt; &quot;

sys.ps1 = CustomPS1()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And in the interpreter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;(1) 10:06 AM &amp;gt; for i in range(10):
...     print(&quot;Am I cool now?&quot;)
...
Am I cool now?
Am I cool now?
# ...
(2) 11:06 AM &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;the--i-flag&quot;&gt;The -i Flag&lt;/h2&gt;

&lt;p&gt;In addition to these new superpowers, you can temporarily make &lt;em&gt;any&lt;/em&gt; Python script your startup script.  This could come in really handy for some interactive debugging.  Let‚Äôs say you‚Äôre working on a project and you have a script that defines some functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# cool_script.py

def what_time_is_it():
    return &quot;Party Time&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use the &lt;code&gt;-i&lt;/code&gt; flag when you run the Python interpreter to use &lt;code&gt;cool_script.py&lt;/code&gt; as your startup file instead of your usual one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;$ python -i cool_script.py
&amp;gt;&amp;gt;&amp;gt; what_time_is_it()
'Party Time'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you do some cool things with your startup file, share it with me!  I want to know about it!  Happy coding!&lt;/p&gt;
</description>
        <pubDate>Sat, 30 Jun 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/06/30/python-startup-file/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/06/30/python-startup-file/</guid>
        
        <category>python</category>
        
        <category>tricks</category>
        
        
      </item>
    
      <item>
        <title>Ascii Wall-E for Your Terminal</title>
        <description>&lt;p&gt;Two things.  1. I‚Äôm trying out the &lt;a href=&quot;https://fishshell.com/&quot;&gt;fish shell&lt;/a&gt;.  So far I like it!  2. I made Wall-E!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/wall-e.jpg&quot; alt=&quot;Wall-E in my terminal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On their website, the fish shell has a neat ascii picture of a fish.  I saw examples of people putting that in their initial greeting when the terminal opens up.  I thought that was neat, but I wanted something more my style.  So I spent a few &lt;em&gt;cough&lt;/em&gt; &lt;small&gt;hours&lt;/small&gt; &lt;em&gt;cough&lt;/em&gt; making Wall-E, and now he says hello to me whenever I open up my terminal!&lt;/p&gt;

&lt;p&gt;In case you‚Äôre curious, I put the code &lt;a href=&quot;https://gist.github.com/rpalo/cd77a94616b0a30d1c2a2f18d6bc7581&quot;&gt;into a gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Challenge!  Make your own ASCII art and share it.&lt;/p&gt;

&lt;p&gt;Happy Saturday!&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Jun 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/06/23/ascii-wall-e/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/06/23/ascii-wall-e/</guid>
        
        <category>showdev</category>
        
        <category>fish</category>
        
        <category>art</category>
        
        
      </item>
    
  </channel>
</rss>
