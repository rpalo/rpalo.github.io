<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>assert_not magic?</title>
    <description>Programming blog by Ryan Palo.  Code is not magic, and anyone can do it.  Python, Ruby, JavaScript, shell scripting, systems, the web, and more!
</description>
    <link>https://assertnotmagic.com</link>
    <atom:link href="https://assertnotmagic.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 12 Oct 2018 21:33:50 -0700</pubDate>
    <lastBuildDate>Fri, 12 Oct 2018 21:33:50 -0700</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>Uncomfortable Situations Don't Go Away</title>
        <description>&lt;p&gt;&lt;em&gt;Cover Image by Stephen Philpott on Unsplash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hi!  I’m using this post to blow off some steam after a stressful week at work.  If you want to skip over the back story and get to the lesson, you can skip down to the &lt;a href=&quot;#the-lesson&quot;&gt;Lesson&lt;/a&gt; section.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This week at work &lt;em&gt;sucked.&lt;/em&gt;  I mean, &lt;strong&gt;a lot.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I work at a machine shop/injection molding house, where we do a lot of prototypes for people, and then help them move into production quantities.  It’s mostly medical devices, but there are some consumer products and stuff for other industries too.  I’m the mechanical engineer, so I do most of the mold and part designs.&lt;/p&gt;

&lt;p&gt;I also am a programmer and a millenial, so I help out with IT issues.  In addition, I’m in front of a computer most of the day, so I end up handling much of the customer-facing stuff like quotes, orders, quality issues, purchasing, and scheduling/project management.  Lots of scheduling and project management.&lt;/p&gt;

&lt;p&gt;But more on that in a second.&lt;/p&gt;

&lt;p&gt;I like my job!  It’s pretty flexible and a very relaxed atmosphere.  Loud machines and guys joking and yelling a lot.  People whooping and clapping when somebody else blows up a part or runs their tool into a vise.  It’s good!&lt;/p&gt;

&lt;p&gt;In the last few months, we’ve gotten &lt;em&gt;super&lt;/em&gt; busy.  I don’t know what’s causing it, but our schedule went from a consistent three-weeks-out queue to an eight-week queue in just a couple of months.  But we are managing, and, all things considered, I’ve been doing a pretty decent job at estimating and scheduling the jobs so that we hit most of our due dates and make the customers happy.&lt;/p&gt;

&lt;p&gt;Until.&lt;/p&gt;

&lt;p&gt;On Monday this week, one of our top guys had a family emergency.  Sudden, unavoidable, and catastrophic.  Unfortunately, he’s a vital and irreplaceable part of our production process, and he needed to be out all this week and half of next week.&lt;/p&gt;

&lt;p&gt;Obviously, family stuff is way more important than work stuff, so I don’t fault him for leaving as quick as he did or being gone for that long.  You have to do what you have to do.  That being said, there were side-effects.&lt;/p&gt;

&lt;p&gt;Boom goes the schedule.&lt;/p&gt;

&lt;p&gt;Those eight weeks of scheduled jobs that I had in queue?  Every one of them – some of which with hard, fixed deadlines – had lost a critical week and a half of man-hours required to complete them.&lt;/p&gt;

&lt;p&gt;The phone calls began on Tuesday.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hi!  How are you doing?  I’m just calling to check on my parts.  I think they were supposed to be done yesterday?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And the fun part?  I didn’t find out until today (Friday) &lt;em&gt;when&lt;/em&gt; he was going to be coming back.  So I was attempting to shuffle and reschedule around a mystery date.  Guess how many customers like to hear, “I’m sorry, I’m not sure when your items will be complete.  Try back later.”  If you said “none,” you are right!  Most of them say something like, “Well, you &lt;em&gt;have&lt;/em&gt; to give me &lt;em&gt;some&lt;/em&gt; kind of date.”&lt;/p&gt;

&lt;p&gt;Boom goes the pressure.  Wham! goes my blood pressure.  KAPLOWEY goes my anxiety.&lt;/p&gt;

&lt;p&gt;Any normal introvert’s instinct would be to unplug the phone and the router and hope the customers give up and go away.  But I’ve been in situations like this before, and there’s one thing that I’ve learned.&lt;/p&gt;

&lt;h2 id=&quot;the-lesson&quot;&gt;The Lesson&lt;/h2&gt;

&lt;p&gt;Uncomfortable situations &lt;em&gt;never&lt;/em&gt; go away on their own.  And &lt;em&gt;almost always&lt;/em&gt;, if you ignore them, they just fester and get immeasurably worse.  This has happened to me multiple times.  The first few times, I didn’t learn.  I just ignored it.  It invariably came back to bite me.  Library fines, spoiled food in the fridge, serious conversations with friends: left unaddressed, all end in misery (and possibly bad smells).&lt;/p&gt;

&lt;p&gt;It’s always a good idea to confront the unpleasant situation, address it, handle it, and move on.  You’ll feel better.  Everyone else involved will feel better.  You won’t miss out on any chances that you might have missed by doing nothing.&lt;/p&gt;

&lt;p&gt;I’ve noticed that there always seems to be some sort of unforseen benefit to addressing these issues.  Somebody ends up being unexpectedly thankful for your up-front-ness.  You have extra options to deal with the issue that wouldn’t be there later.  People are generally more forgiving if they haven’t been stewing over this issue for a while.  It’s always something nice.&lt;/p&gt;

&lt;h2 id=&quot;just-handle-it-and-then-reward-yourself-with-beer-or-cake&quot;&gt;Just Handle It (and then reward yourself with beer or cake)&lt;/h2&gt;

&lt;p&gt;So, at the end of the day today, I sat down, and I planned out our work schedule for the next eight weeks, working around the missing guy, doing my best to make every customer as happy as possible, given the situation.  Then, I wrote each and every one of them an email, laying out the situation and our plan to deal with it, and what they could expect.  I grovelled a little bit (not excessively), and told them I would keep them updated as things progressed.&lt;/p&gt;

&lt;p&gt;So far, all of the responses I’ve gotten back have been really nice!  One guy offered to come in and run the machine for us!  &lt;a href=&quot;https://amzn.to/2CFRqlZ&quot;&gt;P.S. You should go buy their cake frosters.  I helped design them, they’re cool, and they were created by really nice people.&lt;/a&gt; #AfilliateLink #ShamelessPlug #DontCare.  Do me a favor and &lt;em&gt;don’t&lt;/em&gt; buy the knock-offs from the companies in China.  They’re stealing sales from this small, family-owned (patent-holding!) business, and it sucks.&lt;/p&gt;

&lt;p&gt;Anyways, all this to say that it usually feels bad to face an uncomfortable situation head-on, but it is almost always better than how it will feel to deal with it after it has festered and boiled over later.&lt;/p&gt;

&lt;p&gt;Let me know if you’ve got a situation like that where you wish you would have handled it earlier rather than avoiding it (if it’s not too personal).  I want to hear about it!&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Oct 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/10/12/uncomfortable-things/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/10/12/uncomfortable-things/</guid>
        
        <category>soft-skills</category>
        
        <category>reflection</category>
        
        
      </item>
    
      <item>
        <title>File-Specific Vim Configuration</title>
        <description>&lt;p&gt;It seems like an indicator of a powerful application if you can use it for a long time without any problems and then suddenly discover useful features that add to your enjoyment or productivity that you didn’t even know existed.  This happens to me a lot with the Microsoft Office suite (imagine the look of boyish glee on my face as I discovered conditional formatting in Excel).  This also happens to me in Vim all. the. time.  Granted, this may be more because of a more specialized interface and low discoverability.  But, it’s still like an Easter egg hunt that you come across that you weren’t expecting because it’s the middle of October!&lt;/p&gt;

&lt;p&gt;So here’s the #spoopy Halloween egg for today: &lt;strong&gt;Language-Specific Vim Configuration&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-tip&quot;&gt;The Tip&lt;/h2&gt;

&lt;p&gt;Have you ever wanted to have some custom functions, settings, or key-bindings, but only for a specific language, without losing the ability to use those keybindings when working on other languages?  Or (like in my case), multiple languages have a “build” command, but the command is different for each language, and it would be nice to have &lt;code&gt;&amp;lt;leader&amp;gt;b&lt;/code&gt; do the building for each language so I don’t have to learn a million different muscle memories.&lt;/p&gt;

&lt;h2 id=&quot;introducing-the-ftplugin-directory&quot;&gt;Introducing the &lt;code&gt;ftplugin&lt;/code&gt; Directory&lt;/h2&gt;

&lt;p&gt;Inside your home directory, there is a &lt;code&gt;.vim&lt;/code&gt; directory.  Inside this &lt;code&gt;.vim&lt;/code&gt; directory, you can put a directory called &lt;code&gt;ftplugin&lt;/code&gt; (short for “file-type plugin”).  Inside &lt;em&gt;this&lt;/em&gt; directory, you can put &lt;code&gt;&amp;lt;language&amp;gt;.vim&lt;/code&gt; files for each language you’d like to configure for.  For instance, the plugin for the Rust language  provides the commands &lt;code&gt;:CBuild&lt;/code&gt; and &lt;code&gt;CRun&lt;/code&gt;, but no keymappings.  (I’m learning Rust, my first compiled language – pray for me)  So, I created a &lt;code&gt;~/.vim/ftplugin/rust.vim&lt;/code&gt; file, and right now, all it has are these contents:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-viml&quot;&gt;nnoremap &amp;lt;Leader&amp;gt;b :CBuild&amp;lt;Enter&amp;gt;
nnoremap &amp;lt;Leader&amp;gt;r :CRun&amp;lt;Enter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’m sure I’ll add more to it as I come up with more shortcuts and handy little settings, but that’s all I really wanted right now.&lt;/p&gt;

&lt;h2 id=&quot;clutter-free-configuration&quot;&gt;Clutter-Free Configuration&lt;/h2&gt;

&lt;p&gt;That’s the whole tip!  I thought it was neat and wanted to share it.  I like that you can separate things out into different files so that you don’t end up with one long convoluted &lt;code&gt;.vimrc&lt;/code&gt; file.  If you have any cool language-specific customizations or key-mappings that save you time, share them with me!&lt;/p&gt;

&lt;p&gt;Happy configuring!&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Oct 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/10/06/file-specific-vim-config/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/10/06/file-specific-vim-config/</guid>
        
        <category>vim</category>
        
        <category>tools</category>
        
        
      </item>
    
      <item>
        <title>Binary and Hexadecimal: Part 2 - Conversions</title>
        <description>&lt;p&gt;In the last artical, we discovered the sheer joy of counting in &lt;em&gt;two&lt;/em&gt; – count ‘em, two! – new number systems: Binary and Hexadecimal.&lt;/p&gt;

&lt;p&gt;But just being able to count is only the first step.  To truly unlock the power of these number systems, you’ve got to be able to convert between them.  In the event that you know how to use a search engine, then you already know how to type ‘convert 11001 to decimal.’  But, for quick conversions (and for the fun of it), it’s good to know how it all fits together.&lt;/p&gt;

&lt;h2 id=&quot;a-note-on-notation&quot;&gt;A Note on Notation&lt;/h2&gt;

&lt;p&gt;Sometimes you might see people denote binary numbers starting with &lt;code&gt;0b&lt;/code&gt;, as in &lt;code&gt;0b11011101&lt;/code&gt;.  This is just to clue you in to what kind of number you’re looking at.  If you’re looking at a hex number, it might start with &lt;code&gt;0x&lt;/code&gt; as in &lt;code&gt;0xFCDE23&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;binary---decimal&quot;&gt;Binary -&amp;gt; Decimal&lt;/h2&gt;

&lt;p&gt;If you remember, in the last article, we talked about how the digits in binary represent &lt;strong&gt;powers of two&lt;/strong&gt;.  Here’s a nice table to remind you:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Digit (Power of 2)&lt;/th&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;0&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Decimal Value&lt;/td&gt;
      &lt;td&gt;128&lt;/td&gt;
      &lt;td&gt;64&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;So, when you come across a binary number, all you have to do is figure out the decimal value of each digit and add up the total!  Let’s say you were converting the binary number &lt;code&gt;1101 0011&lt;/code&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Binary Digit&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;TOTAL&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Decimal Value&lt;/td&gt;
      &lt;td&gt;128&lt;/td&gt;
      &lt;td&gt;64&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;211&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;That’s right!  &lt;code&gt;1101 0011&lt;/code&gt; in binary is equal to &lt;code&gt;211&lt;/code&gt; in decimal.  If you get confused about the value of a particular digit, one way to figure it out is to lay out a list of numbers on a piece of paper, starting from the right and going left.  Start with 1, and double each next digit.  One doubled is two, two doubled is four, four doubled is 8, etc.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;128 &amp;lt;- 64 &amp;lt;- 32 &amp;lt;- 16 &amp;lt;- 8 &amp;lt;- 4 &amp;lt;- 2 &amp;lt;- 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then take a look at the binary number you have.  Anywhere there’s a zero, cross that number out!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;128 &amp;lt;- 64 &amp;lt;- XX &amp;lt;- 16 &amp;lt;- XX &amp;lt;- XX &amp;lt;- 2 &amp;lt;- 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can add up whatever’s left.&lt;/p&gt;

&lt;h2 id=&quot;decimal-to-binary&quot;&gt;Decimal to Binary&lt;/h2&gt;

&lt;p&gt;To go from decimal to binary is a little harder to do.  There are a couple of different ways to do it.  I’ll give you both ways, and you can decide if there’s one that you like better.&lt;/p&gt;

&lt;h3 id=&quot;the-subtraction-method&quot;&gt;The Subtraction Method&lt;/h3&gt;

&lt;p&gt;I personally like this method better.  It fits better with my brain.  This version works well if you can remember the powers of two pretty well.  Keep in mind that we’ll be filling in the binary digits from left (biggest) to right (smallest).  I’ll give you a step-by-step guide, and pair it with an example.  It works like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start with the number you want to convert.  We’ll use the same 211 that we used in the last section so we can check our work.&lt;/li&gt;
  &lt;li&gt;Find the &lt;strong&gt;biggest&lt;/strong&gt; power of two that is &lt;strong&gt;less than&lt;/strong&gt; the number to convert.  In this case, 256 (2^8) is too big.  128 (2^7), though, is less than 211, so that’s just right.&lt;/li&gt;
  &lt;li&gt;Mark a 1 on the piece of paper (or screen) for that power of two.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Subtract&lt;/strong&gt; that power of two (128) from your main number.  In this case the result is 211 - 128 = 83.&lt;/li&gt;
  &lt;li&gt;Step down by one power of two.  2^6 is 64.  If 64 &lt;strong&gt;is less than&lt;/strong&gt; the current value (it is), mark a 1 for that power of two and subtract again.  For the example, we’ll mark 1 and get 83 - 64 =  19.&lt;/li&gt;
  &lt;li&gt;Carry on down the powers of two.  For any powers, if the power is &lt;strong&gt;greater than&lt;/strong&gt; your current number (so that you can’t subtract and get a positive result), mark a zero for that power and don’t subtract anything.  Move on to the next power of two.  In our example, 32 is the next power of two, and it’s bigger than 19.  So, mark a zero and move on.&lt;/li&gt;
  &lt;li&gt;The next power of two is 16, which is smaller than 19.  So mark a 1 and do 19 - 16 = 3.&lt;/li&gt;
  &lt;li&gt;Next is 8.  8 is bigger than 3, so mark a zero and don’t subtract.&lt;/li&gt;
  &lt;li&gt;Next is 4.  4 is bigger than 3, so mark a zero and don’t subtract.&lt;/li&gt;
  &lt;li&gt;Next is 2.  2 is less than 3, so mark a 1 and subtract: 3 - 2 = 1.&lt;/li&gt;
  &lt;li&gt;Next is 1.  1 is equal to 1, so mark a 1 and subtract: 1 - 1 = 0.&lt;/li&gt;
  &lt;li&gt;Once you get to zero, stop!  You’re done.  Take a look at your marks.  You should have:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;1 1 0 1 0 0 1 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Does this match what we had in the section above?  Yes!  Success!&lt;/p&gt;

&lt;p&gt;If this way doesn’t seem like it makes much sense, that’s totally fine.  There’s one more way that doesn’t require you to remember the powers of 2.&lt;/p&gt;

&lt;h3 id=&quot;the-other-way-division&quot;&gt;The Other Way: Division&lt;/h3&gt;

&lt;p&gt;For this method, we’re filling in binary digits from &lt;strong&gt;right (smallest) to left (biggest)&lt;/strong&gt;.  We’ll use 211 again.  For each of these calculations, we’ll be dividing by 2 (floor division with a remainder).  Be sure to keep track of the result value &lt;em&gt;and&lt;/em&gt; the remainder for each one.  The remainder represents the binary digit, and the result value is what we’ll use for the next round of calculations.  Here we go:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start with your number.  Divide by 2.  Is there a remainder of 1?  If so, mark 1.  Otherwise, mark 0.  In our case, 211 / 2 = 105, remainder 1.  So, we remember 105, and we mark a 1.&lt;/li&gt;
  &lt;li&gt;Repeat.  105 / 2 = 52, remainder 1.  Remember 52, mark a 1.&lt;/li&gt;
  &lt;li&gt;52 / 2 = 26, remainder 0.  Remember 26, mark a 0.&lt;/li&gt;
  &lt;li&gt;26 / 2 = 13, remainder 0.  Remember 13, mark a 0.&lt;/li&gt;
  &lt;li&gt;13 / 2 = 6, remainder 1.  Remember 6, mark a 1.&lt;/li&gt;
  &lt;li&gt;6 / 2 = 3, remainder 0.  Remember 3, mark a 0.&lt;/li&gt;
  &lt;li&gt;3 / 2 = 1, remainder 1.  Remember 1, mark a 1.&lt;/li&gt;
  &lt;li&gt;1 / 2 = 0, remainder 1.  Mark a 1, and we’re done!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All together (again, from &lt;strong&gt;right to left this time&lt;/strong&gt;), our binary digits are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1 1 0 1 0 0 1 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And again we have &lt;strong&gt;SWEET SWEET VICTORY!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;hexadecimal-to-decimal&quot;&gt;Hexadecimal to Decimal&lt;/h2&gt;

&lt;p&gt;The really cool thing about this is that you &lt;em&gt;already know how to do this one&lt;/em&gt; – you just don’t know it yet.  It’s the same as the binary-to-decimal conversion.  Each place has a value, and you add up all the digits!  This time, though, each place is a power of 16.  Honestly, for hexadecimal values longer than two digits, I always use a calculator or some other tool.  I only remember the first three powers of 2: 16^0 = 1, 16^1 = 16, and 16^2 = 256.  &lt;em&gt;256, you say!  That&lt;/em&gt; is &lt;em&gt;an easy number to remember.  I’ll remember that for all time!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s do a short example and then a long one.  First, let’s try converting &lt;code&gt;6C&lt;/code&gt; to decimal.  We have 6 in the “16’s” place and &lt;code&gt;C&lt;/code&gt; (or 12) in the “1’s” place.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Hex Digit&lt;/th&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;TOTAL&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Decimal Value&lt;/td&gt;
      &lt;td&gt;6 * 16^1 = 96&lt;/td&gt;
      &lt;td&gt;12 * 16^0 = 12&lt;/td&gt;
      &lt;td&gt;108&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;That’s right!  &lt;code&gt;6C&lt;/code&gt; in binary is equal to 108.&lt;/p&gt;

&lt;p&gt;You’ll notice that two hex digits can include all of the values between 0 and 255.  For those paying attention, you might recognize that 0 - 255 are also the values that can be shown in 8 binary digits – or one byte!  This is useful because things like CSS commonly use hex digits when referring to values in that range.  And now you have the power to convert &lt;code&gt;#BADA55&lt;/code&gt; as a hex color into RGB values:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;R: BA = &lt;code&gt;11*16 + 10*1&lt;/code&gt; = 186&lt;/li&gt;
  &lt;li&gt;G: DA = &lt;code&gt;13*16 + 10*1&lt;/code&gt; = 218&lt;/li&gt;
  &lt;li&gt;B: 55 = &lt;code&gt;5*16 + 5&lt;/code&gt; = 85&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So we know that &lt;code&gt;#BADA55&lt;/code&gt; is a color with quite a bit of green, medium-high amounts of red, and not a whole lot of blue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bada55.jpeg&quot; alt=&quot;The #BADA55 color&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VINDICATION!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;decimal-to-hexadecial&quot;&gt;Decimal to Hexadecial&lt;/h2&gt;

&lt;p&gt;Similarly, the process for converting decimal numbers to hexadecimal is the same as converting binary to decimal.  Either of the binary methods can be used (subtraction or division).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Once we go over how to convert binary to hex and back, you might decide it’s easier to convert hex to binary first and then convert binary to decimal.  However you want to do it!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We’ll do a division example just to confirm.  Let’s convert 108 to hexadecimal to check our answer.  Remember again that, since we’re doing the division method, we’ll have to write down the hex digits from &lt;strong&gt;right to left&lt;/strong&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start with 108.  Divide by 16.  108 / 16 = 6, remainder 12.  The right-most digit is 12, or &lt;code&gt;C&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;6 / 16 = 0, remainder 6.  The next digit is 6.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Altogether, 108 in hex is &lt;code&gt;6C&lt;/code&gt;!  Success again!&lt;/p&gt;

&lt;h2 id=&quot;hexadecimal-to-binary&quot;&gt;Hexadecimal to Binary&lt;/h2&gt;

&lt;p&gt;The nice thing about hexadecimal and binary is that 16 is a multiple of 2.  In fact, 16 = 2^4.  When converting hex to binary, you can essentially interchange each hex digit for 4 digits of binary and vice versa.  &lt;em&gt;How&lt;/em&gt; you convert that single digit of hex to 4 digits of binary is kind of up to you.  When I do it, it comes down to a combination of a little memorization and converting through to decimal.&lt;/p&gt;

&lt;p&gt;Let’s take a look.  Let’s convert &lt;code&gt;DB&lt;/code&gt; from hex to binary.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;D&lt;/code&gt; in hex is 13 in decimal.&lt;/li&gt;
  &lt;li&gt;Next we figure out which 4 binary digits we need to make 13.  13 is 8 + 4 + 1.  Those places in binary are: &lt;code&gt;1101&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Thus, the binary conversion for the first digit, &lt;code&gt;D&lt;/code&gt;, is &lt;code&gt;1101&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Next digit is &lt;code&gt;B&lt;/code&gt;.  Same process.  &lt;code&gt;B&lt;/code&gt; is 11 in decimal.&lt;/li&gt;
  &lt;li&gt;Making 11 in binary: 8 + 2 + 1, or &lt;code&gt;1011&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Thus, B = &lt;code&gt;1011&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Soooo, combining everything, &lt;code&gt;DB&lt;/code&gt; in hex is the same as &lt;code&gt;1101 1011&lt;/code&gt;.  Did I plan for the binary number to be so symmetric?  No.  Will I claim credit for it?  Absolutely.&lt;/p&gt;

&lt;h2 id=&quot;binary-to-hexadecimal&quot;&gt;Binary to Hexadecimal&lt;/h2&gt;

&lt;p&gt;Going the other way is exactly the opposite process.  Once again, we’ll be converting &lt;code&gt;1101 1011&lt;/code&gt; from binary to hex to check our work.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Let’s break our binary number into chunks of 4 (like I’ve been doing): &lt;code&gt;1101   |    1011&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;And now we convert the first chunk to decimal: &lt;code&gt;1101 = 8*1 + 4*1 + 2*0 + 1*1 = 13&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;13 in decimal converts to &lt;code&gt;D&lt;/code&gt; in hex.  Our first digit is &lt;code&gt;D&lt;/code&gt;!  (As expected.)&lt;/li&gt;
  &lt;li&gt;The next chunk of binary: &lt;code&gt;1011 = 8*1 + 4*0 + 2*1 + 1*1&lt;/code&gt; = 11.&lt;/li&gt;
  &lt;li&gt;11 in decimal converts to &lt;code&gt;B&lt;/code&gt; in hex.  Our second digit is &lt;code&gt;B&lt;/code&gt;!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the end, our final hex number ends up being &lt;code&gt;DB&lt;/code&gt;.  Just like we thought.&lt;/p&gt;

&lt;h2 id=&quot;the-true-power-of-powers&quot;&gt;The True Power… of Powers&lt;/h2&gt;

&lt;p&gt;And that’s it!  Go forth and conquer numbers everywhere.  Amaze your friends by speaking to them in binary (or, possibly, get mocked for being a GIANT NERD 😁), streamline your CSS coding by eyeballing hex codes, and feel great about understanding how computers and math work just a little better.  A lot of these conversion skills will carry over to other number systems: try looking up Octal and doing some conversions to and from that!&lt;/p&gt;

&lt;p&gt;As always, the math can be a bit intimidating, so if you have any questions or don’t feel 100% confident in your number-fu, feel free to reach out to me and I’d be happy to show some more examples and help you get up to speed.&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Sep 2018 11:22:19 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/09/16/binary-and-hexadecimal-part-2-conversions/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/09/16/binary-and-hexadecimal-part-2-conversions/</guid>
        
        <category>computer-science</category>
        
        <category>basics</category>
        
        <category>beginner</category>
        
        
      </item>
    
      <item>
        <title>Binary and Hexadecimal: Part 1</title>
        <description>&lt;p&gt;There are two reasons why I’ve seen people avoid learning how binary and hexadecimal number systems work: either they’re intimidated because they don’t consider themselves “math people,” or they think it’s a waste because “why am I ever going to need this?”  I really think there are some neat uses to these alternative numbering systems… and they’re fun!&lt;/p&gt;

&lt;p&gt;I’m definitely going to try to make them as accessible as I can in this post and take all of the intimidation out of them.  You don’t need to be a “math person.”  As long as you’re a “person who can count on their fingers,” you’ll be OK.  If you don’t have fingers, find a friend and use their fingers.  If you don’t have fingers and don’t have a friend, then today is your lucky day!  Now you’ve got three friends: Binary, Hexadecimal, and me!  And you can count them on &lt;em&gt;my&lt;/em&gt; fingers if you want.&lt;/p&gt;

&lt;h2 id=&quot;starting-from-the-beginning-decimal&quot;&gt;Starting from the Beginning: Decimal&lt;/h2&gt;

&lt;p&gt;Let’s go back to elementary school for a second.  How does counting work?  Well, we have ten shapes we can use to represent values: numbers!&lt;/p&gt;

&lt;p&gt;0	1	2	3	4	5	6	7	8	9&lt;/p&gt;

&lt;p&gt;Zero through nine is ten digits.  These are the &lt;em&gt;only&lt;/em&gt; digits we count with – at least if we’re using &lt;a href=&quot;https://en.wikipedia.org/wiki/Arabic_numerals&quot;&gt;Arabic Numerals&lt;/a&gt;.  If you’re not using Arabic Numerals but still using the decimal system, you’ll still have ten digits available to you.  They might just look a little different.&lt;/p&gt;

&lt;p&gt;So how do we count?  We start with the first digit available to us: 0.  Let’s count our first time, adding one to our total.  We still have 8 numerals we haven’t seen yet, so we move to the next one: 1.  Then 2.  Then 3.  And so on, until we get to 9.&lt;/p&gt;

&lt;p&gt;At that point, we’ve hit a snag.  We’ve run out of numerals!  So, what do we do?  We tally that round of counting 10 times by &lt;strong&gt;incrementing a new digit by one&lt;/strong&gt; and &lt;strong&gt;resetting that digit to 0.&lt;/strong&gt;  Now we’re at 10.  And we can start again, stepping through the numerals available to us: 11, 12, 13, 14, 15, 16, 17, 18, 19… Uh oh.  We’ve completed another round through all of the numerals.  So again, we increment our tally and increment the &lt;em&gt;second digit&lt;/em&gt;, the one on the left, to mark that fact.  And we reset our right-most digit to zero.&lt;/p&gt;

&lt;p&gt;What happens when our &lt;em&gt;second digit&lt;/em&gt; runs through all of the available numerals: 97, 98, 99… we’re getting ready to increment the right-most digit, which means we should be resetting it to zero and incrementing the second digit, but we’re out of numerals to use in the second spot.  No problem here either, we’ll just add another digit to celebrate that fact!  Now we have a 1 &lt;em&gt;in the third digit location&lt;/em&gt;: 100.  And so it goes.  Congratulations, you still know how to count.&lt;/p&gt;

&lt;p&gt;But, do you see the idea?  We have 10 different numerals the show, and as each digit exhausts the numerals available to it, it increments the digit to the left of it and resets.  That’s how the rest of the number systems work – they just have different amounts of numerals!  With 10 digits, we’re using something called the &lt;strong&gt;“Decimal”&lt;/strong&gt; (deci- means 10) system.&lt;/p&gt;

&lt;h2 id=&quot;so-what-is-binary-then&quot;&gt;So What is Binary Then?&lt;/h2&gt;

&lt;p&gt;Well, you &lt;em&gt;might&lt;/em&gt; guess from the name “BI-nary” (bi- meaning two) that there are two available numerals.  And you’re right!  You may have even heard before what the two numerals are.  0 and 1.  That’s right!  As you can imagine, with significantly fewer numerals, we’re going to rack up digits pretty quickly.  Let’s try counting in binary now.  I think you’re ready.&lt;/p&gt;

&lt;p&gt;Don’t forget that the same basic rules of counting apply.  We’ll start with zero.&lt;/p&gt;

&lt;p&gt;0&lt;/p&gt;

&lt;p&gt;And then we’ll increment to the next available numeral.&lt;/p&gt;

&lt;p&gt;1&lt;/p&gt;

&lt;p&gt;And then we’ll increment to the next available numeral again– wait.  We’re already out of numerals!  What gives!?  That’s OK, we follow our counting rules and increment the next digit and reset our current digit.&lt;/p&gt;

&lt;p&gt;10&lt;/p&gt;

&lt;p&gt;And then we start again.&lt;/p&gt;

&lt;p&gt;11&lt;/p&gt;

&lt;p&gt;Oop!  Now we go to increment our right-most digit, but we’re out of numerals.  So we go to increment our &lt;em&gt;second&lt;/em&gt; right-most digit, but we’re out of numerals there too!  So we continue on to add a new digit and reset our other digits.&lt;/p&gt;

&lt;p&gt;100&lt;/p&gt;

&lt;p&gt;101&lt;/p&gt;

&lt;p&gt;110&lt;/p&gt;

&lt;p&gt;111&lt;/p&gt;

&lt;p&gt;Can you guess what happens next?&lt;/p&gt;

&lt;p&gt;1000!&lt;/p&gt;

&lt;p&gt;Now, have you been keeping track of our count?  How many times have we incremented?  I’m going to make a table, and, to make the ones and zeroes easier to see, I’m going to add some zeroes out in front of the number as placeholders.  It’s OK, though.  They don’t change anything.  The number 000000048 is still 48, right?&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Decimal Number&lt;/th&gt;
      &lt;th&gt;Increment Number&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0001&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0010&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0011&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0100&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0101&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0110&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0111&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1000&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/mechanical_gifs/comments/9cto4l/how_simple_pieces_of_wood_and_hinges_makes_a/&quot;&gt;This is a neat demonstration.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How does that feel?  You’re counting in binary!  You’re practically a computer!  Quietly, to yourself, say “bleep bloop.”  No one will know.  But we will know.  And it’ll make you feel accomplished.  :)&lt;/p&gt;

&lt;p&gt;Now, there’s one more pattern that you may not have noticed, that makes binary even more magical.  Check out the values of the increment number when there is only &lt;em&gt;one 1&lt;/em&gt; and everything else is zero:&lt;/p&gt;

&lt;p&gt;1, 2, 4, and 8.&lt;/p&gt;

&lt;p&gt;Do you see a pattern?  Let me show you some other binary numbers and their decimal equivalents.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Binary&lt;/th&gt;
      &lt;th&gt;Decimal&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0000 0001&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0000 0010&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0000 0100&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0000 1000&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0001 0000&lt;/td&gt;
      &lt;td&gt;16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0010 0000&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0100 0000&lt;/td&gt;
      &lt;td&gt;64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1000 0000&lt;/td&gt;
      &lt;td&gt;128&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Don’t worry about the space in between the binary digits.  I added it in there to make things easier to read.  Otherwise, if you read binary too long, your eyeballs start to fall out.  The important thing is the &lt;em&gt;pattern&lt;/em&gt;.  Do you see it?  Every binary number that’s just one 1 and the rest 0’s is a power of 2.  Or, put another way, the decimal numbers are doubling each time!  That’s right, everytime you go up a digit (i.e. shifting things left one place) in binary, you double!&lt;/p&gt;

&lt;p&gt;But, when you think about it, it makes sense right?  Let’s look at the decimal numbers that are one 1 followed by zeroes.&lt;/p&gt;

&lt;p&gt;1
10
100
1000
10000&lt;/p&gt;

&lt;p&gt;Each one is the previous one, multiplied by 10, in the &lt;strong&gt;deci-&lt;/strong&gt; mal system.  In the &lt;strong&gt;bi-&lt;/strong&gt; nary system, every one is the previous one multipled by 2.  Do you see?  Don’t worry if not.  We’ll do more with that later, and we’ll get more practice.&lt;/p&gt;

&lt;h2 id=&quot;hexadecimal-too&quot;&gt;Hexadecimal Too?&lt;/h2&gt;

&lt;p&gt;Don’t worry.  Now that you’ve got binary nailed down, &lt;strong&gt;hexa-&lt;/strong&gt; (meaning 6) &lt;strong&gt;-deci-&lt;/strong&gt; (meaning 10) &lt;strong&gt;mal&lt;/strong&gt; should be a snap.  Hexadecimal has a &lt;strong&gt;base&lt;/strong&gt; of 16.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Wait, wait, wait.  There’s only 10 numerals.  How are we going to show 16 different “shapes?”  Are we just going to make up new numbers?  I thought you said there wasn’t going to be hard math!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Don’t worry.  We’re not making up any new shapes, and chances are, you’ve probably seen hexadecimal out in the wild somewhere.  You’re right about one thing, though: we need more “numerals” to get our 16 “shapes.”  But, luckily you know these shapes: letters!  That’s right, the numerals in hexadecimal are:&lt;/p&gt;

&lt;p&gt;0 1 2 3 4 5 6 7 8 9 A B C D E F&lt;/p&gt;

&lt;p&gt;(I’ll pause while the skeptical among you take the time to count.  There’s 16.  I’ll wait.)&lt;/p&gt;

&lt;p&gt;Satisfied?  Good.  Now let’s start counting.&lt;/p&gt;

&lt;p&gt;0
1
2
3
4
5
6
7
8
9&lt;/p&gt;

&lt;p&gt;What do we do?  Well, we’ve got more “numerals,” right?  We keep going!&lt;/p&gt;

&lt;p&gt;A
B
C
D
E
F&lt;/p&gt;

&lt;p&gt;Aaaaand now we’re out of numerals.  Increment the next digit and reset!&lt;/p&gt;

&lt;p&gt;10
11
12
13&lt;/p&gt;

&lt;p&gt;And so on.  And when that second digit gets up there after much more counting?&lt;/p&gt;

&lt;p&gt;F8
F9
FA
FB
FC
FD
FE
FF…
…
100!&lt;/p&gt;

&lt;h2 id=&quot;intermission&quot;&gt;Intermission&lt;/h2&gt;

&lt;p&gt;See?  Hopefully that wasn’t so terrible.  And you counted in both binary and hexadecimal!  Congratulations!  I now confer upon you the title of budding computer scientist.  We can’t really do much useful with this new knowledge yet, though.  In the next post, I’ll show you how to convert back and forth, and what cool things that enables us to do.&lt;/p&gt;

&lt;p&gt;This can be a tough topic, and I don’t want it to be intimidating or scary at all.  If I missed something or it’s not quite clicking, my DM’s are open!  Shoot me a message and we’ll talk about what’s bugging you.&lt;/p&gt;

&lt;p&gt;Happy counting!&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Sep 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/09/10/binary-hexadecimal-part-1/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/09/10/binary-hexadecimal-part-1/</guid>
        
        <category>computer-science</category>
        
        <category>basics</category>
        
        <category>beginner</category>
        
        
      </item>
    
      <item>
        <title>Personal Update: Back At It</title>
        <description>&lt;p&gt;&lt;em&gt;Cover image by Feliphe Schiarolli on Unsplash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hi!  I haven’t written a blog post in a while.  In fact, I’m way behind my pace for the last two months.  I wanted to bang at least 200 words out to keep my writing muscle in shape and get things going again.  I’ve got a couple of posts planned, but I’m sure more inspiration will come.&lt;/p&gt;

&lt;h2 id=&quot;back-to-school&quot;&gt;Back to School!&lt;/h2&gt;

&lt;p&gt;On a personal note, part of why I’ve been busy &lt;em&gt;not&lt;/em&gt; writing blog posts is because last week I had my first lecture of my Master’s in Computer Science (focus on Intelligent Systems, Robotics, Systems Administration, and a bit of Security/Forensics)!  I’m super excited, because, honestly, I really like school.  I’m going to take a bunch of classes over the next two years, learn a lot, get a whole bunch of fodder for more blog posts, graduate (God willing!), and once I get my Master’s, hopefully somebody somewhere will let me teach classes on something.  That’s about as far as I got on the plan.  Anyways, wish me luck, and enjoy the deluge of CS-powered blog posts that are coming your way.&lt;/p&gt;

&lt;h2 id=&quot;punch-cards&quot;&gt;Punch Cards&lt;/h2&gt;

&lt;p&gt;Last week, I didn’t have much time to write a post because I was writing a research paper on the early punch cards used to program computers.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It was pretty punchy, but it had a few holes in it. HA!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As it turns out, the reason why you probably limit your code lines to 80 characters wide is because of how long U.S. money was in the 1880’s.  A guy named &lt;a href=&quot;https://en.wikipedia.org/wiki/Herman_Hollerith&quot;&gt;Herman Hollerith&lt;/a&gt; created punch cards for the U.S. Census Bureau to help speed up processing the census data, and he had a bunch of U.S. Treasury money boxes laying around, so he cut his punch cards to fit in those boxes.  With the spacing of the holes on the card, it left him with 80 columns.  Today, 80 columns is the preferred max line length of the Linux kernel.  Python says try to keep most lines under 72 (to have a nice margin), but definitely limit to 79 columns.  Does every team work like this?  No.  But it’s neat that we work on a standard that programmers have been adhering to one way or another since 1880.  Feels pretty cool, right?&lt;/p&gt;

&lt;p&gt;This week we learned about Binary and Hexadecimal.  I knew about it already thanks to &lt;a href=&quot;https://dev.to/vaidehijoshi/hexes-and-other-magical-numbers&quot;&gt;Vaidehi Joshi’s awesome series&lt;/a&gt;.  I get the feeling I’ll be referring to that series more and more as I go through more classes.  But, expect a post from me on Binary, Hex, and Decimal numbers in the next little while.&lt;/p&gt;

&lt;p&gt;More posts soon!&lt;/p&gt;
</description>
        <pubDate>Thu, 06 Sep 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/09/06/back-at-it/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/09/06/back-at-it/</guid>
        
        <category>update</category>
        
        
      </item>
    
      <item>
        <title>3 Common Mistakes that Python Newbies Make</title>
        <description>&lt;p&gt;Last weekend, I stared mentoring people on &lt;a href=&quot;https://exercism.io&quot;&gt;exercism.io&lt;/a&gt; on the Python track.  I wasn’t sure what to expect, but over the last week I have mentored about 50 people, helping them get their solutions from “tests passing” to “tests passing, readable, &lt;em&gt;and&lt;/em&gt; Pythonic.”  I’m hooked.  It’s a total blast.  I’m going to write a post specifically on that experience.  That’s not this post.  This post is to talk about the three most common mistakes I saw over the last week and some possible alternatives that might be better!  So let’s start the countdown!&lt;/p&gt;

&lt;h2 id=&quot;1-deep-nesting-of-if-statements-or-loops&quot;&gt;1. Deep Nesting of If Statements or Loops&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Calculating whether or not 'year' is a leap year

if year % 4 == 0:
    if year % 100 == 0:
        if year % 400 == 0:
            return True
        else:
            return False
    else:
        return True
else:
    return False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A lot of times, I’ll pull a line from the &lt;a href=&quot;https://www.python.org/dev/peps/pep-0020/#id3&quot;&gt;Zen of Python&lt;/a&gt; to lead off my feedback to a “mentee” (not to be confused with a manitee).  When I see this issue, I always lead with&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Flat is better than nested.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you look at your code with your eyes unfocused, looking at the shapes and not reading the words, and you see a bunch of arrows going out and back in again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\
 \
  \
   \
    \
    /
   /
  /
  \
   \
    \
     \
     /
    /
   /
  /
 /
/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s not &lt;em&gt;definitely&lt;/em&gt; a bad thing, but it is a “code smell,” or a Spidey Sense that something could possibly be refactored.&lt;/p&gt;

&lt;p&gt;So, what can you do instead of nest?  There are a couple things to try.  The first is inverting your logic and using “early returns” to peel off small pieces of the solution space one at a time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if year % 400 == 0:
    return True
if year % 100 == 0:
    return False
if year % 4 == 0:
    return True
return False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the number is divisible by 400, then we immediately return true.  Otherwise, for the rest of our code, we can know that year is &lt;em&gt;definitely not&lt;/em&gt; divisible by 400.  So, at that point, any other year that’s divisible by 100 is not a leap year.  So we peel off that layer of the onion by returning False.&lt;/p&gt;

&lt;p&gt;After that, we can know that &lt;code&gt;year&lt;/code&gt; is definitely not a multiple of 400 &lt;em&gt;or&lt;/em&gt; 100, and the remainder of the code follows the same pattern.&lt;/p&gt;

&lt;p&gt;The other way to avoid nesting is by using “boolean operators:” &lt;code&gt;and, or, and not&lt;/code&gt;.  We can combine &lt;code&gt;if&lt;/code&gt; statements and thus, save ourselves a layer of nesting!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
    return True
else:
    return False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, that leads us to our second item…&lt;/p&gt;

&lt;h2 id=&quot;2-returning-booleans-from-if-statements&quot;&gt;2. Returning Booleans from If Statements&lt;/h2&gt;

&lt;p&gt;We’ll start with our last example from above:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
    return True
else:
    return False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Anytime you find yourself writing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if something:
    return True
else:
    return False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should remember that the clause of an &lt;code&gt;if&lt;/code&gt; statement is itself a boolean!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; year = 2000
&amp;gt;&amp;gt;&amp;gt; year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)
True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, why not type a little less and return the result of the boolean operation directly?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;return (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Granted, at this point, the line may be getting a little long, but the code is a little less redundant now!&lt;/p&gt;

&lt;h2 id=&quot;3-lists-are-like-hammers--not-everything-is-a-nail&quot;&gt;3. Lists are Like Hammers – Not Everything is a Nail&lt;/h2&gt;

&lt;p&gt;Here are two possible ways that this could show up:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;some_numbers = [1, 2, 5, 7, 8, ...]
other_numbers = [1, 3, 6, 7, 9, ...]
# Let's try to combine these two without duplicates
for number in other_numbers:
    if number not in some_numbers:
        some_numbers.append(number)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;data = [[&quot;apple&quot;, 4], [&quot;banana&quot;, 2], [&quot;grape&quot;, 14]]
# What fruits do we have?
for item in data:
    print(item[0])
# =&amp;gt; &quot;apple&quot; &quot;banana&quot; &quot;grape&quot;
# How many grapes do we have?
for item in data:
    if item[0] == &quot;grape&quot;:
        print(item[1])
# =&amp;gt; 14
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the first case, you’re trying to keep track of some groups of items and you want to combine them without duplicates.  This is an &lt;em&gt;ideal&lt;/em&gt; candidate for a &lt;a href=&quot;https://www.geeksforgeeks.org/sets-in-python/&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt;.  Sets inherently keep track of their items (although not the order, so don’t use a set if the order is important).  You can declare them with the built-in &lt;code&gt;set()&lt;/code&gt; function or with squiggle braces (&lt;code&gt;{}&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;some_numbers = {1, 2, 5, 7, 8}
other_numbers = {1, 3, 6, 7, 9}
# Sets use the 'binary or' operator to do &quot;unions&quot;
# which is where they take all of the unique elements
some_numbers | other_numbers
# =&amp;gt; {1, 2, 3, 5, 6, 7, 8, 9}

# You can even add single items in!
some_numbers.add(10)
# =&amp;gt; {1, 2, 5, 7, 8, 10}

# But adding a duplicate doesn't change anything
some_numbers.add(1)
# =&amp;gt; {1, 2, 5, 7, 8, 10}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the second case, again, order probably isn’t critical.  You want to keep track of some data by a “label” or something, but be able to keep them all together and list them out as necessary.  This time, you’re probably looking for a &lt;code&gt;dict&lt;/code&gt;.  You can create those with either the &lt;code&gt;dict()&lt;/code&gt; built-in function or, again, squiggle braces (&lt;code&gt;{}&lt;/code&gt;).  This time, however, you separate the labels (keys) and the values with a colon.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;fruits = {
    &quot;apples&quot;: 4,
    &quot;bananas&quot;: 2,
    &quot;grapes&quot;: 14,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can list out all of the keys (or values!).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;list(fruits.keys())
# =&amp;gt; [&quot;apples&quot;, &quot;bananas&quot;, &quot;grapes&quot;]
list(fruits.values())
# =&amp;gt; [4, 2, 14]

# Or both!
list(fruits.items())
# =&amp;gt; [(&quot;apples&quot;, 4), (&quot;bananas&quot;, 2), (&quot;grapes&quot;, 14)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you can ask it about (or give it a new value for) specific keys.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# How many grapes are there?
fruits[&quot;grapes&quot;]
# =&amp;gt; 14

# Not anymore.  I ate some.
fruits[&quot;grapes&quot;] = 0

fruits[&quot;grapes&quot;]
# =&amp;gt; 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using a list, the your algorithm loops through every item to find the right one.  &lt;code&gt;dict&lt;/code&gt;’s are built to have very fast lookups, so, even if your &lt;code&gt;dict&lt;/code&gt; is a bazillion fruits long, finding the &lt;code&gt;grapes&lt;/code&gt; is still super fast – and easy to type!  No loops!&lt;/p&gt;

&lt;h2 id=&quot;call-to-action&quot;&gt;Call to Action&lt;/h2&gt;

&lt;p&gt;Exercism needs mentors!  If you think you’d be a good mentor (or even a decent mentor, just on the easy exercises), sign up at &lt;a href=&quot;http://mentoring.exercism.io/&quot;&gt;their Mentor Signup page&lt;/a&gt;.  Right now, Rust, Golang, and Elixir are especially swamped and need &lt;em&gt;your&lt;/em&gt; help!&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Aug 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/08/04/3-python-newbie-mistakes/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/08/04/3-python-newbie-mistakes/</guid>
        
        <category>python</category>
        
        <category>beginner</category>
        
        
      </item>
    
      <item>
        <title>Python Shebangs on Windows</title>
        <description>&lt;p&gt;&lt;em&gt;Cover image By Sven [Public domain], from Wikimedia Commons&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;shebang-lines-in-the-wild&quot;&gt;Shebang Lines in the Wild&lt;/h2&gt;

&lt;p&gt;In Unix-like systems, if you want a file to be executable, you can add a line to the top called a &lt;strong&gt;“shebang”&lt;/strong&gt;.  They look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;#!/usr/bin/env bash

echo &quot;Hello, world!&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;“Shebang” is short for “hash bang,” which is slang for the pound/hash/octothorpe symbol (&lt;code&gt;#&lt;/code&gt;), followed by the exclamation point/bang (&lt;code&gt;!&lt;/code&gt;).  This line is responsible for telling the computer where the program or command that will be used to run this file lives.&lt;/p&gt;

&lt;p&gt;Once your file has a shebang, you can make the file executable by adding “execute permissions,” accomplished by running the following command in your Bash shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ chmod u+x hello.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can then run the program by executing it directly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./hello.sh
Hello, world!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;how-it-works-on-windows&quot;&gt;How it Works on Windows&lt;/h2&gt;

&lt;p&gt;If you’re not using Windows Subsystem Linux or some other form of porting Bash to Windows, you’re probably using PowerShell as your shell of choice.  And, I’ve never had very good luck with shebangs working on Windows.  I think it is because of the way Windows handles which programs deal with which file suffixes.  However, starting with Python 3.3, Python for Windows has shipped with a &lt;strong&gt;“Python for Windows Launcher”&lt;/strong&gt;, called from the command line as simply &lt;code&gt;py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can launch your latest version of Python by running it with no arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;$ py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can select which version you’d like by specifying a version flag.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;$ py -2.7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you can’t find it or the command isn’t working, the launcher lives by default in &lt;code&gt;C:\WINDOWS\py.exe&lt;/code&gt;.  Make sure &lt;code&gt;C:\WINDOWS&lt;/code&gt; is on your path and Python files use this executable as their default program.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is &lt;em&gt;really&lt;/em&gt; important.  If your default program for running Python files is set to a specific Python executable instead, you’ll end up with some weird and hard-to-diagnose issues.  So, to ensure that you’re set up right, run the “Default Programs” application and make sure Python files are associated with the &lt;code&gt;C:\WINDOWS\py.exe&lt;/code&gt; executable and not something else.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The nice thing about this launcher is that, if it is the default program to run your Python files, it can process several common forms of shebangs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;#!/usr/bin/env python
#!/usr/bin/python
#!/usr/local/bin/python
#!python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you’re hoping to make your scripts portable, use one of the ones beginning with &lt;code&gt;/usr&lt;/code&gt;.  If &lt;code&gt;py&lt;/code&gt; encounters any of these, it will use your default Python.  If you specify a version (either major or major.minor), it will use that version instead:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;#!/usr/bin/env python3
#!/usr/bin/env python2.7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition, if you use this &lt;code&gt;/usr/bin/env python&lt;/code&gt; version (as opposed to the &lt;code&gt;/usr/bin/python&lt;/code&gt; or &lt;code&gt;/usr/local/bin/python&lt;/code&gt;), &lt;code&gt;py&lt;/code&gt; will do the additional, expected search down your &lt;code&gt;PATH&lt;/code&gt; for a python command, the same way it would on a Unix-like system.&lt;/p&gt;

&lt;p&gt;There aren’t really “execute permissions” on Windows (correct me if I’m wrong), but once you have one of these lines at the top of your script, you can run it just like an executable in your shell.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/env python3
# Inside hello.py

print(&quot;Hi buddy!&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;$ ./hello.py
Hi buddy!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just one more thing to make you a little less homesick for your Bash shell when you’re on Windows.&lt;/p&gt;

&lt;p&gt;There is a lot more information about working with Python on Windows in &lt;a href=&quot;https://docs.python.org/3/using/windows.html&quot;&gt;the Python docs&lt;/a&gt;.  I recommend you take a look if you’re on windows and you like to find ways to make your life easier.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
        <pubDate>Sun, 01 Jul 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/07/01/windows-python-shebangs/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/07/01/windows-python-shebangs/</guid>
        
        <category>python</category>
        
        
      </item>
    
      <item>
        <title>Python Has a Startup File!</title>
        <description>&lt;p&gt;&lt;em&gt;Cover Photo by Uriel Soberanes on Unsplash&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, I want to be clear.  &lt;em&gt;I&lt;/em&gt; knew that Python has a startup customization file this whole time I’ve been using Python.  &lt;em&gt;I&lt;/em&gt; didn’t just find out about it this week.  I mean, of &lt;em&gt;course&lt;/em&gt; Python has a startup file.  Everything has a startup file!  I just want to make sure &lt;em&gt;you&lt;/em&gt; know about it.  &lt;em&gt;(Only joking, I had no idea this was a thing.)&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Before you bring it up, I already know about &lt;a href=&quot;https://bpython-interpreter.org/screenshots.html&quot;&gt;bPython&lt;/a&gt;, the awesome, syntax-highlighty, tab-completey, auto-indenty, wonderful drop in replacement for the regular Python interpreter.  I use it all the time.  But that’s not what this blog post is about.  P.S. if you didn’t know about bPython, I highly recommend it (Windows users’ mileage may vary).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;pythonstartup&quot;&gt;$PYTHONSTARTUP&lt;/h2&gt;

&lt;p&gt;If you have the environment variable &lt;code&gt;$PYTHONSTARTUP&lt;/code&gt; set to a valid Python file, that file will get run when starting up the Python interpreter.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ export PYTHONSTARTUP=&quot;~/.config/pythonrc.py&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don’t worry about the name of the file.  Name it whatever you want!  &lt;code&gt;python_startup.py&lt;/code&gt;, or just &lt;code&gt;pythonrc&lt;/code&gt;.  You can also put it in whatever directory you want.  Just make sure your &lt;code&gt;$PYTHONSTARTUP&lt;/code&gt; environment variable matches.  Then, you can put anything you want into that file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# ~/.config/pythonrc.py
a = &quot;Wahoo!&quot;
print(&quot;Soup&quot;)
try:
    import numpy as np
except ImportError:
    print(&quot;Could not import numpy.&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Try running your Python interpreter.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python  # or python3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you should see something similar to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;Python 3.7.0 (default, Jun 29 2018, 20:14:27)
[Clang 9.0.0 (clang-900.0.39.2)] on darwin
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
Soup
&amp;gt;&amp;gt;&amp;gt; np
&amp;lt;module 'numpy' from '/usr/local/lib/python3.7/site-packages/numpy/__init__.py'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; np.zeros((3, 2))
array([[0., 0.],
       [0., 0.],
       [0., 0.]])
&amp;gt;&amp;gt;&amp;gt; a
'Wahoo!'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can import commonly used libraries, create variables for yourself, and more.&lt;/p&gt;

&lt;h2 id=&quot;sysps1-and-sysps2&quot;&gt;sys.ps1 and sys.ps2&lt;/h2&gt;

&lt;p&gt;One neat thing to do is to set the &lt;code&gt;sys.ps1&lt;/code&gt; and &lt;code&gt;sys.ps2&lt;/code&gt; variables, which control your Python prompts.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# ~/.config/pythonrc.py

import sys

sys.ps1 = &quot;🌮&quot;
sys.ps2 = &quot;💩&quot;

# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, back in the interactive REPL:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;🌮 for i in range(10):
💩     print(&quot;I am a mature adult.&quot;)
💩
I am a mature adult.
I am a mature adult.
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In fact, you can even set &lt;code&gt;sys.ps1&lt;/code&gt; and &lt;code&gt;sys.ps2&lt;/code&gt; to objects that aren’t even strings!  If they’re not strings, Python will call &lt;code&gt;str(obj)&lt;/code&gt; on them.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# ~/.config/pythonrc.py

import sys
from datetime import datetime

class CustomPS1:
    def __init__(self):
        self.count = 0

    def __str__(self):
        self.count += 1
        return f&quot;({self.count}) {datetime.now().strftime('%H:%m %p')} &amp;gt; &quot;

sys.ps1 = CustomPS1()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And in the interpreter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;(1) 10:06 AM &amp;gt; for i in range(10):
...     print(&quot;Am I cool now?&quot;)
...
Am I cool now?
Am I cool now?
# ...
(2) 11:06 AM &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;the--i-flag&quot;&gt;The -i Flag&lt;/h2&gt;

&lt;p&gt;In addition to these new superpowers, you can temporarily make &lt;em&gt;any&lt;/em&gt; Python script your startup script.  This could come in really handy for some interactive debugging.  Let’s say you’re working on a project and you have a script that defines some functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# cool_script.py

def what_time_is_it():
    return &quot;Party Time&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use the &lt;code&gt;-i&lt;/code&gt; flag when you run the Python interpreter to use &lt;code&gt;cool_script.py&lt;/code&gt; as your startup file instead of your usual one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;$ python -i cool_script.py
&amp;gt;&amp;gt;&amp;gt; what_time_is_it()
'Party Time'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you do some cool things with your startup file, share it with me!  I want to know about it!  Happy coding!&lt;/p&gt;
</description>
        <pubDate>Sat, 30 Jun 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/06/30/python-startup-file/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/06/30/python-startup-file/</guid>
        
        <category>python</category>
        
        <category>tricks</category>
        
        
      </item>
    
      <item>
        <title>Ascii Wall-E for Your Terminal</title>
        <description>&lt;p&gt;Two things.  1. I’m trying out the &lt;a href=&quot;https://fishshell.com/&quot;&gt;fish shell&lt;/a&gt;.  So far I like it!  2. I made Wall-E!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/wall-e.jpg&quot; alt=&quot;Wall-E in my terminal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On their website, the fish shell has a neat ascii picture of a fish.  I saw examples of people putting that in their initial greeting when the terminal opens up.  I thought that was neat, but I wanted something more my style.  So I spent a few &lt;em&gt;cough&lt;/em&gt; &lt;small&gt;hours&lt;/small&gt; &lt;em&gt;cough&lt;/em&gt; making Wall-E, and now he says hello to me whenever I open up my terminal!&lt;/p&gt;

&lt;p&gt;In case you’re curious, I put the code &lt;a href=&quot;https://gist.github.com/rpalo/cd77a94616b0a30d1c2a2f18d6bc7581&quot;&gt;into a gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Challenge!  Make your own ASCII art and share it.&lt;/p&gt;

&lt;p&gt;Happy Saturday!&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Jun 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/06/23/ascii-wall-e/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/06/23/ascii-wall-e/</guid>
        
        <category>showdev</category>
        
        <category>fish</category>
        
        <category>art</category>
        
        
      </item>
    
      <item>
        <title>Bash Brackets Quick Reference</title>
        <description>&lt;p&gt;&lt;em&gt;Cover image credit: &lt;a href=&quot;https://www.fonts.com/content/learning/fontology/level-4/fine-typography/braces-and-brackets&quot;&gt;Fonts.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Bash has lots of different kinds of brackets.  Like, many much lots.  It adds meaning to doubling up different brackets, and a dollar sign in front means something even more different.  &lt;em&gt;And&lt;/em&gt;, the brackets are used differently than many other languages.  I constantly find myself doing a 5-second search for which one is the right one to do since I’m not writing Bash scripts all the time.  So here, I’m going to lay them all out and then print this article out and staple it to the wall by my desk.  Possibly with a decorative frame.  So here we go.&lt;/p&gt;

&lt;p&gt;A tiny note on all of these is that Bash generally likes to see a space between round or square brackets and whatever’s inside.  It doesn’t like space where curly braces are concerned.  We’ll go through in order of net total squigglyness (NTS score).&lt;/p&gt;

&lt;h2 id=&quot;-single-parentheses-&quot;&gt;( Single Parentheses )&lt;/h2&gt;

&lt;p&gt;Single parenthesis will run the commands inside in a &lt;strong&gt;subshell&lt;/strong&gt;.  This means that they run through all of the commands inside, and then return a single exit code.  Any variables declared or environment changes will get cleaned up and disappeared.  Because it’s within a subshell, if you have it inside a loop, it will run a little slower than if you called the commands &lt;em&gt;without&lt;/em&gt; the parentheses.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;a='This string'
( a=banana; mkdir $a )
echo $a
# =&amp;gt; 'This string'
ls
# =&amp;gt; ...
# =&amp;gt; banana/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;-double-parentheses-&quot;&gt;(( Double Parentheses ))&lt;/h2&gt;

&lt;p&gt;This is for use in integer arithmetic.  You can perform assignments, logical operations, and mathematic operations like multiplication or modulo inside these parentheses.  However, do note that there is no output.  Any variable changes that happen inside them will stick, but don’t expect to be able to assign the result to anything.  If the result inside is &lt;strong&gt;non-zero&lt;/strong&gt;, it returns a &lt;strong&gt;zero&lt;/strong&gt; (success) exit code.  If the result inside is &lt;strong&gt;zero&lt;/strong&gt;, it returns an exit code of &lt;strong&gt;1&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;i=4
(( i += 3 ))
echo $i
# =&amp;gt; 7
(( 4 + 8 ))
# =&amp;gt; No Output
echo $?  # Check the exit code of the last command
# =&amp;gt; 0
(( 5 - 5 ))
echo $?
# =&amp;gt; 1

# Strings inside get considered 'zero'.
(( i += POO ))
echo $i
# =&amp;gt; 7

# You can't use it in an expression
a=(( 4 + 1 ))
# =&amp;gt; bash: syntax error near unexpected token '('
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;-angle-parentheses-&quot;&gt;&amp;lt;( Angle Parentheses )&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Thank you to &lt;a href=&quot;https://dev.to/ferricoxide&quot;&gt;Thomas H Jones II&lt;/a&gt; for &lt;a href=&quot;https://dev.to/ferricoxide/comment/3pdn&quot;&gt;this comment&lt;/a&gt; that inspired this section on Process Substitution&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is known as a &lt;em&gt;process substitution&lt;/em&gt;.  It’s a lot like a pipe, except you can use it anywhere a command expects a file argument.  And you can use multiple at once!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sort -nr -k 5 &amp;lt;( ls -l /bin ) &amp;lt;( ls -l /usr/bin ) &amp;lt;( ls -l /sbin )

# =&amp;gt; Like a billion lines of output that contain many of the
# =&amp;gt; executables on your computer, sorted in order of descending size.

# Just in case you don't magically remember all bash flags,
# -nr  means sort numerically in reverse (descending) order
# -k 5 means sort by Kolumn 5.  In this case, for `ls -l`, that is the &quot;file size&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works because the sort command expects one or many filenames as arguments.  Behind the scenes, the &lt;code&gt;&amp;lt;( stuff )&lt;/code&gt; actually outputs the name of a temporary file (unnamed pipe file) for the &lt;code&gt;sort&lt;/code&gt; command to use.&lt;/p&gt;

&lt;p&gt;Another example of where this comes in handy is the use of the &lt;code&gt;comm&lt;/code&gt; command, which spits out the lines that the files have in common.  Because &lt;code&gt;comm&lt;/code&gt; needs its input files to be sorted, you could either do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# The lame way
sort file1 &amp;gt; file1.sorted
sort file2 &amp;gt; file2.sorted
comm -12 file1.sorted file2.sorted
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ooooor, you can be a total BAshMF and do it this way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# The baller way
comm -12 &amp;lt;( sort file1 ) &amp;lt;( sort file2 )
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;-dollar-single-parentheses-&quot;&gt;$( Dollar Single Parentheses )&lt;/h2&gt;

&lt;p&gt;This is for interpolating a subshell command output into a string.  The command inside gets run inside a subshell, and then any output gets placed into whatever string you’re building.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;intro=&quot;My name is $( whoami )&quot;
echo $intro
# =&amp;gt; My name is ryan

# And just to prove that it's a subshell...
a=5
b=$( a=1000; echo $a )
echo $b
# =&amp;gt; 1000
echo $a
# =&amp;gt; 5
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;-dollar-single-parentheses-dollar-q-&quot;&gt;$( Dollar Single Parentheses Dollar Q )$?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Shoutout again to &lt;a href=&quot;https://dev.to/ferricoxide/comment/3pdn&quot;&gt;Thomas&lt;/a&gt; for the tip!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you want to interpolate a command, but only the exit code and not the value, this is what you use.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;if [[ $( grep -q PATTERN FILE )$? ]]
then
  echo &quot;Dat pattern was totally in dat file!&quot;
else
  echo &quot;NOPE.&quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although, really, this isn’t so much a special bracket pattern as it is an interesting use of &lt;code&gt;$?&lt;/code&gt;, since the above works even if there is a space between the &lt;code&gt;$( stuff )&lt;/code&gt; and the &lt;code&gt;$?&lt;/code&gt;.  But a neat tip, nonetheless.&lt;/p&gt;

&lt;h2 id=&quot;-dollar-double-parentheses-&quot;&gt;$(( Dollar Double Parentheses ))&lt;/h2&gt;

&lt;p&gt;Remember how regular &lt;strong&gt;(( Double Parentheses ))&lt;/strong&gt; don’t output anything?  Remember how that is kind of annoying?  Well, you can use &lt;strong&gt;$(( Dollar Double Parentheses ))&lt;/strong&gt; to perform an &lt;strong&gt;Arithmetic Interpolation&lt;/strong&gt;, which is just a fancy way of saying, “Place the output result into this string.”&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;a=$(( 16 + 2 ))
message=&quot;I don't want to brag, but I have like $(( a / 2 )) friends.&quot;
echo $message
# =&amp;gt; I don't want to brag, but I have like 9 friends.&quot;

b=$(( a *= 2 ))			# You can even do assignments.  The last value calculated will be the output.
echo $b
# =&amp;gt; 36
echo $a
# =&amp;gt; 36
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing to remember is that this is strictly integer arithmetic.  No decimals.  Look into &lt;a href=&quot;https://www.lifewire.com/use-the-bc-calculator-in-scripts-2200588&quot;&gt;&lt;code&gt;bc&lt;/code&gt;&lt;/a&gt; for floating point calculations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;echo $(( 9 / 2 ))  # You might expect 4.5
# =&amp;gt; 4

echo $(( 9 / 2.5 ))
# =&amp;gt; bash: 9 / 2.5 : syntax error: invalid arithmetic operator (error token is &quot;.5 &quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;-single-square-brackets-&quot;&gt;[ Single Square Brackets ]&lt;/h2&gt;

&lt;p&gt;This is an alternate version of the built-in &lt;code&gt;test&lt;/code&gt;.  The commands inside are run and checked for “truthiness.”  Strings of zero length are false.  Strings of length one or more (even if those characters are whitespace) are true.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tldp.org/LDP/abs/html/fto.html&quot;&gt;Here are a list of all of the file-related tests you could do&lt;/a&gt;, like checking if a file exists or if it’s a directory.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.tldp.org/LDP/abs/html/comparison-ops.html&quot;&gt;Here are a list of all of the string-related and integer-related tests you could do&lt;/a&gt;, like checking if two strings are equal or if one is zero-length, or if one number is bigger than another.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;if [ -f my_friends.txt ]
then
	echo &quot;I'm so loved!&quot;
else
	echo &quot;I'm so alone.&quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One last thing that’s important to note is that &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;[&lt;/code&gt; are actually shell commands.  &lt;code&gt;[[ ]]&lt;/code&gt; is actually &lt;em&gt;part of the shell language itself&lt;/em&gt;.  What this means is that the stuff inside of Double Square Brackets isn’t treated like arguments.  The reason you would use Single Square Brackets is if you need to do &lt;em&gt;word splitting&lt;/em&gt; or &lt;em&gt;filename expansion&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Here’s an illustration of the difference.  Let’s say you used Double Square Brackets in the following way.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[[ -f *.txt ]]
echo $?
# =&amp;gt; 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;False, there is no file explicitly named “[asterisk].txt”.  Let’s assume there are currently no &lt;code&gt;.txt&lt;/code&gt; files in our directory.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# If there's no files .txt files:
[ -f *.txt ]; echo $?
# =&amp;gt; 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;*.txt&lt;/code&gt; gets expanded to a blank string, which is not  a file, and &lt;em&gt;then&lt;/em&gt; the test gets evaluated.  Let’s create a txt file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;touch cool_beans.txt
# Now there's exactly one .txt file
[ -f *.txt ]; echo $?
# =&amp;gt; 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;*.txt&lt;/code&gt; gets expanded to a space-separated list of matching filenames: “cool_beans.txt”, and then the test gets evaluated with that one argument.  Since the file exists, the test passes.  But what if there’s two files?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;touch i_smell_trouble.txt  # bean pun.  #sorrynotsorry
# Now there's two files
[ -f *.txt ]
# =&amp;gt; bash: [: too many arguments.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;*.txt&lt;/code&gt; gets expanded to “cool_beans.txt i_smell_trouble.txt”, and then the test is evaluated.  Bash counts each of the filenames as an argument, receives 3 arguments instead of the two it was expecting, and blurffs.&lt;/p&gt;

&lt;p&gt;Just to hammer my point home: even though there are currently two &lt;code&gt;.txt&lt;/code&gt; files, this next test still fails.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[[ -f *.txt ]]; echo $?
# =&amp;gt; 1.  There is still no file called *.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I tried to come up with some examples of why you would want this, but I couldn’t come up with realistic ones.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the most part, it seems like, a good rule of thumb is: if you need to use &lt;code&gt;test&lt;/code&gt; or &lt;code&gt;[ ]&lt;/code&gt;, you’ll know it.  If you’re not sure if you need it, you probably don’t need it and  you should probably use &lt;strong&gt;[[ double square brackets ]]&lt;/strong&gt; to avoid a lot of the tricky gotchas of the &lt;code&gt;test&lt;/code&gt; command.  If your shell is modern enough to have them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;-double-square-brackets-&quot;&gt;[[ Double Square Brackets ]]&lt;/h2&gt;

&lt;p&gt;True/false testing.  Read through the section above for an explanation of the differences between single and double square brackets.  Additionally, double square brackets support extended regular expression matching.  Use quotes around the second argument to force a raw match instead of a regex match.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;pie=good
[[ $pie =~ d ]]; echo $?
# =&amp;gt; 0, it matches the regex!

[[ $pie =~ [aeiou]d ]]; echo $?
# =&amp;gt; 0, still matches

[[ $pie =~ [aei]d ]]; echo $?
# =&amp;gt; 1, no match

[[ $pie =~ &quot;[aeiou]d&quot; ]]; echo $?
# =&amp;gt; 1, no match because there's no literal '[aeoiu]d' inside the word &quot;good&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, inside double square brackets, &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; sort by your locale.  Inside single square brackets, it’s by your machine’s sorting order, which is usually ASCII.&lt;/p&gt;

&lt;h2 id=&quot;-single-curly-braces-&quot;&gt;{ Single Curly Braces }&lt;/h2&gt;

&lt;p&gt;Single curly braces are used for expansion.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;echo h{a,e,i,o,u}p
# =&amp;gt; hap hep hip hop hup
echo &quot;I am &quot;{cool,great,awesome}
# =&amp;gt; I am cool I am great I am awesome

mv friends.txt{,.bak}
# =&amp;gt; braces are expanded first, so the command is `mv friends.txt friends.txt.bak`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The cool thing is that you can make ranges as well!  With leading zeros!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;echo {01..10}
01 02 03 04 05 06 07 08 09 10
echo {01..10..3}
01 04 07 10
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;dollar-braces&quot;&gt;${dollar braces}&lt;/h2&gt;

&lt;p&gt;Note that there are no spaces around the contents.  This is for variable interpolation.  You use it when normal string interpolation could get weird&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# I want to say 'bananaification'
fruit=banana
echo $fruitification
# =&amp;gt; &quot;&quot; No output, because $fruitification is not a variable.
echo ${fruit}ification
# =&amp;gt; bananaification
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The other thing you can use &lt;strong&gt;${Dollar Braces}&lt;/strong&gt; for is variable manipulation.  Here are a few common uses.&lt;/p&gt;

&lt;p&gt;Using a default value if the variable isn’t defined.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;function hello() {
  echo &quot;Hello, ${1:-World}!&quot;
}
hello Ryan
# =&amp;gt; Hello Ryan!
hello
# =&amp;gt; Hello World!

function sign_in() {
	name=$1
  echo &quot;Signing in as ${name:-$( whoami )}&quot;
}
sign_in
# =&amp;gt; Signing in as ryan
sign_in coolguy
# =&amp;gt; Signing in as coolguy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Getting the length of a variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;name=&quot;Ryan&quot;
echo &quot;Your name is ${#name} letters long!&quot;
# =&amp;gt; Your name is 4 letters long!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Chopping off pieces that match a pattern.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;url=https://assertnotmagic.com/about
echo ${url#*/}     # Remove from the front, matching the pattern */, non-greedy
# =&amp;gt; /assertnotmagic.com/about
echo ${url##*/}    # Same, but greedy
# =&amp;gt; about
echo ${url%/*}     # Remove from the back, matching the pattern /*, non-greedy
# =&amp;gt; https://assertnotmagic.com
echo ${url%%/*}    # Same, but greedy
# =&amp;gt; https:/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can uppercase matching letters!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;echo ${url^^a}
# =&amp;gt; https://AssertnotmAgic.com/About
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can get slices of strings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;echo ${url:2:5}  # the pattern is ${var:start:len}.  Start is zero-based.
# =&amp;gt; tps://
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can replace patterns.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;echo ${url/https/ftp}
# =&amp;gt; ftp://assertnotmagic.com

# Use a double slash for the first slash to do a global replace
echo ${url//[aeiou]/X}
# =&amp;gt; https://XssXrtnXtmXgXc.cXm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, you can use variables indirectly &lt;em&gt;as the name of other variables&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;function grades() {
  name=$1
  alice=A
  beth=B
  charles=C
  doofus=D
  echo ${!name}
}

grades alice
# =&amp;gt; A
grades doofus
# =&amp;gt; D
grades &quot;Valoth the Unforgiving&quot;
# =&amp;gt; bash: : bad substitution.   
# There is no variable called Valoth the Unforgiving,
# so it defaults to a blank value.  
# Then, bash looks for a variable with a name of &quot;&quot; and errors out.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;double-angle-heredocs&quot;&gt;«Double Angle Heredocs&lt;/h2&gt;

&lt;p&gt;This is how you make multiline strings in Bash (one method).  Two arrows and then a word – any word that you choose – to signal the start of the string.  The string doesn’t end until you repeat your magic word.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;nice_message=&amp;lt;&amp;lt;MESSAGE
Hi there!  I really like the way you look
when you are teaching newbies things
with empathy and compassion!
You rock!
MESSAGE

echo $nice_message
# =&amp;gt; Hi there!  I really like the way you look
# =&amp;gt; when you are teaching newbies things
# =&amp;gt; with empathy and compassion!
# =&amp;gt; You rock!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The word can be whatever you want.  I generally end up using “HEREDOC” to make it easier for future me.&lt;/p&gt;

&lt;p&gt;One final trick is that, if you add a dash after the arrows, it suppresses any leading tabs (&lt;em&gt;but not spaces&lt;/em&gt;) in your heredoc.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cat &amp;lt;&amp;lt;-HEREDOC
        two leading tabs
    one leading tab
  two spaces here
HEREDOC

# =&amp;gt; two leading tabs
# =&amp;gt; one leading tab
# =&amp;gt;   two spaces here
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;punctuations-a-killer&quot;&gt;Punctuation’s a Killer&lt;/h2&gt;

&lt;p&gt;Hopefully this is helpful.  If you see something I missed or have another cool use for one of these variants, be sure to let me know, and I’ll update it and publicly praise your genius.  Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Jun 2018 00:00:00 -0700</pubDate>
        <link>https://assertnotmagic.com/2018/06/20/bash-brackets-quick-reference/</link>
        <guid isPermaLink="true">https://assertnotmagic.com/2018/06/20/bash-brackets-quick-reference/</guid>
        
        <category>bash</category>
        
        <category>shell</category>
        
        <category>cheatsheet</category>
        
        
      </item>
    
  </channel>
</rss>
